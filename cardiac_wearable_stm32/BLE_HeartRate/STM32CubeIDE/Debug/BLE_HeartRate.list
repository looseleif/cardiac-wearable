
BLE_HeartRate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a214  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800a350  0800a350  0001a350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000008  0800a608  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000041  20000038  0800a638  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000007c  0800a679  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000005f0  20000090  0800a68a  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00001400  20000680  0800a68a  00020680  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .debug_info   00030af1  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000064c4  00000000  00000000  00050bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a8  00000000  00000000  00057078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000026e8  00000000  00000000  00059a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dac7  00000000  00000000  0005c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000316af  00000000  00000000  00089bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9687  00000000  00000000  000bb27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b4905  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab90  00000000  00000000  001b4958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a338 	.word	0x0800a338

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	0800a338 	.word	0x0800a338

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4013      	ands	r3, r2
 80001c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001c4:	68fb      	ldr	r3, [r7, #12]
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d0:	4770      	bx	lr

080001d2 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 80001d2:	b480      	push	{r7}
 80001d4:	b083      	sub	sp, #12
 80001d6:	af00      	add	r7, sp, #0
 80001d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80001da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	43db      	mvns	r3, r3
 80001e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001e8:	4013      	ands	r3, r2
 80001ea:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr

080001f8 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000204:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4313      	orrs	r3, r2
 8000210:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000218:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4013      	ands	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000248:	2303      	movs	r3, #3
 800024a:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 800024c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000250:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	2001      	movs	r0, #1
 8000254:	f7ff ffa4 	bl	80001a0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4619      	mov	r1, r3
 800025c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000260:	f003 fba8 	bl	80039b4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000264:	2001      	movs	r0, #1
 8000266:	f7ff ffb4 	bl	80001d2 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 800026a:	2318      	movs	r3, #24
 800026c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	2002      	movs	r0, #2
 8000270:	f7ff ff96 	bl	80001a0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4619      	mov	r1, r3
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <APPD_Init+0x70>)
 800027a:	f003 fb9b 	bl	80039b4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800027e:	2002      	movs	r0, #2
 8000280:	f7ff ffa7 	bl	80001d2 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000284:	f003 f85c 	bl	8003340 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000288:	f003 f860 	bl	800334c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800028c:	f003 f864 	bl	8003358 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000290:	f000 f824 	bl	80002dc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000294:	f000 f8c6 	bl	8000424 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000298:	bf00      	nop
}
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	48000400 	.word	0x48000400

080002a4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80002a4:	b5b0      	push	{r4, r5, r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <APPD_EnableCPU2+0x34>)
 80002ac:	1d3c      	adds	r4, r7, #4
 80002ae:	461d      	mov	r5, r3
 80002b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b8:	c403      	stmia	r4!, {r0, r1}
 80002ba:	8022      	strh	r2, [r4, #0]
 80002bc:	3402      	adds	r4, #2
 80002be:	0c13      	lsrs	r3, r2, #16
 80002c0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002c2:	f009 fcbd 	bl	8009c40 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f008 ff1a 	bl	8009102 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002ce:	bf00      	nop
}
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}
 80002d6:	bf00      	nop
 80002d8:	0800a350 	.word	0x0800a350

080002dc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	77fb      	strb	r3, [r7, #31]
 8000300:	e038      	b.n	8000374 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000302:	7ffb      	ldrb	r3, [r7, #31]
 8000304:	4a44      	ldr	r2, [pc, #272]	; (8000418 <APPD_SetCPU2GpioConfig+0x13c>)
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	4413      	add	r3, r2
 800030a:	799b      	ldrb	r3, [r3, #6]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d02b      	beq.n	8000368 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	4a41      	ldr	r2, [pc, #260]	; (8000418 <APPD_SetCPU2GpioConfig+0x13c>)
 8000314:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000318:	4a40      	ldr	r2, [pc, #256]	; (800041c <APPD_SetCPU2GpioConfig+0x140>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d01b      	beq.n	8000356 <APPD_SetCPU2GpioConfig+0x7a>
 800031e:	4a3f      	ldr	r2, [pc, #252]	; (800041c <APPD_SetCPU2GpioConfig+0x140>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d823      	bhi.n	800036c <APPD_SetCPU2GpioConfig+0x90>
 8000324:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000328:	d003      	beq.n	8000332 <APPD_SetCPU2GpioConfig+0x56>
 800032a:	4a3d      	ldr	r2, [pc, #244]	; (8000420 <APPD_SetCPU2GpioConfig+0x144>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d009      	beq.n	8000344 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000330:	e01c      	b.n	800036c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000332:	7ffb      	ldrb	r3, [r7, #31]
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <APPD_SetCPU2GpioConfig+0x13c>)
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	4413      	add	r3, r2
 800033a:	889a      	ldrh	r2, [r3, #4]
 800033c:	8bbb      	ldrh	r3, [r7, #28]
 800033e:	4313      	orrs	r3, r2
 8000340:	83bb      	strh	r3, [r7, #28]
          break;
 8000342:	e014      	b.n	800036e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000344:	7ffb      	ldrb	r3, [r7, #31]
 8000346:	4a34      	ldr	r2, [pc, #208]	; (8000418 <APPD_SetCPU2GpioConfig+0x13c>)
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	4413      	add	r3, r2
 800034c:	889a      	ldrh	r2, [r3, #4]
 800034e:	8b7b      	ldrh	r3, [r7, #26]
 8000350:	4313      	orrs	r3, r2
 8000352:	837b      	strh	r3, [r7, #26]
          break;
 8000354:	e00b      	b.n	800036e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000356:	7ffb      	ldrb	r3, [r7, #31]
 8000358:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <APPD_SetCPU2GpioConfig+0x13c>)
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	4413      	add	r3, r2
 800035e:	889a      	ldrh	r2, [r3, #4]
 8000360:	8b3b      	ldrh	r3, [r7, #24]
 8000362:	4313      	orrs	r3, r2
 8000364:	833b      	strh	r3, [r7, #24]
          break;
 8000366:	e002      	b.n	800036e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000368:	bf00      	nop
 800036a:	e000      	b.n	800036e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800036c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800036e:	7ffb      	ldrb	r3, [r7, #31]
 8000370:	3301      	adds	r3, #1
 8000372:	77fb      	strb	r3, [r7, #31]
 8000374:	7ffb      	ldrb	r3, [r7, #31]
 8000376:	2b25      	cmp	r3, #37	; 0x25
 8000378:	d9c3      	bls.n	8000302 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000382:	2303      	movs	r3, #3
 8000384:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000386:	8bbb      	ldrh	r3, [r7, #28]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d014      	beq.n	80003b6 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800038c:	8bbb      	ldrh	r3, [r7, #28]
 800038e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff05 	bl	80001a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff2e 	bl	80001f8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f003 fb06 	bl	80039b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80003a8:	8bbb      	ldrh	r3, [r7, #28]
 80003aa:	2200      	movs	r2, #0
 80003ac:	4619      	mov	r1, r3
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f003 fc6f 	bl	8003c94 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80003b6:	8b7b      	ldrh	r3, [r7, #26]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d012      	beq.n	80003e2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80003bc:	8b7b      	ldrh	r3, [r7, #26]
 80003be:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	2002      	movs	r0, #2
 80003c2:	f7ff feed 	bl	80001a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003c6:	2002      	movs	r0, #2
 80003c8:	f7ff ff16 	bl	80001f8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <APPD_SetCPU2GpioConfig+0x144>)
 80003d2:	f003 faef 	bl	80039b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003d6:	8b7b      	ldrh	r3, [r7, #26]
 80003d8:	2200      	movs	r2, #0
 80003da:	4619      	mov	r1, r3
 80003dc:	4810      	ldr	r0, [pc, #64]	; (8000420 <APPD_SetCPU2GpioConfig+0x144>)
 80003de:	f003 fc59 	bl	8003c94 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003e2:	8b3b      	ldrh	r3, [r7, #24]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d013      	beq.n	8000410 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003e8:	8b3b      	ldrh	r3, [r7, #24]
 80003ea:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	2004      	movs	r0, #4
 80003ee:	f7ff fed7 	bl	80001a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003f2:	2004      	movs	r0, #4
 80003f4:	f7ff ff00 	bl	80001f8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4807      	ldr	r0, [pc, #28]	; (800041c <APPD_SetCPU2GpioConfig+0x140>)
 80003fe:	f003 fad9 	bl	80039b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000402:	8b3b      	ldrh	r3, [r7, #24]
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <APPD_SetCPU2GpioConfig+0x140>)
 800040a:	f003 fc43 	bl	8003c94 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800040e:	bf00      	nop
 8000410:	bf00      	nop
}
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	0800a3ec 	.word	0x0800a3ec
 800041c:	48000800 	.word	0x48000800
 8000420:	48000400 	.word	0x48000400

08000424 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000428:	bf00      	nop
}
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
	...

08000434 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <LL_C2_PWR_SetPowerMode+0x28>)
 800043e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000442:	f023 0207 	bic.w	r2, r3, #7
 8000446:	4905      	ldr	r1, [pc, #20]	; (800045c <LL_C2_PWR_SetPowerMode+0x28>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4313      	orrs	r3, r2
 800044c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	58000400 	.word	0x58000400

08000460 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <LL_EXTI_EnableIT_32_63+0x24>)
 800046a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800046e:	4905      	ldr	r1, [pc, #20]	; (8000484 <LL_EXTI_EnableIT_32_63+0x24>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4313      	orrs	r3, r2
 8000474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	58000800 	.word	0x58000800

08000488 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000496:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80004a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	021b      	lsls	r3, r3, #8
 80004aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ae:	4313      	orrs	r3, r2
 80004b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	cafecafe 	.word	0xcafecafe

080004c4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	608b      	str	r3, [r1, #8]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <LL_DBGMCU_GetDeviceID+0x18>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e0042000 	.word	0xe0042000

08000508 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <LL_DBGMCU_GetRevisionID+0x18>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0c1b      	lsrs	r3, r3, #16
 8000512:	b29b      	uxth	r3, r3
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e0042000 	.word	0xe0042000

08000524 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <LL_LPM_EnableSleep+0x1c>)
 800052a:	691b      	ldr	r3, [r3, #16]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <LL_LPM_EnableSleep+0x1c>)
 800052e:	f023 0304 	bic.w	r3, r3, #4
 8000532:	6113      	str	r3, [r2, #16]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	22ff      	movs	r2, #255	; 0xff
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	22ca      	movs	r2, #202	; 0xca
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2253      	movs	r2, #83	; 0x53
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f023 0207 	bic.w	r2, r3, #7
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	609a      	str	r2, [r3, #8]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MX_APPE_Config+0x18>)
 80005aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005ae:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80005b0:	f000 f830 	bl	8000614 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80005b4:	f000 f835 	bl	8000622 <Config_HSE>

  return;
 80005b8:	bf00      	nop
}
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	58004000 	.word	0x58004000

080005c0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80005c4:	f000 f841 	bl	800064a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80005c8:	f000 f85a 	bl	8000680 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005cc:	4909      	ldr	r1, [pc, #36]	; (80005f4 <MX_APPE_Init+0x34>)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fe56 	bl	8001280 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80005d4:	f7ff fe2c 	bl	8000230 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80005d8:	2101      	movs	r1, #1
 80005da:	2001      	movs	r0, #1
 80005dc:	f009 fbce 	bl	8009d7c <UTIL_LPM_SetOffMode>

  Led_Init();
 80005e0:	f000 f927 	bl	8000832 <Led_Init>

  Button_Init();
 80005e4:	f000 f92c 	bl	8000840 <Button_Init>
  
  RxUART_Init();
 80005e8:	f000 f9ba 	bl	8000960 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80005ec:	f000 f856 	bl	800069c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005f0:	bf00      	nop
}
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200004a0 	.word	0x200004a0

080005f8 <Init_Smps>:

void Init_Smps(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005fc:	bf00      	nop
}
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <Init_Exti>:

void Init_Exti(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800060a:	2050      	movs	r0, #80	; 0x50
 800060c:	f7ff ff28 	bl	8000460 <LL_EXTI_EnableIT_32_63>

  return;
 8000610:	bf00      	nop
}
 8000612:	bd80      	pop	{r7, pc}

08000614 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000618:	bf00      	nop
}
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000628:	2000      	movs	r0, #0
 800062a:	f008 fd2b 	bl	8009084 <OTP_Read>
 800062e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d005      	beq.n	8000642 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	799b      	ldrb	r3, [r3, #6]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff24 	bl	8000488 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000640:	bf00      	nop
 8000642:	bf00      	nop
}
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <System_Init>:

static void System_Init(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  Init_Smps();
 800064e:	f7ff ffd3 	bl	80005f8 <Init_Smps>

  Init_Exti();
 8000652:	f7ff ffd8 	bl	8000606 <Init_Exti>

  Init_Rtc();
 8000656:	f000 f803 	bl	8000660 <Init_Rtc>

  return;
 800065a:	bf00      	nop
}
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <Init_Rtc+0x1c>)
 8000666:	f7ff ff7a 	bl	800055e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800066a:	2100      	movs	r1, #0
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <Init_Rtc+0x1c>)
 800066e:	f7ff ff86 	bl	800057e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <Init_Rtc+0x1c>)
 8000674:	f7ff ff66 	bl	8000544 <LL_RTC_EnableWriteProtection>

  return;
 8000678:	bf00      	nop
}
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40002800 	.word	0x40002800

08000680 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000684:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000688:	f7ff ff1c 	bl	80004c4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800068c:	f009 fb64 	bl	8009d58 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000690:	2004      	movs	r0, #4
 8000692:	f7ff fecf 	bl	8000434 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000696:	bf00      	nop
}
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006a2:	f009 f917 	bl	80098d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <appe_Tl_Init+0x50>)
 80006a8:	2100      	movs	r1, #0
 80006aa:	2040      	movs	r0, #64	; 0x40
 80006ac:	f009 fcc8 	bl	800a040 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <appe_Tl_Init+0x54>)
 80006b2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <appe_Tl_Init+0x58>)
 80006b6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <appe_Tl_Init+0x5c>)
 80006be:	f008 fdfb 	bl	80092b8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <appe_Tl_Init+0x60>)
 80006c4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <appe_Tl_Init+0x64>)
 80006c8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <appe_Tl_Init+0x68>)
 80006cc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80006ce:	f240 533c 	movw	r3, #1340	; 0x53c
 80006d2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4618      	mov	r0, r3
 80006da:	f009 fa3d 	bl	8009b58 <TL_MM_Init>

  TL_Enable();
 80006de:	f009 f8f3 	bl	80098c8 <TL_Enable>

  return;
 80006e2:	bf00      	nop
}
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	080092f1 	.word	0x080092f1
 80006f0:	20030734 	.word	0x20030734
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000721 	.word	0x08000721
 80006fc:	2003094c 	.word	0x2003094c
 8000700:	20030840 	.word	0x20030840
 8000704:	200301f8 	.word	0x200301f8

08000708 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000712:	bf00      	nop
}
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	330b      	adds	r3, #11
 800072e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800073a:	2b07      	cmp	r3, #7
 800073c:	d81f      	bhi.n	800077e <APPE_SysUserEvtRx+0x5e>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <APPE_SysUserEvtRx+0x24>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000765 	.word	0x08000765
 8000748:	08000777 	.word	0x08000777
 800074c:	0800077f 	.word	0x0800077f
 8000750:	0800077f 	.word	0x0800077f
 8000754:	0800077f 	.word	0x0800077f
 8000758:	0800077f 	.word	0x0800077f
 800075c:	0800077f 	.word	0x0800077f
 8000760:	0800077f 	.word	0x0800077f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4618      	mov	r0, r3
 800076a:	f008 fcf7 	bl	800915c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f81b 	bl	80007aa <APPE_SysEvtReadyProcessing>
    break;
 8000774:	e004      	b.n	8000780 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f806 	bl	8000788 <APPE_SysEvtError>
    break;
 800077c:	e000      	b.n	8000780 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800077e:	bf00      	nop
  }

  return;
 8000780:	bf00      	nop
}
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	330b      	adds	r3, #11
 8000796:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3302      	adds	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800079e:	bf00      	nop
}
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b08a      	sub	sp, #40	; 0x28
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	330b      	adds	r3, #11
 80007ce:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3302      	adds	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d11d      	bne.n	800081a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80007de:	f7ff fd61 	bl	80002a4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80007e2:	230f      	movs	r3, #15
 80007e4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80007e6:	237f      	movs	r3, #127	; 0x7f
 80007e8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80007ea:	f7ff fe8d 	bl	8000508 <LL_DBGMCU_GetRevisionID>
 80007ee:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80007f6:	f7ff fe79 	bl	80004ec <LL_DBGMCU_GetDeviceID>
 80007fa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f008 fc92 	bl	8009130 <SHCI_C2_Config>

    APP_BLE_Init();
 800080c:	f001 fccc 	bl	80021a8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f009 fab2 	bl	8009d7c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000818:	e007      	b.n	800082a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d103      	bne.n	800082a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
  return;
 8000828:	bf00      	nop
 800082a:	bf00      	nop
}
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 8000836:	bf00      	nop
}
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <Button_Init>:

static void Button_Init( void )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000844:	2101      	movs	r1, #1
 8000846:	2000      	movs	r0, #0
 8000848:	f002 fbd2 	bl	8002ff0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800084c:	2101      	movs	r1, #1
 800084e:	2001      	movs	r0, #1
 8000850:	f002 fbce 	bl	8002ff0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000854:	2101      	movs	r1, #1
 8000856:	2002      	movs	r0, #2
 8000858:	f002 fbca 	bl	8002ff0 <BSP_PB_Init>
#endif

  return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f002 fd26 	bl	80032b8 <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d00a      	beq.n	8000890 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800087a:	f002 fd35 	bl	80032e8 <HAL_GetTickFreq>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000888:	e002      	b.n	8000890 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800088a:	f7ff fe4b 	bl	8000524 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800088e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000890:	f002 fd12 	bl	80032b8 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f4      	bhi.n	800088a <HAL_Delay+0x2a>
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f009 fac9 	bl	8009e48 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80008be:	f009 fa8d 	bl	8009ddc <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008c2:	bf00      	nop
}
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f009 fab8 	bl	8009e48 <UTIL_SEQ_Run>

  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2040      	movs	r0, #64	; 0x40
 80008ec:	f009 fbca 	bl	800a084 <UTIL_SEQ_SetTask>
  return;
 80008f0:	bf00      	nop
}
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000900:	2002      	movs	r0, #2
 8000902:	f009 fc2b 	bl	800a15c <UTIL_SEQ_SetEvt>
  return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000916:	2002      	movs	r0, #2
 8000918:	f009 fc40 	bl	800a19c <UTIL_SEQ_WaitEvt>
  return;
 800091c:	bf00      	nop
}
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2b10      	cmp	r3, #16
 8000932:	d006      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x1e>
 8000934:	2b10      	cmp	r3, #16
 8000936:	dc0d      	bgt.n	8000954 <HAL_GPIO_EXTI_Callback+0x30>
 8000938:	2b01      	cmp	r3, #1
 800093a:	d005      	beq.n	8000948 <HAL_GPIO_EXTI_Callback+0x24>
 800093c:	2b02      	cmp	r3, #2
 800093e:	d006      	beq.n	800094e <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000940:	e008      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8000942:	f001 fd5f 	bl	8002404 <APP_BLE_Key_Button1_Action>
      break; 
 8000946:	e006      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000948:	f001 fd6a 	bl	8002420 <APP_BLE_Key_Button2_Action>
      break; 
 800094c:	e003      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 800094e:	f001 fd79 	bl	8002444 <APP_BLE_Key_Button3_Action>
      break;
 8000952:	e000      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000954:	bf00      	nop

  }
  return;
 8000956:	bf00      	nop
}
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <RxUART_Init>:

static void RxUART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <RxUART_Init+0x14>)
 8000966:	2201      	movs	r2, #1
 8000968:	4903      	ldr	r1, [pc, #12]	; (8000978 <RxUART_Init+0x18>)
 800096a:	2000      	movs	r0, #0
 800096c:	f000 fef4 	bl	8001758 <HW_UART_Receive_IT>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	0800097d 	.word	0x0800097d
 8000978:	200000b4 	.word	0x200000b4

0800097c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <RxCpltCallback+0x54>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	d81a      	bhi.n	80009be <RxCpltCallback+0x42>
  {
    if (aRxBuffer[0] == '\r')
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <RxCpltCallback+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d10b      	bne.n	80009a8 <RxCpltCallback+0x2c>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      UartCmdExecute();
 8000990:	f000 f826 	bl	80009e0 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <RxCpltCallback+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800099a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099e:	2100      	movs	r1, #0
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <RxCpltCallback+0x5c>)
 80009a2:	f009 fcc1 	bl	800a328 <memset>
 80009a6:	e00a      	b.n	80009be <RxCpltCallback+0x42>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <RxCpltCallback+0x54>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	b291      	uxth	r1, r2
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <RxCpltCallback+0x54>)
 80009b2:	8011      	strh	r1, [r2, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <RxCpltCallback+0x58>)
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <RxCpltCallback+0x5c>)
 80009bc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <RxCpltCallback+0x60>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	4904      	ldr	r1, [pc, #16]	; (80009d4 <RxCpltCallback+0x58>)
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fec7 	bl	8001758 <HW_UART_Receive_IT>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001bc 	.word	0x200001bc
 80009d4:	200000b4 	.word	0x200000b4
 80009d8:	200000bc 	.word	0x200000bc
 80009dc:	0800097d 	.word	0x0800097d

080009e0 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80009e4:	4915      	ldr	r1, [pc, #84]	; (8000a3c <UartCmdExecute+0x5c>)
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <UartCmdExecute+0x60>)
 80009e8:	f7ff fbc8 	bl	800017c <strcmp>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d106      	bne.n	8000a00 <UartCmdExecute+0x20>
  {
    APP_DBG_MSG("SW1 OK\n");
    exti_handle.Line = EXTI_LINE_4;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <UartCmdExecute+0x64>)
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <UartCmdExecute+0x68>)
 80009f6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <UartCmdExecute+0x64>)
 80009fa:	f002 ffb9 	bl	8003970 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80009fe:	e01b      	b.n	8000a38 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8000a00:	4912      	ldr	r1, [pc, #72]	; (8000a4c <UartCmdExecute+0x6c>)
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <UartCmdExecute+0x60>)
 8000a04:	f7ff fbba 	bl	800017c <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d107      	bne.n	8000a1e <UartCmdExecute+0x3e>
    exti_handle.Line = EXTI_LINE_0;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <UartCmdExecute+0x64>)
 8000a10:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8000a14:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <UartCmdExecute+0x64>)
 8000a18:	f002 ffaa 	bl	8003970 <HAL_EXTI_GenerateSWI>
}
 8000a1c:	e00c      	b.n	8000a38 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8000a1e:	490c      	ldr	r1, [pc, #48]	; (8000a50 <UartCmdExecute+0x70>)
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <UartCmdExecute+0x60>)
 8000a22:	f7ff fbab 	bl	800017c <strcmp>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d105      	bne.n	8000a38 <UartCmdExecute+0x58>
    exti_handle.Line = EXTI_LINE_1;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <UartCmdExecute+0x64>)
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <UartCmdExecute+0x74>)
 8000a30:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <UartCmdExecute+0x64>)
 8000a34:	f002 ff9c 	bl	8003970 <HAL_EXTI_GenerateSWI>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800a36c 	.word	0x0800a36c
 8000a40:	200000bc 	.word	0x200000bc
 8000a44:	200000ac 	.word	0x200000ac
 8000a48:	16000004 	.word	0x16000004
 8000a4c:	0800a370 	.word	0x0800a370
 8000a50:	0800a374 	.word	0x0800a374
 8000a54:	16000001 	.word	0x16000001

08000a58 <LL_EXTI_EnableIT_0_31>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a66:	4905      	ldr	r1, [pc, #20]	; (8000a7c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	58000800 	.word	0x58000800

08000a80 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]

}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58000800 	.word	0x58000800

08000aa4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <ReadRtcSsrValue+0x3c>)
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <ReadRtcSsrValue+0x3c>)
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000aba:	e005      	b.n	8000ac8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <ReadRtcSsrValue+0x3c>)
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d1f5      	bne.n	8000abc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000ad0:	683b      	ldr	r3, [r7, #0]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40002800 	.word	0x40002800

08000ae4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000af4:	79ba      	ldrb	r2, [r7, #6]
 8000af6:	491d      	ldr	r1, [pc, #116]	; (8000b6c <LinkTimerAfter+0x88>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d009      	beq.n	8000b22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	4916      	ldr	r1, [pc, #88]	; (8000b6c <LinkTimerAfter+0x88>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3314      	adds	r3, #20
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	4911      	ldr	r1, [pc, #68]	; (8000b6c <LinkTimerAfter+0x88>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	3315      	adds	r3, #21
 8000b32:	7bfa      	ldrb	r2, [r7, #15]
 8000b34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <LinkTimerAfter+0x88>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3314      	adds	r3, #20
 8000b46:	79ba      	ldrb	r2, [r7, #6]
 8000b48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b4a:	79ba      	ldrb	r2, [r7, #6]
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <LinkTimerAfter+0x88>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	440b      	add	r3, r1
 8000b58:	3315      	adds	r3, #21
 8000b5a:	79fa      	ldrb	r2, [r7, #7]
 8000b5c:	701a      	strb	r2, [r3, #0]

  return;
 8000b5e:	bf00      	nop
}
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001c0 	.word	0x200001c0

08000b70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <LinkTimerBefore+0xb8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d032      	beq.n	8000bf2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4927      	ldr	r1, [pc, #156]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000ba0:	7bfa      	ldrb	r2, [r7, #15]
 8000ba2:	4922      	ldr	r1, [pc, #136]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3315      	adds	r3, #21
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	491d      	ldr	r1, [pc, #116]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	79ba      	ldrb	r2, [r7, #6]
 8000bc6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000bc8:	79fa      	ldrb	r2, [r7, #7]
 8000bca:	4918      	ldr	r1, [pc, #96]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3314      	adds	r3, #20
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bdc:	79ba      	ldrb	r2, [r7, #6]
 8000bde:	4913      	ldr	r1, [pc, #76]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3314      	adds	r3, #20
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000bf0:	e014      	b.n	8000c1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	440b      	add	r3, r1
 8000c00:	3315      	adds	r3, #21
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	4908      	ldr	r1, [pc, #32]	; (8000c2c <LinkTimerBefore+0xbc>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3314      	adds	r3, #20
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	701a      	strb	r2, [r3, #0]
  return;
 8000c1a:	bf00      	nop
}
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000250 	.word	0x20000250
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <linkTimer+0x144>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d118      	bne.n	8000c76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c44:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <linkTimer+0x144>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <linkTimer+0x148>)
 8000c4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c4e:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <linkTimer+0x144>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	4949      	ldr	r1, [pc, #292]	; (8000d7c <linkTimer+0x14c>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3315      	adds	r3, #21
 8000c64:	2206      	movs	r2, #6
 8000c66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c68:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <linkTimer+0x150>)
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	e078      	b.n	8000d68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c76:	f000 f909 	bl	8000e8c <ReturnTimeElapsed>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	493e      	ldr	r1, [pc, #248]	; (8000d7c <linkTimer+0x14c>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	4419      	add	r1, r3
 8000c96:	4839      	ldr	r0, [pc, #228]	; (8000d7c <linkTimer+0x14c>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4403      	add	r3, r0
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000ca6:	79fa      	ldrb	r2, [r7, #7]
 8000ca8:	4934      	ldr	r1, [pc, #208]	; (8000d7c <linkTimer+0x14c>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <linkTimer+0x144>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <linkTimer+0x14c>)
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	440b      	add	r3, r1
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4413      	add	r3, r2
 8000cce:	3308      	adds	r3, #8
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d337      	bcc.n	8000d48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <linkTimer+0x144>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000cde:	7b7a      	ldrb	r2, [r7, #13]
 8000ce0:	4926      	ldr	r1, [pc, #152]	; (8000d7c <linkTimer+0x14c>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3315      	adds	r3, #21
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cf2:	e013      	b.n	8000d1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000cf4:	7b7a      	ldrb	r2, [r7, #13]
 8000cf6:	4921      	ldr	r1, [pc, #132]	; (8000d7c <linkTimer+0x14c>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3315      	adds	r3, #21
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d08:	7b7a      	ldrb	r2, [r7, #13]
 8000d0a:	491c      	ldr	r1, [pc, #112]	; (8000d7c <linkTimer+0x14c>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3315      	adds	r3, #21
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d00b      	beq.n	8000d3a <linkTimer+0x10a>
 8000d22:	7b3a      	ldrb	r2, [r7, #12]
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <linkTimer+0x14c>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	3308      	adds	r3, #8
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d2dc      	bcs.n	8000cf4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d3a:	7b7a      	ldrb	r2, [r7, #13]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fecf 	bl	8000ae4 <LinkTimerAfter>
 8000d46:	e00f      	b.n	8000d68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <linkTimer+0x144>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff0c 	bl	8000b70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <linkTimer+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <linkTimer+0x148>)
 8000d60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <linkTimer+0x144>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d68:	89fb      	ldrh	r3, [r7, #14]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000250 	.word	0x20000250
 8000d78:	20000251 	.word	0x20000251
 8000d7c:	200001c0 	.word	0x200001c0
 8000d80:	20000254 	.word	0x20000254

08000d84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <UnlinkTimer+0xf8>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d111      	bne.n	8000dc4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <UnlinkTimer+0xf8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <UnlinkTimer+0xfc>)
 8000da8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	4935      	ldr	r1, [pc, #212]	; (8000e84 <UnlinkTimer+0x100>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3315      	adds	r3, #21
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <UnlinkTimer+0xf8>)
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e03e      	b.n	8000e42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	492f      	ldr	r1, [pc, #188]	; (8000e84 <UnlinkTimer+0x100>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	3314      	adds	r3, #20
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	492a      	ldr	r1, [pc, #168]	; (8000e84 <UnlinkTimer+0x100>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	3315      	adds	r3, #21
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000dec:	79f9      	ldrb	r1, [r7, #7]
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	4824      	ldr	r0, [pc, #144]	; (8000e84 <UnlinkTimer+0x100>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4403      	add	r3, r0
 8000dfc:	3315      	adds	r3, #21
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	4920      	ldr	r1, [pc, #128]	; (8000e84 <UnlinkTimer+0x100>)
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3315      	adds	r3, #21
 8000e10:	4602      	mov	r2, r0
 8000e12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d013      	beq.n	8000e42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000e1a:	79f9      	ldrb	r1, [r7, #7]
 8000e1c:	7bba      	ldrb	r2, [r7, #14]
 8000e1e:	4819      	ldr	r0, [pc, #100]	; (8000e84 <UnlinkTimer+0x100>)
 8000e20:	460b      	mov	r3, r1
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4403      	add	r3, r0
 8000e2a:	3314      	adds	r3, #20
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	4914      	ldr	r1, [pc, #80]	; (8000e84 <UnlinkTimer+0x100>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3314      	adds	r3, #20
 8000e3e:	4602      	mov	r2, r0
 8000e40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	490f      	ldr	r1, [pc, #60]	; (8000e84 <UnlinkTimer+0x100>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	440b      	add	r3, r1
 8000e50:	330c      	adds	r3, #12
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <UnlinkTimer+0xf8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d107      	bne.n	8000e70 <UnlinkTimer+0xec>
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <UnlinkTimer+0x104>)
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
}
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000250 	.word	0x20000250
 8000e80:	20000251 	.word	0x20000251
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	20000254 	.word	0x20000254

08000e8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <ReturnTimeElapsed+0x70>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	d026      	beq.n	8000eea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e9c:	f7ff fe02 	bl	8000aa4 <ReadRtcSsrValue>
 8000ea0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <ReturnTimeElapsed+0x70>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d805      	bhi.n	8000eb8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <ReturnTimeElapsed+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e00a      	b.n	8000ece <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <ReturnTimeElapsed+0x74>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <ReturnTimeElapsed+0x70>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <ReturnTimeElapsed+0x78>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <ReturnTimeElapsed+0x7c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	40d3      	lsrs	r3, r2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	e001      	b.n	8000eee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	b29b      	uxth	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000254 	.word	0x20000254
 8000f00:	2000025c 	.word	0x2000025c
 8000f04:	2000025a 	.word	0x2000025a
 8000f08:	20000259 	.word	0x20000259

08000f0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d108      	bne.n	8000f2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f1c:	f7ff fdc2 	bl	8000aa4 <ReadRtcSsrValue>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <RestartWakeupCounter+0x9c>)
 8000f24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f002 fb99 	bl	800365e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000f2c:	e039      	b.n	8000fa2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d803      	bhi.n	8000f3c <RestartWakeupCounter+0x30>
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <RestartWakeupCounter+0xa0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000f42:	bf00      	nop
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <RestartWakeupCounter+0xa4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f8      	beq.n	8000f44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <RestartWakeupCounter+0xa4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <RestartWakeupCounter+0xa4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f62:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <RestartWakeupCounter+0xa8>)
 8000f66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f6a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f002 fb84 	bl	800367a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <RestartWakeupCounter+0xac>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	041b      	lsls	r3, r3, #16
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <RestartWakeupCounter+0xac>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f82:	f7ff fd8f 	bl	8000aa4 <ReadRtcSsrValue>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <RestartWakeupCounter+0x9c>)
 8000f8a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <RestartWakeupCounter+0xa4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <RestartWakeupCounter+0xa4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f9a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f9c:	f3af 8000 	nop.w
  return ;
 8000fa0:	bf00      	nop
}
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000254 	.word	0x20000254
 8000fac:	20000259 	.word	0x20000259
 8000fb0:	200004a0 	.word	0x200004a0
 8000fb4:	58000800 	.word	0x58000800
 8000fb8:	40002800 	.word	0x40002800

08000fbc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <RescheduleTimerList+0x11c>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fce:	d107      	bne.n	8000fe0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000fd0:	bf00      	nop
 8000fd2:	4b42      	ldr	r3, [pc, #264]	; (80010dc <RescheduleTimerList+0x120>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f8      	bne.n	8000fd2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <RescheduleTimerList+0x120>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <RescheduleTimerList+0x120>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <RescheduleTimerList+0x124>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	493a      	ldr	r1, [pc, #232]	; (80010e4 <RescheduleTimerList+0x128>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	3308      	adds	r3, #8
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800100a:	f7ff ff3f 	bl	8000e8c <ReturnTimeElapsed>
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	d205      	bcs.n	8001026 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <RescheduleTimerList+0x12c>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e04d      	b.n	80010c2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <RescheduleTimerList+0x130>)
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	b292      	uxth	r2, r2
 800102e:	4413      	add	r3, r2
 8001030:	461a      	mov	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4293      	cmp	r3, r2
 8001036:	d906      	bls.n	8001046 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <RescheduleTimerList+0x130>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <RescheduleTimerList+0x12c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e03d      	b.n	80010c2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	b29a      	uxth	r2, r3
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <RescheduleTimerList+0x12c>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001056:	e034      	b.n	80010c2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	4922      	ldr	r1, [pc, #136]	; (80010e4 <RescheduleTimerList+0x128>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	429a      	cmp	r2, r3
 800106e:	d20a      	bcs.n	8001086 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	491c      	ldr	r1, [pc, #112]	; (80010e4 <RescheduleTimerList+0x128>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3308      	adds	r3, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e013      	b.n	80010ae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	4916      	ldr	r1, [pc, #88]	; (80010e4 <RescheduleTimerList+0x128>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	3308      	adds	r3, #8
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	1ac9      	subs	r1, r1, r3
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <RescheduleTimerList+0x128>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4403      	add	r3, r0
 80010aa:	3308      	adds	r3, #8
 80010ac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <RescheduleTimerList+0x128>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3315      	adds	r3, #21
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d1c7      	bne.n	8001058 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010c8:	89bb      	ldrh	r3, [r7, #12]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff1e 	bl	8000f0c <RestartWakeupCounter>

  return ;
 80010d0:	bf00      	nop
}
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40002800 	.word	0x40002800
 80010dc:	200004a0 	.word	0x200004a0
 80010e0:	20000250 	.word	0x20000250
 80010e4:	200001c0 	.word	0x200001c0
 80010e8:	20000258 	.word	0x20000258
 80010ec:	2000025e 	.word	0x2000025e

080010f0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010f6:	f3ef 8310 	mrs	r3, PRIMASK
 80010fa:	617b      	str	r3, [r7, #20]
  return(result);
 80010fc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	22ca      	movs	r2, #202	; 0xca
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2253      	movs	r2, #83	; 0x53
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001114:	4b55      	ldr	r3, [pc, #340]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	4b54      	ldr	r3, [pc, #336]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001122:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800112c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001130:	4950      	ldr	r1, [pc, #320]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	330c      	adds	r3, #12
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d16e      	bne.n	8001224 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001146:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800114a:	494a      	ldr	r1, [pc, #296]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800115a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800115e:	4945      	ldr	r1, [pc, #276]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3310      	adds	r3, #16
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001170:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d04c      	beq.n	8001214 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800117a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800117e:	493d      	ldr	r1, [pc, #244]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	330d      	adds	r3, #13
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d124      	bne.n	80011de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fdf2 	bl	8000d84 <UnlinkTimer>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80011ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011b0:	4930      	ldr	r1, [pc, #192]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa32 	bl	8001630 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ca      	movs	r2, #202	; 0xca
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2253      	movs	r2, #83	; 0x53
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
 80011dc:	e012      	b.n	8001204 <HW_TS_RTC_Wakeup_Handler+0x114>
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f383 8810 	msr	PRIMASK, r3
}
 80011e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f99a 	bl	8001528 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	22ca      	movs	r2, #202	; 0xca
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2253      	movs	r2, #83	; 0x53
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	4619      	mov	r1, r3
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f000 fa95 	bl	800173c <HW_TS_RTC_Int_AppNot>
 8001212:	e022      	b.n	800125a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001214:	f7ff fed2 	bl	8000fbc <RescheduleTimerList>
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f383 8810 	msr	PRIMASK, r3
}
 8001222:	e01a      	b.n	800125a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001224:	bf00      	nop
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f8      	beq.n	8001226 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001244:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f383 8810 	msr	PRIMASK, r3
}
 8001258:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	22ff      	movs	r2, #255	; 0xff
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001262:	bf00      	nop
}
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200004a0 	.word	0x200004a0
 8001270:	20000250 	.word	0x20000250
 8001274:	200001c0 	.word	0x200001c0
 8001278:	20000258 	.word	0x20000258
 800127c:	58000800 	.word	0x58000800

08001280 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800128c:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HW_TS_Init+0x188>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	22ca      	movs	r2, #202	; 0xca
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
 8001294:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <HW_TS_Init+0x188>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2253      	movs	r2, #83	; 0x53
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HW_TS_Init+0x18c>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HW_TS_Init+0x18c>)
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012a8:	4b58      	ldr	r3, [pc, #352]	; (800140c <HW_TS_Init+0x18c>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f1c3 0304 	rsb	r3, r3, #4
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HW_TS_Init+0x190>)
 80012bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <HW_TS_Init+0x18c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012c6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d101      	bne.n	80012e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80012de:	2220      	movs	r2, #32
 80012e0:	e003      	b.n	80012ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	fab2 f282 	clz	r2, r2
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	40d3      	lsrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <HW_TS_Init+0x194>)
 80012f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <HW_TS_Init+0x18c>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001300:	b29b      	uxth	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HW_TS_Init+0x198>)
 8001308:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800130a:	4b43      	ldr	r3, [pc, #268]	; (8001418 <HW_TS_Init+0x198>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	4a40      	ldr	r2, [pc, #256]	; (8001414 <HW_TS_Init+0x194>)
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800131c:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <HW_TS_Init+0x190>)
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	40d3      	lsrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800132a:	4293      	cmp	r3, r2
 800132c:	d904      	bls.n	8001338 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HW_TS_Init+0x19c>)
 8001330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001334:	801a      	strh	r2, [r3, #0]
 8001336:	e003      	b.n	8001340 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <HW_TS_Init+0x19c>)
 800133e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001340:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001344:	f7ff fb9c 	bl	8000a80 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001348:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800134c:	f7ff fb84 	bl	8000a58 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d13d      	bne.n	80013d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HW_TS_Init+0x1a0>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HW_TS_Init+0x1a4>)
 800135e:	f04f 32ff 	mov.w	r2, #4294967295
 8001362:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
 8001368:	e00c      	b.n	8001384 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800136a:	7ffa      	ldrb	r2, [r7, #31]
 800136c:	492e      	ldr	r1, [pc, #184]	; (8001428 <HW_TS_Init+0x1a8>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	330c      	adds	r3, #12
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	3301      	adds	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d9ef      	bls.n	800136a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HW_TS_Init+0x1ac>)
 800138c:	2206      	movs	r2, #6
 800138e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HW_TS_Init+0x188>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HW_TS_Init+0x188>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800139e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HW_TS_Init+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HW_TS_Init+0x188>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HW_TS_Init+0x1b0>)
 80013b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013ba:	2003      	movs	r0, #3
 80013bc:	f002 f95d 	bl	800367a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HW_TS_Init+0x188>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HW_TS_Init+0x188>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e009      	b.n	80013e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HW_TS_Init+0x188>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f002 f93c 	bl	800365e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HW_TS_Init+0x188>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013ee:	2200      	movs	r2, #0
 80013f0:	2103      	movs	r1, #3
 80013f2:	2003      	movs	r0, #3
 80013f4:	f002 f8f1 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013f8:	2003      	movs	r0, #3
 80013fa:	f002 f908 	bl	800360e <HAL_NVIC_EnableIRQ>

  return;
 80013fe:	bf00      	nop
}
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200004a0 	.word	0x200004a0
 800140c:	40002800 	.word	0x40002800
 8001410:	20000259 	.word	0x20000259
 8001414:	2000025a 	.word	0x2000025a
 8001418:	2000025c 	.word	0x2000025c
 800141c:	2000025e 	.word	0x2000025e
 8001420:	20000258 	.word	0x20000258
 8001424:	20000254 	.word	0x20000254
 8001428:	200001c0 	.word	0x200001c0
 800142c:	20000250 	.word	0x20000250
 8001430:	58000800 	.word	0x58000800

08001434 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144a:	f3ef 8310 	mrs	r3, PRIMASK
 800144e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001450:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001452:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001458:	e004      	b.n	8001464 <HW_TS_Create+0x30>
  {
    loop++;
 800145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145e:	3301      	adds	r3, #1
 8001460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001468:	2b05      	cmp	r3, #5
 800146a:	d80c      	bhi.n	8001486 <HW_TS_Create+0x52>
 800146c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001470:	492c      	ldr	r1, [pc, #176]	; (8001524 <HW_TS_Create+0xf0>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	330c      	adds	r3, #12
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1e9      	bne.n	800145a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800148a:	2b06      	cmp	r3, #6
 800148c:	d038      	beq.n	8001500 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800148e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001492:	4924      	ldr	r1, [pc, #144]	; (8001524 <HW_TS_Create+0xf0>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	330c      	adds	r3, #12
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f383 8810 	msr	PRIMASK, r3
}
 80014ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80014b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014b4:	491b      	ldr	r1, [pc, #108]	; (8001524 <HW_TS_Create+0xf0>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3310      	adds	r3, #16
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80014c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014ca:	4916      	ldr	r1, [pc, #88]	; (8001524 <HW_TS_Create+0xf0>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	330d      	adds	r3, #13
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80014dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014e0:	4910      	ldr	r1, [pc, #64]	; (8001524 <HW_TS_Create+0xf0>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014f6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fe:	e008      	b.n	8001512 <HW_TS_Create+0xde>
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f383 8810 	msr	PRIMASK, r3
}
 800150a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001516:	4618      	mov	r0, r3
 8001518:	372c      	adds	r7, #44	; 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200001c0 	.word	0x200001c0

08001528 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001532:	f3ef 8310 	mrs	r3, PRIMASK
 8001536:	60fb      	str	r3, [r7, #12]
  return(result);
 8001538:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800153a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001540:	2003      	movs	r0, #3
 8001542:	f002 f872 	bl	800362a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HW_TS_Stop+0xf0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	22ca      	movs	r2, #202	; 0xca
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HW_TS_Stop+0xf0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2253      	movs	r2, #83	; 0x53
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	4930      	ldr	r1, [pc, #192]	; (800161c <HW_TS_Stop+0xf4>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	330c      	adds	r3, #12
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d142      	bne.n	80015f4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc06 	bl	8000d84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HW_TS_Stop+0xf8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800157e:	7cfb      	ldrb	r3, [r7, #19]
 8001580:	2b06      	cmp	r3, #6
 8001582:	d12f      	bne.n	80015e4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HW_TS_Stop+0xfc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001590:	d107      	bne.n	80015a2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001592:	bf00      	nop
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HW_TS_Stop+0xf0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f8      	bne.n	8001594 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HW_TS_Stop+0xf0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HW_TS_Stop+0xf0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015b2:	bf00      	nop
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HW_TS_Stop+0xf0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f8      	beq.n	80015b4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HW_TS_Stop+0xf0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HW_TS_Stop+0xf0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80015d2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HW_TS_Stop+0x100>)
 80015d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015da:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015dc:	2003      	movs	r0, #3
 80015de:	f002 f84c 	bl	800367a <HAL_NVIC_ClearPendingIRQ>
 80015e2:	e007      	b.n	80015f4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HW_TS_Stop+0x104>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	7cfa      	ldrb	r2, [r7, #19]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80015f0:	f7ff fce4 	bl	8000fbc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HW_TS_Stop+0xf0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015fc:	2003      	movs	r0, #3
 80015fe:	f002 f806 	bl	800360e <HAL_NVIC_EnableIRQ>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f383 8810 	msr	PRIMASK, r3
}
 800160c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800160e:	bf00      	nop
}
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200004a0 	.word	0x200004a0
 800161c:	200001c0 	.word	0x200001c0
 8001620:	20000250 	.word	0x20000250
 8001624:	40002800 	.word	0x40002800
 8001628:	58000800 	.word	0x58000800
 800162c:	20000251 	.word	0x20000251

08001630 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	493b      	ldr	r1, [pc, #236]	; (800172c <HW_TS_Start+0xfc>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	330c      	adds	r3, #12
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d103      	bne.n	800165c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff66 	bl	8001528 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800165c:	f3ef 8310 	mrs	r3, PRIMASK
 8001660:	60fb      	str	r3, [r7, #12]
  return(result);
 8001662:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001666:	b672      	cpsid	i
}
 8001668:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800166a:	2003      	movs	r0, #3
 800166c:	f001 ffdd 	bl	800362a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HW_TS_Start+0x100>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	22ca      	movs	r2, #202	; 0xca
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HW_TS_Start+0x100>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2253      	movs	r2, #83	; 0x53
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	492a      	ldr	r1, [pc, #168]	; (800172c <HW_TS_Start+0xfc>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	330c      	adds	r3, #12
 8001690:	2202      	movs	r2, #2
 8001692:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	4925      	ldr	r1, [pc, #148]	; (800172c <HW_TS_Start+0xfc>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	3308      	adds	r3, #8
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80016a8:	79fa      	ldrb	r2, [r7, #7]
 80016aa:	4920      	ldr	r1, [pc, #128]	; (800172c <HW_TS_Start+0xfc>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3304      	adds	r3, #4
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fab6 	bl	8000c30 <linkTimer>
 80016c4:	4603      	mov	r3, r0
 80016c6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HW_TS_Start+0x104>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HW_TS_Start+0x108>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	7c7a      	ldrb	r2, [r7, #17]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d002      	beq.n	80016e0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80016da:	f7ff fc6f 	bl	8000fbc <RescheduleTimerList>
 80016de:	e013      	b.n	8001708 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	4912      	ldr	r1, [pc, #72]	; (800172c <HW_TS_Start+0xfc>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3308      	adds	r3, #8
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	8a7b      	ldrh	r3, [r7, #18]
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	1ac9      	subs	r1, r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <HW_TS_Start+0xfc>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4403      	add	r3, r0
 8001704:	3308      	adds	r3, #8
 8001706:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HW_TS_Start+0x100>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	22ff      	movs	r2, #255	; 0xff
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001710:	2003      	movs	r0, #3
 8001712:	f001 ff7c 	bl	800360e <HAL_NVIC_EnableIRQ>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f383 8810 	msr	PRIMASK, r3
}
 8001720:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001722:	bf00      	nop
}
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001c0 	.word	0x200001c0
 8001730:	200004a0 	.word	0x200004a0
 8001734:	20000250 	.word	0x20000250
 8001738:	20000251 	.word	0x20000251

0800173c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	460b      	mov	r3, r1
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4798      	blx	r3

  return;
 800174e:	bf00      	nop
}
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	4613      	mov	r3, r2
 8001768:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10c      	bne.n	800178a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HW_UART_Receive_IT+0x3c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HW_UART_Receive_IT+0x40>)
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <HW_UART_Receive_IT+0x44>)
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	89bb      	ldrh	r3, [r7, #12]
 800177e:	461a      	mov	r2, r3
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <HW_UART_Receive_IT+0x40>)
 8001784:	f004 fada 	bl	8005d3c <HAL_UART_Receive_IT>
            break;
 8001788:	e000      	b.n	800178c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800178a:	bf00      	nop
    }

    return;
 800178c:	bf00      	nop
}
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000260 	.word	0x20000260
 8001798:	20000338 	.word	0x20000338
 800179c:	40013800 	.word	0x40013800

080017a0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_UART_RxCpltCallback+0x34>)
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_UART_RxCpltCallback+0x38>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_UART_RxCpltCallback+0x38>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4798      	blx	r3
            }
            break;
 80017c2:	e001      	b.n	80017c8 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80017c4:	bf00      	nop
 80017c6:	e000      	b.n	80017ca <HAL_UART_RxCpltCallback+0x2a>
            break;
 80017c8:	bf00      	nop
    }

    return;
 80017ca:	bf00      	nop
}
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013800 	.word	0x40013800
 80017d8:	20000260 	.word	0x20000260

080017dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_UART_TxCpltCallback+0x34>)
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d107      	bne.n	8001800 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_UART_TxCpltCallback+0x38>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_UART_TxCpltCallback+0x38>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4798      	blx	r3
            }
            break;
 80017fe:	e001      	b.n	8001804 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001800:	bf00      	nop
 8001802:	e000      	b.n	8001806 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001804:	bf00      	nop
    }

    return;
 8001806:	bf00      	nop
}
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40013800 	.word	0x40013800
 8001814:	20000264 	.word	0x20000264

08001818 <LL_RCC_LSE_SetDriveCapability>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001828:	f023 0218 	bic.w	r2, r3, #24
 800182c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_AHB1_GRP1_EnableClock>:
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_AHB2_GRP1_EnableClock>:
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4313      	orrs	r3, r2
 800188c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ac:	f001 fc96 	bl	80031dc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80018b0:	f7fe fe78 	bl	80005a4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 f814 	bl	80018e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018b8:	f000 f870 	bl	800199c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80018bc:	f000 f88e 	bl	80019dc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 f90f 	bl	8001ae2 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c4:	f000 f8f0 	bl	8001aa8 <MX_DMA_Init>
  MX_RTC_Init();
 80018c8:	f000 f8ba 	bl	8001a40 <MX_RTC_Init>
  MX_RNG_Init();
 80018cc:	f000 f8a2 	bl	8001a14 <MX_RNG_Init>
  MX_RF_Init();
 80018d0:	f000 f898 	bl	8001a04 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80018d4:	f7fe fe74 	bl	80005c0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80018d8:	f7fe ffe7 	bl	80008aa <MX_APPE_Process>
 80018dc:	e7fc      	b.n	80018d8 <main+0x30>
	...

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b09a      	sub	sp, #104	; 0x68
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	2248      	movs	r2, #72	; 0x48
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f008 fd1a 	bl	800a328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001906:	f002 fa9f 	bl	8003e48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff84 	bl	8001818 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <SystemClock_Config+0xb8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <SystemClock_Config+0xb8>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <SystemClock_Config+0xb8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800192c:	2347      	movs	r3, #71	; 0x47
 800192e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fdf5 	bl	8004540 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800195c:	f000 f8ce 	bl	8001afc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001960:	236f      	movs	r3, #111	; 0x6f
 8001962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001964:	2302      	movs	r3, #2
 8001966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f003 f951 	bl	8004c28 <HAL_RCC_ClockConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800198c:	f000 f8b6 	bl	8001afc <Error_Handler>
  }
}
 8001990:	bf00      	nop
 8001992:	3768      	adds	r7, #104	; 0x68
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	58000400 	.word	0x58000400

0800199c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2250      	movs	r2, #80	; 0x50
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 fcbd 	bl	800a328 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80019ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80019ba:	2302      	movs	r3, #2
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80019be:	2310      	movs	r3, #16
 80019c0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fd40 	bl	800544a <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019d0:	f000 f894 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_IPCC_Init+0x20>)
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <MX_IPCC_Init+0x24>)
 80019e4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_IPCC_Init+0x20>)
 80019e8:	f002 f9a8 	bl	8003d3c <HAL_IPCC_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019f2:	f000 f883 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000268 	.word	0x20000268
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_RNG_Init+0x24>)
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <MX_RNG_Init+0x28>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_RNG_Init+0x24>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_RNG_Init+0x24>)
 8001a26:	f003 ff97 	bl	8005958 <HAL_RNG_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001a30:	f000 f864 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000048c 	.word	0x2000048c
 8001a3c:	58001000 	.word	0x58001000

08001a40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MX_RTC_Init+0x64>)
 8001a48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a52:	220f      	movs	r2, #15
 8001a54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a76:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a78:	f003 ffa4 	bl	80059c4 <HAL_RTC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f83b 	bl	8001afc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_RTC_Init+0x60>)
 8001a8c:	f004 f89a 	bl	8005bc4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a96:	f000 f831 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200004a0 	.word	0x200004a0
 8001aa4:	40002800 	.word	0x40002800

08001aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aac:	2004      	movs	r0, #4
 8001aae:	f7ff fec9 	bl	8001844 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff fec6 	bl	8001844 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f7ff fec3 	bl	8001844 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	200e      	movs	r0, #14
 8001ac4:	f001 fd89 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ac8:	200e      	movs	r0, #14
 8001aca:	f001 fda0 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	203a      	movs	r0, #58	; 0x3a
 8001ad4:	f001 fd81 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001ad8:	203a      	movs	r0, #58	; 0x3a
 8001ada:	f001 fd98 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f7ff fec5 	bl	8001876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fec2 	bl	8001876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7ff febf 	bl	8001876 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <LL_PWR_SetPowerMode>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <LL_PWR_SetPowerMode+0x24>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	4904      	ldr	r1, [pc, #16]	; (8001b30 <LL_PWR_SetPowerMode+0x24>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	58000400 	.word	0x58000400

08001b34 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <LL_PWR_ClearFlag_WU+0x14>)
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	58000400 	.word	0x58000400

08001b4c <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5e:	d101      	bne.n	8001b64 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	58000400 	.word	0x58000400

08001b74 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b86:	d101      	bne.n	8001b8c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	58000400 	.word	0x58000400

08001b9c <LL_RCC_HSE_Enable>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_HSE_IsReady>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bcc:	d101      	bne.n	8001bd2 <LL_RCC_HSE_IsReady+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_RCC_HSE_IsReady+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_RCC_HSI_Enable>:
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_RCC_HSI_IsReady>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d101      	bne.n	8001c14 <LL_RCC_HSI_IsReady+0x18>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_RCC_HSI_IsReady+0x1a>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_SetSysClkSource>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_GetSysClkSource>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_LPM_EnableSleep>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <LL_LPM_EnableSleep+0x1c>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <LL_LPM_EnableSleep+0x1c>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6113      	str	r3, [r2, #16]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <LL_LPM_EnableDeepSleep+0x1c>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <LL_LPM_EnableDeepSleep+0x1c>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6113      	str	r3, [r2, #16]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	3220      	adds	r2, #32
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <LL_HSEM_1StepLock+0x2c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d001      	beq.n	8001ce6 <LL_HSEM_1StepLock+0x1e>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_HSEM_1StepLock+0x20>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	80000400 	.word	0x80000400

08001cf8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001d22:	f001 faed 	bl	8003300 <HAL_SuspendTick>

  EnterLowPower();
 8001d26:	f000 f835 	bl	8001d94 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001d2a:	f7ff ff03 	bl	8001b34 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f7ff feec 	bl	8001b0c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001d34:	f7ff ffb8 	bl	8001ca8 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001d38:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001d3a:	bf00      	nop
}
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8001d42:	f001 faed 	bl	8003320 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001d46:	bf00      	nop
}
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001d4e:	f001 fad7 	bl	8003300 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001d52:	f000 f81f 	bl	8001d94 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff fed8 	bl	8001b0c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001d5c:	f7ff ffa4 	bl	8001ca8 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001d60:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001d62:	bf00      	nop
}
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001d6a:	f000 f84f 	bl	8001e0c <ExitLowPower>

  HAL_ResumeTick();
 8001d6e:	f001 fad7 	bl	8003320 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001d72:	bf00      	nop
}
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001d7a:	f001 fac1 	bl	8003300 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001d7e:	f7ff ff83 	bl	8001c88 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001d82:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001d84:	bf00      	nop
}
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001d8c:	f001 fac8 	bl	8003320 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001d90:	bf00      	nop
}
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001d98:	bf00      	nop
 8001d9a:	2103      	movs	r1, #3
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <EnterLowPower+0x70>)
 8001d9e:	f7ff ff93 	bl	8001cc8 <LL_HSEM_1StepLock>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f8      	bne.n	8001d9a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001da8:	2104      	movs	r1, #4
 8001daa:	4816      	ldr	r0, [pc, #88]	; (8001e04 <EnterLowPower+0x70>)
 8001dac:	f7ff ff8c 	bl	8001cc8 <LL_HSEM_1StepLock>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d117      	bne.n	8001de6 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001db6:	f7ff fedd 	bl	8001b74 <LL_PWR_IsActiveFlag_C2DS>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <EnterLowPower+0x36>
 8001dc0:	f7ff fec4 	bl	8001b4c <LL_PWR_IsActiveFlag_C2SB>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2104      	movs	r1, #4
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <EnterLowPower+0x70>)
 8001dd0:	f7ff ff92 	bl	8001cf8 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001dd4:	f000 f852 	bl	8001e7c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <EnterLowPower+0x74>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <EnterLowPower+0x74>)
 8001dde:	f023 0307 	bic.w	r3, r3, #7
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e007      	b.n	8001df6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001de6:	f000 f849 	bl	8001e7c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <EnterLowPower+0x74>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <EnterLowPower+0x74>)
 8001df0:	f023 0307 	bic.w	r3, r3, #7
 8001df4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2103      	movs	r1, #3
 8001dfa:	4802      	ldr	r0, [pc, #8]	; (8001e04 <EnterLowPower+0x70>)
 8001dfc:	f7ff ff7c 	bl	8001cf8 <LL_HSEM_ReleaseLock>

  return;
 8001e00:	bf00      	nop
}
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58001400 	.word	0x58001400
 8001e08:	58004000 	.word	0x58004000

08001e0c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2104      	movs	r1, #4
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <ExitLowPower+0x68>)
 8001e16:	f7ff ff6f 	bl	8001cf8 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001e1a:	bf00      	nop
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <ExitLowPower+0x68>)
 8001e20:	f7ff ff52 	bl	8001cc8 <LL_HSEM_1StepLock>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f8      	bne.n	8001e1c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001e2a:	f7ff ff0d 	bl	8001c48 <LL_RCC_GetSysClkSource>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d118      	bne.n	8001e66 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8001e34:	f7ff feb2 	bl	8001b9c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <ExitLowPower+0x6c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 0307 	bic.w	r3, r3, #7
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <ExitLowPower+0x6c>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8001e48:	bf00      	nop
 8001e4a:	f7ff feb6 	bl	8001bba <LL_RCC_HSE_IsReady>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0fa      	beq.n	8001e4a <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7ff fee3 	bl	8001c20 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001e5a:	bf00      	nop
 8001e5c:	f7ff fef4 	bl	8001c48 <LL_RCC_GetSysClkSource>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d1fa      	bne.n	8001e5c <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4802      	ldr	r0, [pc, #8]	; (8001e74 <ExitLowPower+0x68>)
 8001e6c:	f7ff ff44 	bl	8001cf8 <LL_HSEM_ReleaseLock>

  return;
 8001e70:	bf00      	nop
}
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	58001400 	.word	0x58001400
 8001e78:	58004000 	.word	0x58004000

08001e7c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001e80:	f7ff fead 	bl	8001bde <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001e84:	bf00      	nop
 8001e86:	f7ff feb9 	bl	8001bfc <LL_RCC_HSI_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0fa      	beq.n	8001e86 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fec5 	bl	8001c20 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fee2 	bl	8001c60 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001e9c:	bf00      	nop
 8001e9e:	f7ff fed3 	bl	8001c48 <LL_RCC_GetSysClkSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d1fa      	bne.n	8001e9e <Switch_On_HSI+0x22>
  return;
 8001ea8:	bf00      	nop
}
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_AHB3_GRP1_EnableClock>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_APB1_GRP1_EnableClock>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f24:	68fb      	ldr	r3, [r7, #12]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001f36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f3a:	f7ff ffc8 	bl	8001ece <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	202e      	movs	r0, #46	; 0x2e
 8001f44:	f001 fb49 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f48:	202e      	movs	r0, #46	; 0x2e
 8001f4a:	f001 fb60 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <HAL_IPCC_MspInit+0x44>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d113      	bne.n	8001f8e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f6a:	f7ff ffb0 	bl	8001ece <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	202c      	movs	r0, #44	; 0x2c
 8001f74:	f001 fb31 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f78:	202c      	movs	r0, #44	; 0x2c
 8001f7a:	f001 fb48 	bl	800360e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	202d      	movs	r0, #45	; 0x2d
 8001f84:	f001 fb29 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f88:	202d      	movs	r0, #45	; 0x2d
 8001f8a:	f001 fb40 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	58000c00 	.word	0x58000c00

08001f9c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b096      	sub	sp, #88	; 0x58
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2250      	movs	r2, #80	; 0x50
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f008 f9bb 	bl	800a328 <memset>
  if(hrng->Instance==RNG)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_RNG_MspInit+0x50>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d113      	bne.n	8001fe4 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001fc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fa3c 	bl	800544a <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001fd8:	f7ff fd90 	bl	8001afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fdc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fe0:	f7ff ff75 	bl	8001ece <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3758      	adds	r7, #88	; 0x58
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	58001000 	.word	0x58001000

08001ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b096      	sub	sp, #88	; 0x58
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	2250      	movs	r2, #80	; 0x50
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f991 	bl	800a328 <memset>
  if(hrtc->Instance==RTC)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_RTC_MspInit+0x64>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d11d      	bne.n	800204c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002014:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fa12 	bl	800544a <HAL_RCCEx_PeriphCLKConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800202c:	f7ff fd66 	bl	8001afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002030:	f7ff ff3c 	bl	8001eac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002034:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002038:	f7ff ff62 	bl	8001f00 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2003      	movs	r0, #3
 8002042:	f001 faca 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002046:	2003      	movs	r0, #3
 8002048:	f001 fae1 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3758      	adds	r7, #88	; 0x58
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40002800 	.word	0x40002800

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f001 f8f0 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80020b8:	f7ff f81a 	bl	80010f0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA1_Channel4_IRQHandler+0x10>)
 80020c6:	f001 fba4 	bl	8003812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003cc 	.word	0x200003cc

080020d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <USART1_IRQHandler+0x10>)
 80020da:	f003 fe7b 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000338 	.word	0x20000338

080020e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <LPUART1_IRQHandler+0x10>)
 80020ee:	f003 fe71 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200002a4 	.word	0x200002a4

080020fc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002100:	f000 fde2 	bl	8002cc8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800210c:	f000 fe14 	bl	8002d38 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002118:	f001 fdec 	bl	8003cf4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA2_Channel4_IRQHandler+0x10>)
 8002126:	f001 fb74 	bl	8003812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000042c 	.word	0x2000042c

08002134 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002138:	2010      	movs	r0, #16
 800213a:	f001 fdc3 	bl	8003cc4 <HAL_GPIO_EXTI_IRQHandler>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}

08002142 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002146:	2001      	movs	r0, #1
 8002148:	f001 fdbc 	bl	8003cc4 <HAL_GPIO_EXTI_IRQHandler>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002154:	2002      	movs	r0, #2
 8002156:	f001 fdb5 	bl	8003cc4 <HAL_GPIO_EXTI_IRQHandler>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <LL_FLASH_GetUDN+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	1fff7580 	.word	0x1fff7580

08002178 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <LL_FLASH_GetDeviceID+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	1fff7584 	.word	0x1fff7584

08002190 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <LL_FLASH_GetSTCompanyID+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0a1b      	lsrs	r3, r3, #8
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	1fff7584 	.word	0x1fff7584

080021a8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b090      	sub	sp, #64	; 0x40
 80021ac:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <APP_BLE_Init+0xb4>)
 80021b0:	1d3c      	adds	r4, r7, #4
 80021b2:	461d      	mov	r5, r3
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c4:	c403      	stmia	r4!, {r0, r1}
 80021c6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80021c8:	f000 f972 	bl	80024b0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f007 fdd4 	bl	8009d7c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <APP_BLE_Init+0xb8>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	2004      	movs	r0, #4
 80021da:	f007 ff31 	bl	800a040 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4618      	mov	r0, r3
 80021e2:	f006 ff77 	bl	80090d4 <SHCI_C2_BLE_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 80021ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <APP_BLE_Init+0x50>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80021f4:	f7ff fc82 	bl	8001afc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80021f8:	f000 f970 	bl	80024dc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80021fc:	f007 fabe 	bl	800977c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <APP_BLE_Init+0xbc>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <APP_BLE_Init+0xbc>)
 800220a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220e:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <APP_BLE_Init+0xc0>)
 8002212:	2100      	movs	r1, #0
 8002214:	2001      	movs	r0, #1
 8002216:	f007 ff13 	bl	800a040 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800221a:	f000 fb75 	bl	8002908 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 800221e:	f000 fbb7 	bl	8002990 <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <APP_BLE_Init+0xc4>)
 8002224:	2200      	movs	r2, #0
 8002226:	4912      	ldr	r1, [pc, #72]	; (8002270 <APP_BLE_Init+0xc8>)
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff f903 	bl	8001434 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <APP_BLE_Init+0xbc>)
 8002230:	2202      	movs	r2, #2
 8002232:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <APP_BLE_Init+0xbc>)
 8002236:	2201      	movs	r2, #1
 8002238:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 800223a:	f641 000d 	movw	r0, #6157	; 0x180d
 800223e:	f000 facf 	bl	80027e0 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <APP_BLE_Init+0xcc>)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <APP_BLE_Init+0xd0>)
 800224a:	22a0      	movs	r2, #160	; 0xa0
 800224c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800224e:	2001      	movs	r0, #1
 8002250:	f000 fa12 	bl	8002678 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8002254:	bf00      	nop
}
 8002256:	3740      	adds	r7, #64	; 0x40
 8002258:	46bd      	mov	sp, r7
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	0800a378 	.word	0x0800a378
 8002260:	08008975 	.word	0x08008975
 8002264:	200004cc 	.word	0x200004cc
 8002268:	08002849 	.word	0x08002849
 800226c:	08002839 	.word	0x08002839
 8002270:	2000054d 	.word	0x2000054d
 8002274:	20000550 	.word	0x20000550
 8002278:	20000552 	.word	0x20000552

0800227c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8002284:	2392      	movs	r3, #146	; 0x92
 8002286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2bff      	cmp	r3, #255	; 0xff
 8002296:	d062      	beq.n	800235e <SVCCTL_App_Notification+0xe2>
 8002298:	2bff      	cmp	r3, #255	; 0xff
 800229a:	f300 80a6 	bgt.w	80023ea <SVCCTL_App_Notification+0x16e>
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d002      	beq.n	80022a8 <SVCCTL_App_Notification+0x2c>
 80022a2:	2b3e      	cmp	r3, #62	; 0x3e
 80022a4:	d016      	beq.n	80022d4 <SVCCTL_App_Notification+0x58>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80022a6:	e0a0      	b.n	80023ea <SVCCTL_App_Notification+0x16e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	3302      	adds	r3, #2
 80022ac:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80022b8:	8adb      	ldrh	r3, [r3, #22]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80022be:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f9d3 	bl	8002678 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80022d2:	e08d      	b.n	80023f0 <SVCCTL_App_Notification+0x174>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	3302      	adds	r3, #2
 80022d8:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d005      	beq.n	80022ee <SVCCTL_App_Notification+0x72>
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	dc37      	bgt.n	8002356 <SVCCTL_App_Notification+0xda>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d017      	beq.n	800231a <SVCCTL_App_Notification+0x9e>
 80022ea:	2b03      	cmp	r3, #3
          break;
 80022ec:	e033      	b.n	8002356 <SVCCTL_App_Notification+0xda>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80022f6:	8adb      	ldrh	r3, [r3, #22]
 80022f8:	f107 020e 	add.w	r2, r7, #14
 80022fc:	f107 010f 	add.w	r1, r7, #15
 8002300:	4618      	mov	r0, r3
 8002302:	f006 f924 	bl	800854e <hci_le_read_phy>
 8002306:	4603      	mov	r3, r0
 8002308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800230c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002310:	2b00      	cmp	r3, #0
 8002312:	d122      	bne.n	800235a <SVCCTL_App_Notification+0xde>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b02      	cmp	r3, #2
          break;
 8002318:	e01f      	b.n	800235a <SVCCTL_App_Notification+0xde>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <SVCCTL_App_Notification+0x180>)
 8002322:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f8fe 	bl	8001528 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <SVCCTL_App_Notification+0x180>)
 800232e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002332:	2b04      	cmp	r3, #4
 8002334:	d104      	bne.n	8002340 <SVCCTL_App_Notification+0xc4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <SVCCTL_App_Notification+0x180>)
 8002338:	2206      	movs	r2, #6
 800233a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800233e:	e003      	b.n	8002348 <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <SVCCTL_App_Notification+0x180>)
 8002342:	2205      	movs	r2, #5
 8002344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <SVCCTL_App_Notification+0x180>)
 8002352:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002354:	e002      	b.n	800235c <SVCCTL_App_Notification+0xe0>
          break;
 8002356:	bf00      	nop
 8002358:	e04a      	b.n	80023f0 <SVCCTL_App_Notification+0x174>
          break;
 800235a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800235c:	e048      	b.n	80023f0 <SVCCTL_App_Notification+0x174>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	3302      	adds	r3, #2
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d83d      	bhi.n	80023ee <SVCCTL_App_Notification+0x172>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <SVCCTL_App_Notification+0xfc>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023e7 	.word	0x080023e7
 800237c:	080023df 	.word	0x080023df
 8002380:	080023a5 	.word	0x080023a5
 8002384:	080023e7 	.word	0x080023e7
 8002388:	080023e7 	.word	0x080023e7
 800238c:	080023b9 	.word	0x080023b9
 8002390:	080023ef 	.word	0x080023ef
 8002394:	080023e7 	.word	0x080023e7
 8002398:	080023e7 	.word	0x080023e7
 800239c:	080023cb 	.word	0x080023cb
 80023a0:	080023e7 	.word	0x080023e7
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80023a6:	8adb      	ldrh	r3, [r3, #22]
 80023a8:	4915      	ldr	r1, [pc, #84]	; (8002400 <SVCCTL_App_Notification+0x184>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 f986 	bl	80076bc <aci_gap_pass_key_resp>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 80023b6:	e017      	b.n	80023e8 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80023ba:	8adb      	ldrh	r3, [r3, #22]
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 fba2 	bl	8007b06 <aci_gap_allow_rebond>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80023c8:	e00e      	b.n	80023e8 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <SVCCTL_App_Notification+0x180>)
 80023cc:	8adb      	ldrh	r3, [r3, #22]
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fbec 	bl	8007bae <aci_gap_numeric_comparison_value_confirm_yesno>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 80023dc:	e004      	b.n	80023e8 <SVCCTL_App_Notification+0x16c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	3302      	adds	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
          break;    
 80023e4:	e000      	b.n	80023e8 <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80023e6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80023e8:	e001      	b.n	80023ee <SVCCTL_App_Notification+0x172>
      break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <SVCCTL_App_Notification+0x174>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80023ee:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3730      	adds	r7, #48	; 0x30
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200004cc 	.word	0x200004cc
 8002400:	0001e240 	.word	0x0001e240

08002404 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800240a:	2392      	movs	r3, #146	; 0x92
 800240c:	71fb      	strb	r3, [r7, #7]

  ret = aci_gap_clear_security_db();
 800240e:	f005 fb56 	bl	8007abe <aci_gap_clear_security_db>
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
  }
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002426:	2392      	movs	r3, #146	; 0x92
 8002428:	71fb      	strb	r3, [r7, #7]
  
  ret = aci_gap_slave_security_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle); 
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <APP_BLE_Key_Button2_Action+0x20>)
 800242c:	8adb      	ldrh	r3, [r3, #22]
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fa58 	bl	80078e4 <aci_gap_slave_security_req>
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("===>> aci_gap_slave_security_req - Success\n");
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200004cc 	.word	0x200004cc

08002444 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800244a:	2392      	movs	r3, #146	; 0x92
 800244c:	71fb      	strb	r3, [r7, #7]

  ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <APP_BLE_Key_Button3_Action+0x68>)
 8002450:	8adb      	ldrh	r3, [r3, #22]
 8002452:	1d7a      	adds	r2, r7, #5
 8002454:	1db9      	adds	r1, r7, #6
 8002456:	4618      	mov	r0, r3
 8002458:	f006 f879 	bl	800854e <hci_le_read_phy>
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <APP_BLE_Key_Button3_Action+0x5e>
  }
  else
  {
    APP_DBG_MSG("==>> hci_le_read_phy - Success\n");
    APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
    if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d10f      	bne.n	800248c <APP_BLE_Key_Button3_Action+0x48>
 800246c:	797b      	ldrb	r3, [r7, #5]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d10c      	bne.n	800248c <APP_BLE_Key_Button3_Action+0x48>
    {
      APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", TX_1M, RX_1M);
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_1M,RX_1M,0);
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <APP_BLE_Key_Button3_Action+0x68>)
 8002474:	8ad8      	ldrh	r0, [r3, #22]
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2301      	movs	r3, #1
 800247c:	2201      	movs	r2, #1
 800247e:	2100      	movs	r1, #0
 8002480:	f006 f960 	bl	8008744 <hci_le_set_phy>
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
      if (ret != BLE_STATUS_SUCCESS)
 8002488:	bf00      	nop
      {
        APP_DBG_MSG("Success\n\r");
      }
    } 
  }
}
 800248a:	e00a      	b.n	80024a2 <APP_BLE_Key_Button3_Action+0x5e>
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED,0);
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <APP_BLE_Key_Button3_Action+0x68>)
 800248e:	8ad8      	ldrh	r0, [r3, #22]
 8002490:	2300      	movs	r3, #0
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2302      	movs	r3, #2
 8002496:	2202      	movs	r2, #2
 8002498:	2100      	movs	r1, #0
 800249a:	f006 f953 	bl	8008744 <hci_le_set_phy>
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200004cc 	.word	0x200004cc

080024b0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <Ble_Tl_Init+0x20>)
 80024b8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <Ble_Tl_Init+0x24>)
 80024bc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <Ble_Tl_Init+0x28>)
 80024c4:	f006 fa3a 	bl	800893c <hci_init>

  return;
 80024c8:	bf00      	nop
}
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20030028 	.word	0x20030028
 80024d4:	080028d3 	.word	0x080028d3
 80024d8:	0800289b 	.word	0x0800289b

080024dc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	b08d      	sub	sp, #52	; 0x34
 80024e0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80024e2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80024e6:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80024e8:	2392      	movs	r3, #146	; 0x92
 80024ea:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80024ec:	f006 f80b 	bl	8008506 <hci_reset>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80024f4:	f000 f930 	bl	8002758 <BleGetBdAddress>
 80024f8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	2106      	movs	r1, #6
 80024fe:	2000      	movs	r0, #0
 8002500:	f005 ff15 	bl	800832e <aci_hal_write_config_data>
 8002504:	4603      	mov	r3, r0
 8002506:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	795a      	ldrb	r2, [r3, #5]
 800250c:	4b54      	ldr	r3, [pc, #336]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800250e:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	791a      	ldrb	r2, [r3, #4]
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002516:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	78da      	ldrb	r2, [r3, #3]
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800251e:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	789a      	ldrb	r2, [r3, #2]
 8002524:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002526:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	785a      	ldrb	r2, [r3, #1]
 800252c:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800252e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002536:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <Ble_Hci_Gap_Gatt_Init+0x188>)
 800253a:	2110      	movs	r1, #16
 800253c:	2018      	movs	r0, #24
 800253e:	f005 fef6 	bl	800832e <aci_hal_write_config_data>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8002546:	4a48      	ldr	r2, [pc, #288]	; (8002668 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8002548:	2110      	movs	r1, #16
 800254a:	2008      	movs	r0, #8
 800254c:	f005 feef 	bl	800832e <aci_hal_write_config_data>
 8002550:	4603      	mov	r3, r0
 8002552:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002554:	2118      	movs	r1, #24
 8002556:	2001      	movs	r0, #1
 8002558:	f005 ff6e 	bl	8008438 <aci_hal_set_tx_power_level>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002560:	f005 fb8c 	bl	8007c7c <aci_gatt_init>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01f      	beq.n	80025ba <Ble_Hci_Gap_Gatt_Init+0xde>
  {
    const char *name = "HRSTM";
 800257a:	4b3c      	ldr	r3, [pc, #240]	; (800266c <Ble_Hci_Gap_Gatt_Init+0x190>)
 800257c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800257e:	1dba      	adds	r2, r7, #6
 8002580:	7bf8      	ldrb	r0, [r7, #15]
 8002582:	1cbb      	adds	r3, r7, #2
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	2207      	movs	r2, #7
 800258e:	2100      	movs	r1, #0
 8002590:	f005 f8fb 	bl	800778a <aci_gap_init>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002598:	88fc      	ldrh	r4, [r7, #6]
 800259a:	88bd      	ldrh	r5, [r7, #4]
 800259c:	68b8      	ldr	r0, [r7, #8]
 800259e:	f7fd fdf7 	bl	8000190 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	4629      	mov	r1, r5
 80025b0:	4620      	mov	r0, r4
 80025b2:	f005 fd66 	bl	8008082 <aci_gatt_update_char_value>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80025ba:	88f8      	ldrh	r0, [r7, #6]
 80025bc:	8879      	ldrh	r1, [r7, #2]
 80025be:	463b      	mov	r3, r7
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2302      	movs	r3, #2
 80025c4:	2200      	movs	r2, #0
 80025c6:	f005 fd5c 	bl	8008082 <aci_gatt_update_char_value>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80025ce:	2202      	movs	r2, #2
 80025d0:	2102      	movs	r1, #2
 80025d2:	2000      	movs	r0, #0
 80025d4:	f006 f839 	bl	800864a <hci_le_set_default_phy>
 80025d8:	4603      	mov	r3, r0
 80025da:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 ff50 	bl	800748c <aci_gap_set_io_capability>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025f8:	2208      	movs	r2, #8
 80025fa:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025fe:	2210      	movs	r2, #16
 8002600:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002604:	2200      	movs	r2, #0
 8002606:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800260c:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002610:	2201      	movs	r2, #1
 8002612:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002616:	789c      	ldrb	r4, [r3, #2]
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800261a:	785d      	ldrb	r5, [r3, #1]
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	4a13      	ldr	r2, [pc, #76]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002622:	7952      	ldrb	r2, [r2, #5]
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002626:	78c9      	ldrb	r1, [r1, #3]
 8002628:	4811      	ldr	r0, [pc, #68]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800262a:	6880      	ldr	r0, [r0, #8]
 800262c:	2600      	movs	r6, #0
 800262e:	9604      	str	r6, [sp, #16]
 8002630:	9003      	str	r0, [sp, #12]
 8002632:	9102      	str	r1, [sp, #8]
 8002634:	9201      	str	r2, [sp, #4]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2300      	movs	r3, #0
 800263a:	2201      	movs	r2, #1
 800263c:	4629      	mov	r1, r5
 800263e:	4620      	mov	r0, r4
 8002640:	f004 ff78 	bl	8007534 <aci_gap_set_authentication_requirement>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800264a:	789b      	ldrb	r3, [r3, #2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <Ble_Hci_Gap_Gatt_Init+0x17c>
  {
    ret = aci_gap_configure_whitelist();
 8002650:	f005 fa11 	bl	8007a76 <aci_gap_configure_whitelist>
 8002654:	4603      	mov	r3, r0
 8002656:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002660:	20000008 	.word	0x20000008
 8002664:	0800a53c 	.word	0x0800a53c
 8002668:	0800a54c 	.word	0x0800a54c
 800266c:	0800a3b4 	.word	0x0800a3b4
 8002670:	200004cc 	.word	0x200004cc
 8002674:	0001b207 	.word	0x0001b207

08002678 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af08      	add	r7, sp, #32
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002682:	2392      	movs	r3, #146	; 0x92
 8002684:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <Adv_Request+0xc4>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <Adv_Request+0xc8>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	81bb      	strh	r3, [r7, #12]
 8002698:	e005      	b.n	80026a6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800269a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800269e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80026a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026a4:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <Adv_Request+0xcc>)
 80026a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe ff3b 	bl	8001528 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d10d      	bne.n	80026d4 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <Adv_Request+0xcc>)
 80026ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d004      	beq.n	80026cc <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <Adv_Request+0xcc>)
 80026c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d103      	bne.n	80026d4 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80026cc:	f004 fdc0 	bl	8007250 <aci_gap_set_non_discoverable>
 80026d0:	4603      	mov	r3, r0
 80026d2:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <Adv_Request+0xcc>)
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <Adv_Request+0xcc>)
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	89ba      	ldrh	r2, [r7, #12]
 80026e2:	89f9      	ldrh	r1, [r7, #14]
 80026e4:	2000      	movs	r0, #0
 80026e6:	9006      	str	r0, [sp, #24]
 80026e8:	2000      	movs	r0, #0
 80026ea:	9005      	str	r0, [sp, #20]
 80026ec:	4816      	ldr	r0, [pc, #88]	; (8002748 <Adv_Request+0xd0>)
 80026ee:	9004      	str	r0, [sp, #16]
 80026f0:	9303      	str	r3, [sp, #12]
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <Adv_Request+0xd4>)
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	2306      	movs	r3, #6
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	2000      	movs	r0, #0
 8002702:	f004 fdc9 	bl	8007298 <aci_gap_set_discoverable>
 8002706:	4603      	mov	r3, r0
 8002708:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800270a:	4911      	ldr	r1, [pc, #68]	; (8002750 <Adv_Request+0xd8>)
 800270c:	200e      	movs	r0, #14
 800270e:	f005 f940 	bl	8007992 <aci_gap_update_adv_data>
 8002712:	4603      	mov	r3, r0
 8002714:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <Adv_Request+0xcc>)
 8002724:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002728:	490a      	ldr	r1, [pc, #40]	; (8002754 <Adv_Request+0xdc>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff80 	bl	8001630 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8002730:	bf00      	nop
 8002732:	bf00      	nop
}
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000550 	.word	0x20000550
 8002740:	20000552 	.word	0x20000552
 8002744:	200004cc 	.word	0x200004cc
 8002748:	200004e5 	.word	0x200004e5
 800274c:	0800a55c 	.word	0x0800a55c
 8002750:	20000008 	.word	0x20000008
 8002754:	0001e046 	.word	0x0001e046

08002758 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800275e:	f7ff fcff 	bl	8002160 <LL_FLASH_GetUDN>
 8002762:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d023      	beq.n	80027b4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800276c:	f7ff fd10 	bl	8002190 <LL_FLASH_GetSTCompanyID>
 8002770:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002772:	f7ff fd01 	bl	8002178 <LL_FLASH_GetDeviceID>
 8002776:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <BleGetBdAddress+0x80>)
 800277e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <BleGetBdAddress+0x80>)
 8002788:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <BleGetBdAddress+0x80>)
 8002790:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <BleGetBdAddress+0x80>)
 8002798:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <BleGetBdAddress+0x80>)
 80027a2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <BleGetBdAddress+0x80>)
 80027ac:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <BleGetBdAddress+0x80>)
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e00b      	b.n	80027cc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f006 fc65 	bl	8009084 <OTP_Read>
 80027ba:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e001      	b.n	80027cc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <BleGetBdAddress+0x84>)
 80027ca:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80027cc:	697b      	ldr	r3, [r7, #20]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200004c4 	.word	0x200004c4
 80027dc:	0800a534 	.word	0x0800a534

080027e0 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 80027ec:	7e1b      	ldrb	r3, [r3, #24]
 80027ee:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 80027f6:	440b      	add	r3, r1
 80027f8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 80027fc:	7e1b      	ldrb	r3, [r3, #24]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 8002804:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 800280e:	7e1b      	ldrb	r3, [r3, #24]
 8002810:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 8002812:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 8002816:	440b      	add	r3, r1
 8002818:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 800281c:	7e1b      	ldrb	r3, [r3, #24]
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <Add_Advertisment_Service_UUID+0x54>)
 8002824:	761a      	strb	r2, [r3, #24]

  return;
 8002826:	bf00      	nop
}
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200004cc 	.word	0x200004cc

08002838 <Adv_Mgr>:

static void Adv_Mgr(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 800283c:	2100      	movs	r1, #0
 800283e:	2001      	movs	r0, #1
 8002840:	f007 fc20 	bl	800a084 <UTIL_SEQ_SetTask>

  return;
 8002844:	bf00      	nop
}
 8002846:	bd80      	pop	{r7, pc}

08002848 <Adv_Update>:

static void Adv_Update(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800284c:	2002      	movs	r0, #2
 800284e:	f7ff ff13 	bl	8002678 <Adv_Request>

  return;
 8002852:	bf00      	nop
}
 8002854:	bd80      	pop	{r7, pc}

08002856 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800285e:	2100      	movs	r1, #0
 8002860:	2004      	movs	r0, #4
 8002862:	f007 fc0f 	bl	800a084 <UTIL_SEQ_SetTask>

  return;
 8002866:	bf00      	nop
}
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002876:	2001      	movs	r0, #1
 8002878:	f007 fc70 	bl	800a15c <UTIL_SEQ_SetEvt>

  return;
 800287c:	bf00      	nop
}
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800288c:	2001      	movs	r0, #1
 800288e:	f007 fc85 	bl	800a19c <UTIL_SEQ_WaitEvt>

  return;
 8002892:	bf00      	nop
}
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	3308      	adds	r3, #8
 80028ac:	4618      	mov	r0, r3
 80028ae:	f006 ffb7 	bl	8009820 <SVCCTL_UserEvtRx>
 80028b2:	4603      	mov	r3, r0
 80028b4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80028c2:	e003      	b.n	80028cc <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  return;
 80028ca:	bf00      	nop
}
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <BLE_StatusNot+0x16>
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d006      	beq.n	80028f4 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80028e6:	e00b      	b.n	8002900 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80028e8:	233f      	movs	r3, #63	; 0x3f
 80028ea:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f007 fbf5 	bl	800a0dc <UTIL_SEQ_PauseTask>
      break;
 80028f2:	e005      	b.n	8002900 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80028f4:	233f      	movs	r3, #63	; 0x3f
 80028f6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f007 fc0f 	bl	800a11c <UTIL_SEQ_ResumeTask>
      break;
 80028fe:	bf00      	nop
  }

  return;
 8002900:	bf00      	nop
}
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <DISAPP_Init+0x24>)
 8002910:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 8002912:	2304      	movs	r3, #4
 8002914:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 8002916:	463b      	mov	r3, r7
 8002918:	4619      	mov	r1, r3
 800291a:	f642 2029 	movw	r0, #10793	; 0x2a29
 800291e:	f005 ffe7 	bl	80088f0 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	0800a3bc 	.word	0x0800a3bc

08002930 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d01a      	beq.n	8002976 <HRS_Notification+0x46>
 8002940:	2b02      	cmp	r3, #2
 8002942:	dc1e      	bgt.n	8002982 <HRS_Notification+0x52>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HRS_Notification+0x1e>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d007      	beq.n	800295c <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 800294c:	e019      	b.n	8002982 <HRS_Notification+0x52>
      HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HRS_Notification+0x5c>)
 8002950:	2200      	movs	r2, #0
 8002952:	809a      	strh	r2, [r3, #4]
      HRSAPP_Context.ResetEnergyExpended = 1;
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HRS_Notification+0x5c>)
 8002956:	2201      	movs	r2, #1
 8002958:	731a      	strb	r2, [r3, #12]
      break;
 800295a:	e013      	b.n	8002984 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HRS_Notification+0x5c>)
 800295e:	7b5b      	ldrb	r3, [r3, #13]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fde1 	bl	8001528 <HW_TS_Stop>
      HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HRS_Notification+0x5c>)
 8002968:	7b5b      	ldrb	r3, [r3, #13]
 800296a:	f640 0101 	movw	r1, #2049	; 0x801
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fe5e 	bl	8001630 <HW_TS_Start>
      break;
 8002974:	e006      	b.n	8002984 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HRS_Notification+0x5c>)
 8002978:	7b5b      	ldrb	r3, [r3, #13]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fdd4 	bl	8001528 <HW_TS_Stop>
      break;
 8002980:	e000      	b.n	8002984 <HRS_Notification+0x54>
      break;
 8002982:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 8002984:	bf00      	nop
}
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000554 	.word	0x20000554

08002990 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 8002996:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HRSAPP_Init+0x84>)
 8002998:	2100      	movs	r1, #0
 800299a:	2002      	movs	r0, #2
 800299c:	f007 fb50 	bl	800a040 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
  /**
   * Set Body Sensor Location
   */
  HRSAPP_Context.ResetEnergyExpended = 0;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HRSAPP_Init+0x88>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	731a      	strb	r2, [r3, #12]
  HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_HAND;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HRSAPP_Init+0x88>)
 80029a8:	2204      	movs	r2, #4
 80029aa:	701a      	strb	r2, [r3, #0]
  HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 80029ac:	491a      	ldr	r1, [pc, #104]	; (8002a18 <HRSAPP_Init+0x88>)
 80029ae:	f642 2038 	movw	r0, #10808	; 0x2a38
 80029b2:	f006 fb23 	bl	8008ffc <HRS_UpdateChar>

  /**
   * Set Flags for measurement value
   */

  HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HRSAPP_Init+0x88>)
 80029b8:	221f      	movs	r2, #31
 80029ba:	72da      	strb	r2, [r3, #11]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HRSAPP_Init+0x88>)
 80029be:	7adb      	ldrb	r3, [r3, #11]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HRSAPP_Init+0x88>)
 80029ca:	220a      	movs	r2, #10
 80029cc:	809a      	strh	r2, [r3, #4]
#endif
  
#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HRSAPP_Init+0x88>)
 80029d0:	7adb      	ldrb	r3, [r3, #11]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HRSAPP_Init+0x70>
  {
    uint8_t i;
    
    HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HRSAPP_Init+0x88>)
 80029dc:	2201      	movs	r2, #1
 80029de:	729a      	strb	r2, [r3, #10]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	e009      	b.n	80029fa <HRSAPP_Init+0x6a>
      HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HRSAPP_Init+0x88>)
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f2:	80da      	strh	r2, [r3, #6]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	3301      	adds	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f2      	beq.n	80029e6 <HRSAPP_Init+0x56>
#endif
  
  /**
   * Create timer for Heart Rate Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HRSAPP_Init+0x8c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	4906      	ldr	r1, [pc, #24]	; (8002a20 <HRSAPP_Init+0x90>)
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fe fd14 	bl	8001434 <HW_TS_Create>

/* USER CODE END HRSAPP_Init */
  return;
 8002a0c:	bf00      	nop
}
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	20000554 	.word	0x20000554
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	20000561 	.word	0x20000561

08002a24 <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */
  uint32_t measurement;

  measurement = ((HRSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
 8002a2a:	f000 f837 	bl	8002a9c <HRSAPP_Read_RTC_SSR_SS>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	3341      	adds	r3, #65	; 0x41
 8002a36:	607b      	str	r3, [r7, #4]

  HRSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a3e:	805a      	strh	r2, [r3, #2]
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a42:	7adb      	ldrb	r3, [r3, #11]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HRSAPP_Measurement+0x3e>
     (HRSAPP_Context.ResetEnergyExpended == 0))
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HRSAPP_Measurement+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended += 5;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a56:	889b      	ldrh	r3, [r3, #4]
 8002a58:	3305      	adds	r3, #5
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a5e:	809a      	strh	r2, [r3, #4]
 8002a60:	e006      	b.n	8002a70 <HRSAPP_Measurement+0x4c>
  else if(HRSAPP_Context.ResetEnergyExpended == 1)
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a64:	7b1b      	ldrb	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d102      	bne.n	8002a70 <HRSAPP_Measurement+0x4c>
    HRSAPP_Context.ResetEnergyExpended = 0;
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HRSAPP_Measurement+0x60>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	731a      	strb	r2, [r3, #12]
#endif

  HRS_UpdateChar(HEART_RATE_MEASURMENT_UUID, (uint8_t *)&HRSAPP_Context.MeasurementvalueChar);
 8002a70:	4905      	ldr	r1, [pc, #20]	; (8002a88 <HRSAPP_Measurement+0x64>)
 8002a72:	f642 2037 	movw	r0, #10807	; 0x2a37
 8002a76:	f006 fac1 	bl	8008ffc <HRS_UpdateChar>

/* USER CODE END HRSAPP_Measurement */
  return;
 8002a7a:	bf00      	nop
}
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000554 	.word	0x20000554
 8002a88:	20000556 	.word	0x20000556

08002a8c <HrMeas>:

static void HrMeas( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8002a90:	2100      	movs	r1, #0
 8002a92:	2002      	movs	r0, #2
 8002a94:	f007 faf6 	bl	800a084 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 8002a98:	bf00      	nop
}
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HRSAPP_Read_RTC_SSR_SS>:

static uint32_t HRSAPP_Read_RTC_SSR_SS ( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HRSAPP_Read_RTC_SSR_SS+0x14>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	b29b      	uxth	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40002800 	.word	0x40002800

08002ab4 <LL_PWR_EnableBootC2>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LL_PWR_EnableBootC2+0x1c>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <LL_PWR_EnableBootC2+0x1c>)
 8002abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	58000400 	.word	0x58000400

08002ad4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002ade:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002ae2:	4905      	ldr	r1, [pc, #20]	; (8002af8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	58000800 	.word	0x58000800

08002afc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	620b      	str	r3, [r1, #32]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58000800 	.word	0x58000800

08002b20 <LL_AHB3_GRP1_EnableClock>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b44:	68fb      	ldr	r3, [r7, #12]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	609a      	str	r2, [r3, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4013      	ands	r3, r2
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d101      	bne.n	8002c8e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4013      	ands	r3, r2
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d101      	bne.n	8002cb8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002ccc:	2102      	movs	r1, #2
 8002cce:	4819      	ldr	r0, [pc, #100]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002cd0:	f7ff ffe4 	bl	8002c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HW_IPCC_Rx_Handler+0x26>
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002ce8:	f000 f8da 	bl	8002ea0 <HW_IPCC_SYS_EvtHandler>
 8002cec:	e01f      	b.n	8002d2e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4810      	ldr	r0, [pc, #64]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002cf2:	f7ff ffd3 	bl	8002c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HW_IPCC_Rx_Handler+0x46>
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002d08:	f000 f88e 	bl	8002e28 <HW_IPCC_BLE_EvtHandler>
 8002d0c:	e00f      	b.n	8002d2e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002d0e:	2108      	movs	r1, #8
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002d12:	f7ff ffc3 	bl	8002c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HW_IPCC_Rx_Handler+0x68>
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HW_IPCC_Rx_Handler+0x6c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002d2a:	f000 f905 	bl	8002f38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
}
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58000c00 	.word	0x58000c00

08002d38 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	481a      	ldr	r0, [pc, #104]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d40:	f7ff ff97 	bl	8002c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HW_IPCC_Tx_Handler+0x26>
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002d58:	f000 f896 	bl	8002e88 <HW_IPCC_SYS_CmdEvtHandler>
 8002d5c:	e020      	b.n	8002da0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4811      	ldr	r0, [pc, #68]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d62:	f7ff ff86 	bl	8002c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HW_IPCC_Tx_Handler+0x48>
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002d7a:	f000 f8bf 	bl	8002efc <HW_IPCC_MM_FreeBufHandler>
 8002d7e:	e00f      	b.n	8002da0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002d80:	2120      	movs	r1, #32
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d84:	f7ff ff75 	bl	8002c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HW_IPCC_Tx_Handler+0x6a>
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HW_IPCC_Tx_Handler+0x70>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002d9c:	f000 f850 	bl	8002e40 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
}
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	58000c00 	.word	0x58000c00

08002dac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002db0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002db4:	f7ff fecd 	bl	8002b52 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002db8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dbc:	f7ff fe9e 	bl	8002afc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002dc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dc4:	f7ff fe86 	bl	8002ad4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002dc8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002dca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002dcc:	f7ff fe72 	bl	8002ab4 <LL_PWR_EnableBootC2>

  return;
 8002dd0:	bf00      	nop
}
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8002dd8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ddc:	f7ff fea0 	bl	8002b20 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8002de0:	4806      	ldr	r0, [pc, #24]	; (8002dfc <HW_IPCC_Init+0x28>)
 8002de2:	f7ff fee2 	bl	8002baa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HW_IPCC_Init+0x28>)
 8002de8:	f7ff fecf 	bl	8002b8a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002dec:	202c      	movs	r0, #44	; 0x2c
 8002dee:	f000 fc0e 	bl	800360e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002df2:	202d      	movs	r0, #45	; 0x2d
 8002df4:	f000 fc0b 	bl	800360e <HAL_NVIC_EnableIRQ>

  return;
 8002df8:	bf00      	nop
}
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	58000c00 	.word	0x58000c00

08002e00 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002e04:	2101      	movs	r1, #1
 8002e06:	4802      	ldr	r0, [pc, #8]	; (8002e10 <HW_IPCC_BLE_Init+0x10>)
 8002e08:	f7ff ff04 	bl	8002c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002e0c:	bf00      	nop
}
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58000c00 	.word	0x58000c00

08002e14 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4802      	ldr	r0, [pc, #8]	; (8002e24 <HW_IPCC_BLE_SendCmd+0x10>)
 8002e1c:	f7ff ff1a 	bl	8002c54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002e20:	bf00      	nop
}
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	58000c00 	.word	0x58000c00

08002e28 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002e2c:	f006 fddc 	bl	80099e8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002e30:	2101      	movs	r1, #1
 8002e32:	4802      	ldr	r0, [pc, #8]	; (8002e3c <HW_IPCC_BLE_EvtHandler+0x14>)
 8002e34:	f7ff ff00 	bl	8002c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002e38:	bf00      	nop
}
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	58000c00 	.word	0x58000c00

08002e40 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002e44:	2120      	movs	r1, #32
 8002e46:	4803      	ldr	r0, [pc, #12]	; (8002e54 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002e48:	f7ff fed2 	bl	8002bf0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002e4c:	f006 fdfc 	bl	8009a48 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8002e50:	bf00      	nop
}
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	58000c00 	.word	0x58000c00

08002e58 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4802      	ldr	r0, [pc, #8]	; (8002e68 <HW_IPCC_SYS_Init+0x10>)
 8002e60:	f7ff fed8 	bl	8002c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002e64:	bf00      	nop
}
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	58000c00 	.word	0x58000c00

08002e6c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e70:	2102      	movs	r1, #2
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <HW_IPCC_SYS_SendCmd+0x18>)
 8002e74:	f7ff feee 	bl	8002c54 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4802      	ldr	r0, [pc, #8]	; (8002e84 <HW_IPCC_SYS_SendCmd+0x18>)
 8002e7c:	f7ff fea5 	bl	8002bca <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002e80:	bf00      	nop
}
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	58000c00 	.word	0x58000c00

08002e88 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8002e90:	f7ff feae 	bl	8002bf0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002e94:	f006 fe28 	bl	8009ae8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002e98:	bf00      	nop
}
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58000c00 	.word	0x58000c00

08002ea0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002ea4:	f006 fe36 	bl	8009b14 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8002eac:	f7ff fec4 	bl	8002c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002eb0:	bf00      	nop
}
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	58000c00 	.word	0x58000c00

08002eb8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002ec4:	f7ff fed5 	bl	8002c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002ed4:	2108      	movs	r1, #8
 8002ed6:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002ed8:	f7ff fe77 	bl	8002bca <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002edc:	e006      	b.n	8002eec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002ee2:	2108      	movs	r1, #8
 8002ee4:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002ee6:	f7ff feb5 	bl	8002c54 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002eea:	bf00      	nop
}
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	58000c00 	.word	0x58000c00
 8002ef8:	20000564 	.word	0x20000564

08002efc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002f00:	2108      	movs	r1, #8
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002f04:	f7ff fe74 	bl	8002bf0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002f0e:	2108      	movs	r1, #8
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002f12:	f7ff fe9f 	bl	8002c54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002f16:	bf00      	nop
}
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	58000c00 	.word	0x58000c00
 8002f20:	20000564 	.word	0x20000564

08002f24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002f28:	2108      	movs	r1, #8
 8002f2a:	4802      	ldr	r0, [pc, #8]	; (8002f34 <HW_IPCC_TRACES_Init+0x10>)
 8002f2c:	f7ff fe72 	bl	8002c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002f30:	bf00      	nop
}
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	58000c00 	.word	0x58000c00

08002f38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002f3c:	f006 fe92 	bl	8009c64 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002f40:	2108      	movs	r1, #8
 8002f42:	4802      	ldr	r0, [pc, #8]	; (8002f4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002f44:	f7ff fe78 	bl	8002c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002f48:	bf00      	nop
}
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58000c00 	.word	0x58000c00

08002f50 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f54:	3304      	adds	r3, #4

08002f56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f5a:	d3f9      	bcc.n	8002f50 <CopyDataInit>
  bx lr
 8002f5c:	4770      	bx	lr

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002f60:	3004      	adds	r0, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002f62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>
  bx lr
 8002f66:	4770      	bx	lr

08002f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002f6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f6c:	f000 f8b0 	bl	80030d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002f70:	480b      	ldr	r0, [pc, #44]	; (8002fa0 <LoopForever+0x8>)
 8002f72:	490c      	ldr	r1, [pc, #48]	; (8002fa4 <LoopForever+0xc>)
 8002f74:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <LoopForever+0x10>)
 8002f76:	2300      	movs	r3, #0
 8002f78:	f7ff ffed 	bl	8002f56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002f7c:	480b      	ldr	r0, [pc, #44]	; (8002fac <LoopForever+0x14>)
 8002f7e:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <LoopForever+0x18>)
 8002f80:	2300      	movs	r3, #0
 8002f82:	f7ff ffee 	bl	8002f62 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f86:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <LoopForever+0x1c>)
 8002f88:	490b      	ldr	r1, [pc, #44]	; (8002fb8 <LoopForever+0x20>)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f7ff ffe9 	bl	8002f62 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f90:	f007 f998 	bl	800a2c4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002f94:	f7fe fc88 	bl	80018a8 <main>

08002f98 <LoopForever>:

LoopForever:
  b LoopForever
 8002f98:	e7fe      	b.n	8002f98 <LoopForever>
 8002f9a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002f9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000038 	.word	0x20000038
 8002fa8:	0800a608 	.word	0x0800a608
  INIT_BSS _sbss, _ebss
 8002fac:	20000090 	.word	0x20000090
 8002fb0:	20000680 	.word	0x20000680
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002fb4:	200301e4 	.word	0x200301e4
 8002fb8:	20030a67 	.word	0x20030a67

08002fbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC1_IRQHandler>

08002fbe <LL_AHB2_GRP1_EnableClock>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	71fb      	strb	r3, [r7, #7]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <BSP_PB_Init+0x2e>
 8003016:	2004      	movs	r0, #4
 8003018:	f7ff ffd1 	bl	8002fbe <LL_AHB2_GRP1_EnableClock>
 800301c:	e00c      	b.n	8003038 <BSP_PB_Init+0x48>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d103      	bne.n	800302c <BSP_PB_Init+0x3c>
 8003024:	2008      	movs	r0, #8
 8003026:	f7ff ffca 	bl	8002fbe <LL_AHB2_GRP1_EnableClock>
 800302a:	e005      	b.n	8003038 <BSP_PB_Init+0x48>
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d102      	bne.n	8003038 <BSP_PB_Init+0x48>
 8003032:	2008      	movs	r0, #8
 8003034:	f7ff ffc3 	bl	8002fbe <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d117      	bne.n	800306e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <BSP_PB_Init+0xd4>)
 8003042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003046:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003050:	2302      	movs	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <BSP_PB_Init+0xd8>)
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	f107 020c 	add.w	r2, r7, #12
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fca6 	bl	80039b4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003068:	2001      	movs	r0, #1
 800306a:	f7fd fbf9 	bl	8000860 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d123      	bne.n	80030bc <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <BSP_PB_Init+0xd4>)
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800307e:	2301      	movs	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003082:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003086:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <BSP_PB_Init+0xd8>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	f107 020c 	add.w	r2, r7, #12
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fc8c 	bl	80039b4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <BSP_PB_Init+0xdc>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	210f      	movs	r1, #15
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa96 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	4a06      	ldr	r2, [pc, #24]	; (80030cc <BSP_PB_Init+0xdc>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 faa9 	bl	800360e <HAL_NVIC_EnableIRQ>
  }
}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	0800a564 	.word	0x0800a564
 80030c8:	20000018 	.word	0x20000018
 80030cc:	0800a56c 	.word	0x0800a56c

080030d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80030d4:	4b26      	ldr	r3, [pc, #152]	; (8003170 <SystemInit+0xa0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <SystemInit+0xa0>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <SystemInit+0xa0>)
 80030e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003102:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <SystemInit+0xa4>)
 8003110:	4013      	ands	r3, r2
 8003112:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003120:	f023 0305 	bic.w	r3, r3, #5
 8003124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <SystemInit+0xa8>)
 8003142:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <SystemInit+0xa8>)
 800314a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	faf6fefb 	.word	0xfaf6fefb
 8003178:	22041000 	.word	0x22041000

0800317c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6053      	str	r3, [r2, #4]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e0042000 	.word	0xe0042000

0800319c <LL_DBGMCU_DisableDBGStopMode>:
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 80031a6:	f023 0302 	bic.w	r3, r3, #2
 80031aa:	6053      	str	r3, [r2, #4]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e0042000 	.word	0xe0042000

080031bc <LL_DBGMCU_DisableDBGStandbyMode>:
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6053      	str	r3, [r2, #4]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e0042000 	.word	0xe0042000

080031dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_Init+0x3c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <HAL_Init+0x3c>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f2:	2003      	movs	r0, #3
 80031f4:	f000 f9e6 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f8:	2000      	movs	r0, #0
 80031fa:	f000 f80f 	bl	800321c <HAL_InitTick>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	e001      	b.n	800320e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800320a:	f7fe fe92 	bl	8001f32 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800320e:	79fb      	ldrb	r3, [r7, #7]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58004000 	.word	0x58004000

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_InitTick+0x6c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d024      	beq.n	800327a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003230:	f001 fea6 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_InitTick+0x6c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003240:	fbb3 f3f1 	udiv	r3, r3, r1
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f9fc 	bl	8003646 <HAL_SYSTICK_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d809      	bhi.n	800326e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325a:	2200      	movs	r2, #0
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	f000 f9ba 	bl	80035da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_InitTick+0x70>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e007      	b.n	800327e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e004      	b.n	800327e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e001      	b.n	800327e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	2000002c 	.word	0x2000002c
 800328c:	20000028 	.word	0x20000028

08003290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000002c 	.word	0x2000002c
 80032b4:	20000568 	.word	0x20000568

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000568 	.word	0x20000568

080032d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_GetTickPrio+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000028 	.word	0x20000028

080032e8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_GetTickFreq+0x14>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000002c 	.word	0x2000002c

08003300 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_SuspendTick+0x1c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_SuspendTick+0x1c>)
 800330a:	f023 0302 	bic.w	r3, r3, #2
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_ResumeTick+0x1c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_ResumeTick+0x1c>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003344:	f7ff ff1a 	bl	800317c <LL_DBGMCU_DisableDBGSleepMode>
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003350:	f7ff ff24 	bl	800319c <LL_DBGMCU_DisableDBGStopMode>
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 800335c:	f7ff ff2e 	bl	80031bc <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}

08003364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800338c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003396:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60d3      	str	r3, [r2, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <__NVIC_GetPriorityGrouping+0x18>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0307 	and.w	r3, r3, #7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db0b      	blt.n	80033f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4907      	ldr	r1, [pc, #28]	; (8003400 <__NVIC_EnableIRQ+0x38>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2001      	movs	r0, #1
 80033ea:	fa00 f202 	lsl.w	r2, r0, r2
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db12      	blt.n	800343c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	490a      	ldr	r1, [pc, #40]	; (8003448 <__NVIC_DisableIRQ+0x44>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	3320      	adds	r3, #32
 800342c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003430:	f3bf 8f4f 	dsb	sy
}
 8003434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003436:	f3bf 8f6f 	isb	sy
}
 800343a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0c      	blt.n	8003478 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <__NVIC_SetPendingIRQ+0x38>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	3340      	adds	r3, #64	; 0x40
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0c      	blt.n	80034b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <__NVIC_ClearPendingIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	; (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fec9 	bl	8003364 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff fee0 	bl	80033ac <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff90 	bl	8003518 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5f 	bl	80034c4 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fed3 	bl	80033c8 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fee3 	bl	8003404 <__NVIC_DisableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff96 	bl	8003580 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff feed 	bl	800344c <__NVIC_SetPendingIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fefd 	bl	8003488 <__NVIC_ClearPendingIRQ>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04f      	b.n	8003748 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2204      	movs	r2, #4
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e040      	b.n	8003748 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 020e 	bic.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 021c 	and.w	r2, r3, #28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00c      	beq.n	8003736 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003734:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d005      	beq.n	8003778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e047      	b.n	8003808 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020e 	bic.w	r2, r2, #14
 8003786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 021c 	and.w	r2, r3, #28
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
    }
  }
  return status;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f003 031c 	and.w	r3, r3, #28
 8003832:	2204      	movs	r2, #4
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d026      	beq.n	800388c <HAL_DMA_IRQHandler+0x7a>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d021      	beq.n	800388c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0204 	bic.w	r2, r2, #4
 8003864:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f003 021c 	and.w	r2, r3, #28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2104      	movs	r1, #4
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	2b00      	cmp	r3, #0
 8003880:	d071      	beq.n	8003966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800388a:	e06c      	b.n	8003966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f003 031c 	and.w	r3, r3, #28
 8003894:	2202      	movs	r2, #2
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02e      	beq.n	80038fe <HAL_DMA_IRQHandler+0xec>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d029      	beq.n	80038fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 020a 	bic.w	r2, r2, #10
 80038c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	f003 021c 	and.w	r2, r3, #28
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2102      	movs	r1, #2
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d038      	beq.n	8003966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038fc:	e033      	b.n	8003966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f003 031c 	and.w	r3, r3, #28
 8003906:	2208      	movs	r2, #8
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02a      	beq.n	8003968 <HAL_DMA_IRQHandler+0x156>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d025      	beq.n	8003968 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 021c 	and.w	r2, r3, #28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003966:	bf00      	nop
 8003968:	bf00      	nop
}
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2201      	movs	r2, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	015b      	lsls	r3, r3, #5
 8003998:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800399c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80039a0:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	601a      	str	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c2:	e14c      	b.n	8003c5e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 813e 	beq.w	8003c58 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8098 	beq.w	8003c58 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b52:	d019      	beq.n	8003b88 <HAL_GPIO_Init+0x1d4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_GPIO_Init+0x2cc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_GPIO_Init+0x1d0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a49      	ldr	r2, [pc, #292]	; (8003c84 <HAL_GPIO_Init+0x2d0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00d      	beq.n	8003b80 <HAL_GPIO_Init+0x1cc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a48      	ldr	r2, [pc, #288]	; (8003c88 <HAL_GPIO_Init+0x2d4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d007      	beq.n	8003b7c <HAL_GPIO_Init+0x1c8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a47      	ldr	r2, [pc, #284]	; (8003c8c <HAL_GPIO_Init+0x2d8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_GPIO_Init+0x1c4>
 8003b74:	2304      	movs	r3, #4
 8003b76:	e008      	b.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b78:	2307      	movs	r3, #7
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e004      	b.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b9a:	4938      	ldr	r1, [pc, #224]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f aeab 	bne.w	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	48000400 	.word	0x48000400
 8003c84:	48000800 	.word	0x48000800
 8003c88:	48000c00 	.word	0x48000c00
 8003c8c:	48001000 	.word	0x48001000
 8003c90:	58000800 	.word	0x58000800

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb0:	e002      	b.n	8003cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fe1e 	bl	8000924 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	58000800 	.word	0x58000800

08003cf4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_HSEM_IRQHandler+0x30>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_HSEM_IRQHandler+0x30>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	4906      	ldr	r1, [pc, #24]	; (8003d24 <HAL_HSEM_IRQHandler+0x30>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003d0e:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <HAL_HSEM_IRQHandler+0x30>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f807 	bl	8003d28 <HAL_HSEM_FreeCallback>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	58001500 	.word	0x58001500

08003d28 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01e      	beq.n	8003d8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_IPCC_Init+0x60>)
 8003d50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe f8f8 	bl	8001f54 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003d64:	68b8      	ldr	r0, [r7, #8]
 8003d66:	f000 f85b 	bl	8003e20 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f82c 	bl	8003dd4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003d8a:	e001      	b.n	8003d90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58000c00 	.word	0x58000c00

08003da0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e00f      	b.n	8003e02 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <IPCC_SetDefaultCallbacks+0x44>)
 8003dec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3306      	adds	r3, #6
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <IPCC_SetDefaultCallbacks+0x48>)
 8003dfa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d9ec      	bls.n	8003de2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	08003da1 	.word	0x08003da1
 8003e1c:	08003dbb 	.word	0x08003dbb

08003e20 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003e34:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	223f      	movs	r2, #63	; 0x3f
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	58000400 	.word	0x58000400

08003e68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58000400 	.word	0x58000400

08003e84 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e96:	d101      	bne.n	8003e9c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_RCC_HSE_Enable>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_HSE_Disable>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_HSE_IsReady>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef6:	d101      	bne.n	8003efc <LL_RCC_HSE_IsReady+0x18>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <LL_RCC_HSE_IsReady+0x1a>
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_HSI_Enable>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_HSI_Disable>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_HSI_IsReady>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d101      	bne.n	8003f5c <LL_RCC_HSI_IsReady+0x18>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_RCC_HSI_IsReady+0x1a>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_HSI48_Enable>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_HSI48_Disable>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_HSI48_IsReady>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d101      	bne.n	8003fee <LL_RCC_HSI48_IsReady+0x18>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_RCC_HSI48_IsReady+0x1a>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_LSE_Enable>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_RCC_LSE_Disable>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_RCC_LSE_EnableBypass>:
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_LSE_DisableBypass>:
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_LSE_IsReady>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d101      	bne.n	800409a <LL_RCC_LSE_IsReady+0x18>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <LL_RCC_LSE_IsReady+0x1a>
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_LSI1_Enable>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_LSI1_Disable>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_LSI1_IsReady>:
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d101      	bne.n	8004102 <LL_RCC_LSI1_IsReady+0x18>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_LSI1_IsReady+0x1a>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_LSI2_Enable>:
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411e:	f043 0304 	orr.w	r3, r3, #4
 8004122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_RCC_LSI2_Disable>:
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_LSI2_IsReady>:
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d101      	bne.n	800416a <LL_RCC_LSI2_IsReady+0x18>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_RCC_LSI2_IsReady+0x1a>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_LSI2_SetTrimming>:
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_MSI_Enable>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_MSI_Disable>:
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_MSI_IsReady>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d101      	bne.n	80041f6 <LL_RCC_MSI_IsReady+0x16>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_RCC_MSI_IsReady+0x18>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_MSI_SetRange>:
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_MSI_GetRange>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2bb0      	cmp	r3, #176	; 0xb0
 8004240:	d901      	bls.n	8004246 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004242:	23b0      	movs	r3, #176	; 0xb0
 8004244:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004246:	687b      	ldr	r3, [r7, #4]
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <LL_RCC_SetSysClkSource>:
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 0203 	bic.w	r2, r3, #3
 8004290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_GetSysClkSource>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_RCC_SetAHBPrescaler>:
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_RCC_SetAHB4Prescaler>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004322:	f023 020f 	bic.w	r2, r3, #15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_SetAPB1Prescaler>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_RCC_SetAPB2Prescaler>:
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800437a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_RCC_GetAHBPrescaler>:
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_GetAHB4Prescaler>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f4:	6013      	str	r3, [r2, #0]
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004412:	d101      	bne.n	8004418 <LL_RCC_PLL_IsReady+0x18>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <LL_RCC_PLL_IsReady+0x1a>
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800443e:	b480      	push	{r7}
 8004440:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0303 	and.w	r3, r3, #3
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d101      	bne.n	800449e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044be:	d101      	bne.n	80044c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d101      	bne.n	80044ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80044fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004508:	d101      	bne.n	800450e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800452c:	d101      	bne.n	8004532 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b08d      	sub	sp, #52	; 0x34
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e363      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 808d 	beq.w	800467a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004560:	f7ff fea1 	bl	80042a6 <LL_RCC_GetSysClkSource>
 8004564:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004566:	f7ff ff82 	bl	800446e <LL_RCC_PLL_GetMainSource>
 800456a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x3e>
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d147      	bne.n	8004608 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2b01      	cmp	r3, #1
 800457c:	d144      	bne.n	8004608 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e347      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800458e:	f7ff fe4c 	bl	800422a <LL_RCC_MSI_GetRange>
 8004592:	4603      	mov	r3, r0
 8004594:	429c      	cmp	r4, r3
 8004596:	d914      	bls.n	80045c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd03 	bl	8004fa8 <RCC_SetFlashLatencyFromMSIRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e336      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fe26 	bl	8004202 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fe4a 	bl	8004254 <LL_RCC_MSI_SetCalibTrimming>
 80045c0:	e013      	b.n	80045ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fe1b 	bl	8004202 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fe3f 	bl	8004254 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fce4 	bl	8004fa8 <RCC_SetFlashLatencyFromMSIRange>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e317      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045ea:	f000 fcc9 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4aa4      	ldr	r2, [pc, #656]	; (8004884 <HAL_RCC_OscConfig+0x344>)
 80045f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045f4:	4ba4      	ldr	r3, [pc, #656]	; (8004888 <HAL_RCC_OscConfig+0x348>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fe0f 	bl	800321c <HAL_InitTick>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d039      	beq.n	8004678 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e308      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004610:	f7ff fdc8 	bl	80041a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004614:	f7fe fe50 	bl	80032b8 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800461c:	f7fe fe4c 	bl	80032b8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e2f5      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800462e:	f7ff fdd7 	bl	80041e0 <LL_RCC_MSI_IsReady>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f1      	beq.n	800461c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fde0 	bl	8004202 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fe04 	bl	8004254 <LL_RCC_MSI_SetCalibTrimming>
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800464e:	f7ff fdb8 	bl	80041c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004652:	f7fe fe31 	bl	80032b8 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465a:	f7fe fe2d 	bl	80032b8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e2d6      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800466c:	f7ff fdb8 	bl	80041e0 <LL_RCC_MSI_IsReady>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f1      	bne.n	800465a <HAL_RCC_OscConfig+0x11a>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004678:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d047      	beq.n	8004716 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004686:	f7ff fe0e 	bl	80042a6 <LL_RCC_GetSysClkSource>
 800468a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800468c:	f7ff feef 	bl	800446e <LL_RCC_PLL_GetMainSource>
 8004690:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_OscConfig+0x164>
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d108      	bne.n	80046b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d134      	bne.n	8004716 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e2b4      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_OscConfig+0x180>
 80046ba:	f7ff fbf5 	bl	8003ea8 <LL_RCC_HSE_Enable>
 80046be:	e001      	b.n	80046c4 <HAL_RCC_OscConfig+0x184>
 80046c0:	f7ff fc01 	bl	8003ec6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fdf4 	bl	80032b8 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe fdf0 	bl	80032b8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e299      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046e6:	f7ff fbfd 	bl	8003ee4 <LL_RCC_HSE_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f1      	beq.n	80046d4 <HAL_RCC_OscConfig+0x194>
 80046f0:	e011      	b.n	8004716 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fe fde1 	bl	80032b8 <HAL_GetTick>
 80046f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fa:	f7fe fddd 	bl	80032b8 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b64      	cmp	r3, #100	; 0x64
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e286      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800470c:	f7ff fbea 	bl	8003ee4 <LL_RCC_HSE_IsReady>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f1      	bne.n	80046fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04c      	beq.n	80047bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	f7ff fdc0 	bl	80042a6 <LL_RCC_GetSysClkSource>
 8004726:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004728:	f7ff fea1 	bl	800446e <LL_RCC_PLL_GetMainSource>
 800472c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x200>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d10e      	bne.n	8004758 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d10b      	bne.n	8004758 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e266      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fc09 	bl	8003f68 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004756:	e031      	b.n	80047bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d019      	beq.n	8004794 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	f7ff fbd2 	bl	8003f08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe fda8 	bl	80032b8 <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476c:	f7fe fda4 	bl	80032b8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e24d      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800477e:	f7ff fbe1 	bl	8003f44 <LL_RCC_HSI_IsReady>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f1      	beq.n	800476c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fbeb 	bl	8003f68 <LL_RCC_HSI_SetCalibTrimming>
 8004792:	e013      	b.n	80047bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004794:	f7ff fbc7 	bl	8003f26 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fe fd8e 	bl	80032b8 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a0:	f7fe fd8a 	bl	80032b8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e233      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80047b2:	f7ff fbc7 	bl	8003f44 <LL_RCC_HSI_IsReady>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f1      	bne.n	80047a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a3 	beq.w	800491c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d076      	beq.n	80048cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d046      	beq.n	8004878 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80047ea:	f7ff fc7e 	bl	80040ea <LL_RCC_LSI1_IsReady>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d113      	bne.n	800481c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80047f4:	f7ff fc57 	bl	80040a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047f8:	f7fe fd5e 	bl	80032b8 <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004800:	f7fe fd5a 	bl	80032b8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e203      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004812:	f7ff fc6a 	bl	80040ea <LL_RCC_LSI1_IsReady>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f1      	beq.n	8004800 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800481c:	f7ff fc77 	bl	800410e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fe fd4a 	bl	80032b8 <HAL_GetTick>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004828:	f7fe fd46 	bl	80032b8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b03      	cmp	r3, #3
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1ef      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800483a:	f7ff fc8a 	bl	8004152 <LL_RCC_LSI2_IsReady>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f1      	beq.n	8004828 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc94 	bl	8004176 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800484e:	f7ff fc3b 	bl	80040c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fd31 	bl	80032b8 <HAL_GetTick>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800485a:	f7fe fd2d 	bl	80032b8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1d6      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800486c:	f7ff fc3d 	bl	80040ea <LL_RCC_LSI1_IsReady>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f1      	bne.n	800485a <HAL_RCC_OscConfig+0x31a>
 8004876:	e051      	b.n	800491c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004878:	f7ff fc15 	bl	80040a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe fd1c 	bl	80032b8 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004882:	e00c      	b.n	800489e <HAL_RCC_OscConfig+0x35e>
 8004884:	20000024 	.word	0x20000024
 8004888:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800488c:	f7fe fd14 	bl	80032b8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1bd      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800489e:	f7ff fc24 	bl	80040ea <LL_RCC_LSI1_IsReady>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f1      	beq.n	800488c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80048a8:	f7ff fc42 	bl	8004130 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048ae:	f7fe fd03 	bl	80032b8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1ac      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048c0:	f7ff fc47 	bl	8004152 <LL_RCC_LSI2_IsReady>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <HAL_RCC_OscConfig+0x36e>
 80048ca:	e027      	b.n	800491c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80048cc:	f7ff fc30 	bl	8004130 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fe fcf2 	bl	80032b8 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048d8:	f7fe fcee 	bl	80032b8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e197      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048ea:	f7ff fc32 	bl	8004152 <LL_RCC_LSI2_IsReady>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f1      	bne.n	80048d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80048f4:	f7ff fbe8 	bl	80040c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fe fcde 	bl	80032b8 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004900:	f7fe fcda 	bl	80032b8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e183      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004912:	f7ff fbea 	bl	80040ea <LL_RCC_LSI1_IsReady>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f1      	bne.n	8004900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05b      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004928:	4ba7      	ldr	r3, [pc, #668]	; (8004bc8 <HAL_RCC_OscConfig+0x688>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d114      	bne.n	800495e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004934:	f7ff fa88 	bl	8003e48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004938:	f7fe fcbe 	bl	80032b8 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fe fcba 	bl	80032b8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e163      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004952:	4b9d      	ldr	r3, [pc, #628]	; (8004bc8 <HAL_RCC_OscConfig+0x688>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_RCC_OscConfig+0x42c>
 8004966:	f7ff fb48 	bl	8003ffa <LL_RCC_LSE_Enable>
 800496a:	e00c      	b.n	8004986 <HAL_RCC_OscConfig+0x446>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b05      	cmp	r3, #5
 8004972:	d104      	bne.n	800497e <HAL_RCC_OscConfig+0x43e>
 8004974:	f7ff fb63 	bl	800403e <LL_RCC_LSE_EnableBypass>
 8004978:	f7ff fb3f 	bl	8003ffa <LL_RCC_LSE_Enable>
 800497c:	e003      	b.n	8004986 <HAL_RCC_OscConfig+0x446>
 800497e:	f7ff fb4d 	bl	800401c <LL_RCC_LSE_Disable>
 8004982:	f7ff fb6d 	bl	8004060 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d014      	beq.n	80049b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fe fc93 	bl	80032b8 <HAL_GetTick>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fe fc8f 	bl	80032b8 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e136      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80049ac:	f7ff fb69 	bl	8004082 <LL_RCC_LSE_IsReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ef      	beq.n	8004996 <HAL_RCC_OscConfig+0x456>
 80049b6:	e013      	b.n	80049e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fe fc7e 	bl	80032b8 <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe fc7a 	bl	80032b8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e121      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80049d6:	f7ff fb54 	bl	8004082 <LL_RCC_LSE_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ef      	bne.n	80049c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02c      	beq.n	8004a46 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d014      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049f4:	f7ff facd 	bl	8003f92 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe fc5e 	bl	80032b8 <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a00:	f7fe fc5a 	bl	80032b8 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e103      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a12:	f7ff fae0 	bl	8003fd6 <LL_RCC_HSI48_IsReady>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f1      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4c0>
 8004a1c:	e013      	b.n	8004a46 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a1e:	f7ff fac9 	bl	8003fb4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fe fc49 	bl	80032b8 <HAL_GetTick>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2a:	f7fe fc45 	bl	80032b8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ee      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a3c:	f7ff facb 	bl	8003fd6 <LL_RCC_HSI48_IsReady>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f1      	bne.n	8004a2a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80e4 	beq.w	8004c18 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a50:	f7ff fc29 	bl	80042a6 <LL_RCC_GetSysClkSource>
 8004a54:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	f040 80b4 	bne.w	8004bd0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0203 	and.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d123      	bne.n	8004abe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d11c      	bne.n	8004abe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d114      	bne.n	8004abe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10d      	bne.n	8004abe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d05d      	beq.n	8004b7a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d058      	beq.n	8004b76 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0a1      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ad6:	f7ff fc84 	bl	80043e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ada:	f7fe fbed 	bl	80032b8 <HAL_GetTick>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe fbe9 	bl	80032b8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e092      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ef      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_OscConfig+0x68c>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b1a:	0212      	lsls	r2, r2, #8
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b38:	f7ff fc44 	bl	80043c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b4c:	f7fe fbb4 	bl	80032b8 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe fbb0 	bl	80032b8 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e059      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b74:	e050      	b.n	8004c18 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e04f      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d147      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b88:	f7ff fc1c 	bl	80043c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b9c:	f7fe fb8c 	bl	80032b8 <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fe fb88 	bl	80032b8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e031      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ef      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x664>
 8004bc4:	e028      	b.n	8004c18 <HAL_RCC_OscConfig+0x6d8>
 8004bc6:	bf00      	nop
 8004bc8:	58000400 	.word	0x58000400
 8004bcc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d01e      	beq.n	8004c14 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	f7ff fc04 	bl	80043e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fe fb6d 	bl	80032b8 <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fe fb69 	bl	80032b8 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e012      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ef      	bne.n	8004be2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_OscConfig+0x6e4>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60cb      	str	r3, [r1, #12]
 8004c12:	e001      	b.n	8004c18 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3734      	adds	r7, #52	; 0x34
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	eefefffc 	.word	0xeefefffc

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e12d      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b98      	ldr	r3, [pc, #608]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d91b      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b95      	ldr	r3, [pc, #596]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4993      	ldr	r1, [pc, #588]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fe fb2d 	bl	80032b8 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c62:	f7fe fb29 	bl	80032b8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e111      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c74:	4b8a      	ldr	r3, [pc, #552]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d1ef      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fb13 	bl	80042be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c98:	f7fe fb0e 	bl	80032b8 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ca0:	f7fe fb0a 	bl	80032b8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e0f2      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cb2:	f7ff fbe8 	bl	8004486 <LL_RCC_IsActiveFlag_HPRE>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f1      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d016      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fb0a 	bl	80042e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cd2:	f7fe faf1 	bl	80032b8 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cda:	f7fe faed 	bl	80032b8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0d5      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cec:	f7ff fbdd 	bl	80044aa <LL_RCC_IsActiveFlag_C2HPRE>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f1      	beq.n	8004cda <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fb03 	bl	8004312 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d0c:	f7fe fad4 	bl	80032b8 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d14:	f7fe fad0 	bl	80032b8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0b8      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d26:	f7ff fbd3 	bl	80044d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f1      	beq.n	8004d14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fafd 	bl	8004340 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d46:	f7fe fab7 	bl	80032b8 <HAL_GetTick>
 8004d4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d4e:	f7fe fab3 	bl	80032b8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e09b      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d60:	f7ff fbc9 	bl	80044f6 <LL_RCC_IsActiveFlag_PPRE1>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f1      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff faf3 	bl	8004368 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d82:	f7fe fa99 	bl	80032b8 <HAL_GetTick>
 8004d86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d8a:	f7fe fa95 	bl	80032b8 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e07d      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d9c:	f7ff fbbd 	bl	800451a <LL_RCC_IsActiveFlag_PPRE2>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f1      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d043      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004dba:	f7ff f893 	bl	8003ee4 <LL_RCC_HSE_IsReady>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11e      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e067      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004dd0:	f7ff fb16 	bl	8004400 <LL_RCC_PLL_IsReady>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e05c      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004de6:	f7ff f9fb 	bl	80041e0 <LL_RCC_MSI_IsReady>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d108      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e051      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004df4:	f7ff f8a6 	bl	8003f44 <LL_RCC_HSI_IsReady>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e04a      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fa39 	bl	800427e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0c:	f7fe fa54 	bl	80032b8 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7fe fa50 	bl	80032b8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e036      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	f7ff fa3c 	bl	80042a6 <LL_RCC_GetSysClkSource>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d1ec      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d21b      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 0207 	bic.w	r2, r3, #7
 8004e50:	4913      	ldr	r1, [pc, #76]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fe fa2e 	bl	80032b8 <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e60:	f7fe fa2a 	bl	80032b8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e012      	b.n	8004e98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x278>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1ef      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e80:	f000 f87e 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <HAL_RCC_ClockConfig+0x27c>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e8a:	f7fe fa21 	bl	80032d0 <HAL_GetTickPrio>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe f9c3 	bl	800321c <HAL_InitTick>
 8004e96:	4603      	mov	r3, r0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58004000 	.word	0x58004000
 8004ea4:	20000024 	.word	0x20000024

08004ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eae:	f7ff f9fa 	bl	80042a6 <LL_RCC_GetSysClkSource>
 8004eb2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004eba:	f7ff f9b6 	bl	800422a <LL_RCC_MSI_GetRange>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e04b      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d102      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e045      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ee2:	f7fe ffcf 	bl	8003e84 <LL_RCC_HSE_IsEnabledDiv2>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e03a      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e037      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ef8:	f7ff fab9 	bl	800446e <LL_RCC_PLL_GetMainSource>
 8004efc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d003      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x64>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f0a:	e00d      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f0e:	60bb      	str	r3, [r7, #8]
        break;
 8004f10:	e015      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f12:	f7fe ffb7 	bl	8003e84 <LL_RCC_HSE_IsEnabledDiv2>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f20:	e00d      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f24:	60bb      	str	r3, [r7, #8]
        break;
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f28:	f7ff f97f 	bl	800422a <LL_RCC_MSI_GetRange>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	60bb      	str	r3, [r7, #8]
        break;
 8004f3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004f3e:	f7ff fa71 	bl	8004424 <LL_RCC_PLL_GetN>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	fb03 f402 	mul.w	r4, r3, r2
 8004f4a:	f7ff fa84 	bl	8004456 <LL_RCC_PLL_GetDivider>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	3301      	adds	r3, #1
 8004f54:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f58:	f7ff fa71 	bl	800443e <LL_RCC_PLL_GetR>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	0f5b      	lsrs	r3, r3, #29
 8004f60:	3301      	adds	r3, #1
 8004f62:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f66:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f68:	68fb      	ldr	r3, [r7, #12]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	0800a5b0 	.word	0x0800a5b0
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	01e84800 	.word	0x01e84800

08004f80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b598      	push	{r3, r4, r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f84:	f7ff ff90 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	f7ff fa01 	bl	8004390 <LL_RCC_GetAHBPrescaler>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	4a03      	ldr	r2, [pc, #12]	; (8004fa4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd98      	pop	{r3, r4, r7, pc}
 8004fa4:	0800a570 	.word	0x0800a570

08004fa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2bb0      	cmp	r3, #176	; 0xb0
 8004fb4:	d903      	bls.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e007      	b.n	8004fce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	4a11      	ldr	r2, [pc, #68]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004fce:	f7ff f9eb 	bl	80043a8 <LL_RCC_GetAHB4Prescaler>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	0c9c      	lsrs	r4, r3, #18
 8004ff2:	f7fe ff39 	bl	8003e68 <HAL_PWREx_GetVoltageRange>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 f80c 	bl	8005018 <RCC_SetFlashLatency>
 8005000:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bd90      	pop	{r4, r7, pc}
 800500a:	bf00      	nop
 800500c:	0800a5b0 	.word	0x0800a5b0
 8005010:	0800a570 	.word	0x0800a570
 8005014:	431bde83 	.word	0x431bde83

08005018 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b093      	sub	sp, #76	; 0x4c
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005022:	4b37      	ldr	r3, [pc, #220]	; (8005100 <RCC_SetFlashLatency+0xe8>)
 8005024:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800502a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800502e:	4a35      	ldr	r2, [pc, #212]	; (8005104 <RCC_SetFlashLatency+0xec>)
 8005030:	f107 031c 	add.w	r3, r7, #28
 8005034:	ca07      	ldmia	r2, {r0, r1, r2}
 8005036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <RCC_SetFlashLatency+0xf0>)
 800503c:	f107 040c 	add.w	r4, r7, #12
 8005040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005046:	2300      	movs	r3, #0
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d11a      	bne.n	8005088 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005052:	2300      	movs	r3, #0
 8005054:	643b      	str	r3, [r7, #64]	; 0x40
 8005056:	e013      	b.n	8005080 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	3348      	adds	r3, #72	; 0x48
 800505e:	443b      	add	r3, r7
 8005060:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d807      	bhi.n	800507a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	3348      	adds	r3, #72	; 0x48
 8005070:	443b      	add	r3, r7
 8005072:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005078:	e020      	b.n	80050bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800507a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507c:	3301      	adds	r3, #1
 800507e:	643b      	str	r3, [r7, #64]	; 0x40
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	2b03      	cmp	r3, #3
 8005084:	d9e8      	bls.n	8005058 <RCC_SetFlashLatency+0x40>
 8005086:	e019      	b.n	80050bc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005088:	2300      	movs	r3, #0
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508c:	e013      	b.n	80050b6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	3348      	adds	r3, #72	; 0x48
 8005094:	443b      	add	r3, r7
 8005096:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d807      	bhi.n	80050b0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	3348      	adds	r3, #72	; 0x48
 80050a6:	443b      	add	r3, r7
 80050a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050ae:	e005      	b.n	80050bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	3301      	adds	r3, #1
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d9e8      	bls.n	800508e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <RCC_SetFlashLatency+0xf4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 0207 	bic.w	r2, r3, #7
 80050c4:	4911      	ldr	r1, [pc, #68]	; (800510c <RCC_SetFlashLatency+0xf4>)
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050cc:	f7fe f8f4 	bl	80032b8 <HAL_GetTick>
 80050d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050d2:	e008      	b.n	80050e6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050d4:	f7fe f8f0 	bl	80032b8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e007      	b.n	80050f6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <RCC_SetFlashLatency+0xf4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1ef      	bne.n	80050d4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	374c      	adds	r7, #76	; 0x4c
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop
 8005100:	0800a3c0 	.word	0x0800a3c0
 8005104:	0800a3d0 	.word	0x0800a3d0
 8005108:	0800a3dc 	.word	0x0800a3dc
 800510c:	58004000 	.word	0x58004000

08005110 <LL_RCC_LSE_IsEnabled>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <LL_RCC_LSE_IsEnabled+0x18>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <LL_RCC_LSE_IsEnabled+0x1a>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_RCC_LSE_IsReady>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d101      	bne.n	800514c <LL_RCC_LSE_IsReady+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_LSE_IsReady+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_SetRFWKPClockSource>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_SetSMPSClockSource>:
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f023 0203 	bic.w	r2, r3, #3
 8005196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_SetSMPSPrescaler>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_SetUSARTClockSource>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f023 0203 	bic.w	r2, r3, #3
 80051e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_SetLPUARTClockSource>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_SetI2CClockSource>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005244:	43db      	mvns	r3, r3
 8005246:	401a      	ands	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_RCC_SetLPTIMClockSource>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_SetSAIClockSource>:
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_RCC_SetRNGClockSource>:
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_SetCLK48ClockSource>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_RCC_SetUSBClockSource>:
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ffe3 	bl	80052f2 <LL_RCC_SetCLK48ClockSource>
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <LL_RCC_SetADCClockSource>:
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800533c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_RCC_SetRTCClockSource>:
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_GetRTCClockSource>:
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_ForceBackupDomainReset>:
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_PLLSAI1_Enable>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_RCC_PLLSAI1_Disable>:
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800540c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800541a:	6013      	str	r3, [r2, #0]
}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_RCC_PLLSAI1_IsReady>:
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800542a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005438:	d101      	bne.n	800543e <LL_RCC_PLLSAI1_IsReady+0x18>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b088      	sub	sp, #32
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005452:	2300      	movs	r3, #0
 8005454:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005456:	2300      	movs	r3, #0
 8005458:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d034      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800546e:	d021      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005474:	d81b      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547a:	d01d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800547c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005480:	d815      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548a:	d110      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800548c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800549c:	e00d      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f947 	bl	8005736 <RCCEx_PLLSAI1_ConfigNP>
 80054a8:	4603      	mov	r3, r0
 80054aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054ac:	e005      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	77fb      	strb	r3, [r7, #31]
        break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80054b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fee8 	bl	800529a <LL_RCC_SetSAIClockSource>
 80054ca:	e001      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	7ffb      	ldrb	r3, [r7, #31]
 80054ce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d046      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80054dc:	f7ff ff56 	bl	800538c <LL_RCC_GetRTCClockSource>
 80054e0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d03c      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80054ec:	f7fe fcac 	bl	8003e48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff30 	bl	8005360 <LL_RCC_SetRTCClockSource>
 8005500:	e02e      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800550c:	f7ff ff4b 	bl	80053a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005510:	f7ff ff5a 	bl	80053c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800552c:	f7ff fdf0 	bl	8005110 <LL_RCC_LSE_IsEnabled>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d114      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005536:	f7fd febf 	bl	80032b8 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800553c:	e00b      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fd febb 	bl	80032b8 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d902      	bls.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	77fb      	strb	r3, [r7, #31]
              break;
 8005554:	e004      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005556:	f7ff fded 	bl	8005134 <LL_RCC_LSE_IsReady>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d1ee      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005560:	7ffb      	ldrb	r3, [r7, #31]
 8005562:	77bb      	strb	r3, [r7, #30]
 8005564:	e001      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005566:	7ffb      	ldrb	r3, [r7, #31]
 8005568:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fe2a 	bl	80051d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fe35 	bl	8005200 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fe5d 	bl	8005266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff fe52 	bl	8005266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fe2a 	bl	800522c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fe1f 	bl	800522c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d022      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fe8d 	bl	800531e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800560c:	d107      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800561c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005626:	d10b      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f8dd 	bl	80057ec <RCCEx_PLLSAI1_ConfigNQ>
 8005632:	4603      	mov	r3, r0
 8005634:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d008      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565e:	d003      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fe2a 	bl	80052c6 <LL_RCC_SetRNGClockSource>
 8005672:	e00a      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	2000      	movs	r0, #0
 8005680:	f7ff fe21 	bl	80052c6 <LL_RCC_SetRNGClockSource>
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fe34 	bl	80052f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005692:	d107      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d022      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fe3d 	bl	8005334 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c2:	d107      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056dc:	d10b      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f8dd 	bl	80058a2 <RCCEx_PLLSAI1_ConfigNR>
 80056e8:	4603      	mov	r3, r0
 80056ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056ec:	7ffb      	ldrb	r3, [r7, #31]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
 80056f4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fd26 	bl	8005158 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fd45 	bl	80051ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fd2c 	bl	8005184 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800572c:	7fbb      	ldrb	r3, [r7, #30]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005742:	f7ff fe61 	bl	8005408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005746:	f7fd fdb7 	bl	80032b8 <HAL_GetTick>
 800574a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800574c:	e009      	b.n	8005762 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800574e:	f7fd fdb3 	bl	80032b8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d902      	bls.n	8005762 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	e004      	b.n	800576c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005762:	f7ff fe60 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f0      	bne.n	800574e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d137      	bne.n	80057e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057a0:	f7ff fe23 	bl	80053ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a4:	f7fd fd88 	bl	80032b8 <HAL_GetTick>
 80057a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057aa:	e009      	b.n	80057c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ac:	f7fd fd84 	bl	80032b8 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d902      	bls.n	80057c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	73fb      	strb	r3, [r7, #15]
        break;
 80057be:	e004      	b.n	80057ca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057c0:	f7ff fe31 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d1f0      	bne.n	80057ac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057f8:	f7ff fe06 	bl	8005408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057fc:	f7fd fd5c 	bl	80032b8 <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005802:	e009      	b.n	8005818 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005804:	f7fd fd58 	bl	80032b8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
      break;
 8005816:	e004      	b.n	8005822 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005818:	f7ff fe05 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d137      	bne.n	8005898 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583c:	4313      	orrs	r3, r2
 800583e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005856:	f7ff fdc8 	bl	80053ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585a:	f7fd fd2d 	bl	80032b8 <HAL_GetTick>
 800585e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005860:	e009      	b.n	8005876 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005862:	f7fd fd29 	bl	80032b8 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d902      	bls.n	8005876 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	73fb      	strb	r3, [r7, #15]
        break;
 8005874:	e004      	b.n	8005880 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005876:	f7ff fdd6 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d1f0      	bne.n	8005862 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058ae:	f7ff fdab 	bl	8005408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058b2:	f7fd fd01 	bl	80032b8 <HAL_GetTick>
 80058b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058b8:	e009      	b.n	80058ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ba:	f7fd fcfd 	bl	80032b8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d902      	bls.n	80058ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e004      	b.n	80058d8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058ce:	f7ff fdaa 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d137      	bne.n	800594e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f2:	4313      	orrs	r3, r2
 80058f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800590c:	f7ff fd6d 	bl	80053ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fd fcd2 	bl	80032b8 <HAL_GetTick>
 8005914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005916:	e009      	b.n	800592c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005918:	f7fd fcce 	bl	80032b8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d902      	bls.n	800592c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	73fb      	strb	r3, [r7, #15]
        break;
 800592a:	e004      	b.n	8005936 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800592c:	f7ff fd7b 	bl	8005426 <LL_RCC_PLLSAI1_IsReady>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d1f0      	bne.n	8005918 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e027      	b.n	80059ba <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7a5b      	ldrb	r3, [r3, #9]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc fb0e 	bl	8001f9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 0120 	bic.w	r1, r3, #32
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0204 	orr.w	r2, r2, #4
 80059aa:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e09f      	b.n	8005b16 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fb00 	bl	8001ff0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059f8:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <HAL_RTC_Init+0x15c>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d07e      	beq.n	8005b02 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	22ca      	movs	r2, #202	; 0xca
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2253      	movs	r2, #83	; 0x53
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8ab 	bl	8005b70 <RTC_EnterInitMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	22ff      	movs	r2, #255	; 0xff
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e067      	b.n	8005b06 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a48:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6899      	ldr	r1, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68d2      	ldr	r2, [r2, #12]
 8005a70:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6919      	ldr	r1, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	041a      	lsls	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a94:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0203 	bic.w	r2, r2, #3
 8005aa4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d113      	bne.n	8005af4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f829 	bl	8005b24 <HAL_RTC_WaitForSynchro>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e010      	b.n	8005b16 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	22ff      	movs	r2, #255	; 0xff
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
 8005b00:	e001      	b.n	8005b06 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40002800 	.word	0x40002800

08005b24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b3a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b3c:	f7fd fbbc 	bl	80032b8 <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b42:	e009      	b.n	8005b58 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b44:	f7fd fbb8 	bl	80032b8 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b52:	d901      	bls.n	8005b58 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e007      	b.n	8005b68 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ee      	beq.n	8005b44 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b90:	f7fd fb92 	bl	80032b8 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b96:	e009      	b.n	8005bac <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fd fb8e 	bl	80032b8 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba6:	d901      	bls.n	8005bac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e007      	b.n	8005bbc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ee      	beq.n	8005b98 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e0a8      	b.n	8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	22ca      	movs	r2, #202	; 0xca
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2253      	movs	r2, #83	; 0x53
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d020      	beq.n	8005c4e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005c0c:	f7fd fb54 	bl	80032b8 <HAL_GetTick>
 8005c10:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c12:	e015      	b.n	8005c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c14:	f7fd fb50 	bl	80032b8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c22:	d90d      	bls.n	8005c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e077      	b.n	8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e2      	bne.n	8005c14 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c70:	f7fd fb22 	bl	80032b8 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c76:	e015      	b.n	8005ca4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c78:	f7fd fb1e 	bl	80032b8 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c86:	d90d      	bls.n	8005ca4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	22ff      	movs	r2, #255	; 0xff
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2203      	movs	r2, #3
 8005c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e045      	b.n	8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0e2      	beq.n	8005c78 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0207 	bic.w	r2, r2, #7
 8005cc8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6899      	ldr	r1, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005cda:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d04:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d14:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	22ff      	movs	r2, #255	; 0xff
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	58000800 	.word	0x58000800

08005d3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d137      	bne.n	8005dc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_UART_Receive_IT+0x24>
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e030      	b.n	8005dc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_UART_Receive_IT+0x94>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01f      	beq.n	8005db4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	6a3a      	ldr	r2, [r7, #32]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fb44 	bl	8006448 <UART_Start_Receive_IT>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3728      	adds	r7, #40	; 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40008000 	.word	0x40008000

08005dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b0ba      	sub	sp, #232	; 0xe8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e02:	4013      	ands	r3, r2
 8005e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11b      	bne.n	8005e48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d015      	beq.n	8005e48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 82e3 	beq.w	8006404 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      }
      return;
 8005e46:	e2dd      	b.n	8006404 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8123 	beq.w	8006098 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e56:	4b8d      	ldr	r3, [pc, #564]	; (800608c <HAL_UART_IRQHandler+0x2b8>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e62:	4b8b      	ldr	r3, [pc, #556]	; (8006090 <HAL_UART_IRQHandler+0x2bc>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8116 	beq.w	8006098 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d011      	beq.n	8005e9c <HAL_UART_IRQHandler+0xc8>
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d011      	beq.n	8005ecc <HAL_UART_IRQHandler+0xf8>
 8005ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	f043 0204 	orr.w	r2, r3, #4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_UART_IRQHandler+0x128>
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f043 0202 	orr.w	r2, r3, #2
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f18:	4b5c      	ldr	r3, [pc, #368]	; (800608c <HAL_UART_IRQHandler+0x2b8>)
 8005f1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <HAL_UART_IRQHandler+0x196>
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8249 	beq.w	8006408 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d013      	beq.n	8005faa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d005      	beq.n	8005fce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d054      	beq.n	8006078 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb5c 	bl	800668c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d146      	bne.n	8006070 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800600e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800601a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1d9      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d017      	beq.n	8006068 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_UART_IRQHandler+0x2c0>)
 8006040:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006048:	4618      	mov	r0, r3
 800604a:	f7fd fb83 	bl	8003754 <HAL_DMA_Abort_IT>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d019      	beq.n	8006088 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006062:	4610      	mov	r0, r2
 8006064:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006066:	e00f      	b.n	8006088 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9d7 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606e:	e00b      	b.n	8006088 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f9d3 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006076:	e007      	b.n	8006088 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f9cf 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006086:	e1bf      	b.n	8006408 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	bf00      	nop
    return;
 800608a:	e1bd      	b.n	8006408 <HAL_UART_IRQHandler+0x634>
 800608c:	10000001 	.word	0x10000001
 8006090:	04000120 	.word	0x04000120
 8006094:	08006759 	.word	0x08006759

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	2b01      	cmp	r3, #1
 800609e:	f040 8153 	bne.w	8006348 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 814c 	beq.w	8006348 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8145 	beq.w	8006348 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2210      	movs	r2, #16
 80060c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	f040 80bb 	bne.w	800624c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 818f 	beq.w	800640c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f080 8187 	bcs.w	800640c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 8087 	bne.w	800622a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800614a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800615e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1da      	bne.n	800611c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800618a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800618e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800619c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e1      	bne.n	8006166 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620a:	65bb      	str	r3, [r7, #88]	; 0x58
 800620c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e4      	bne.n	80061e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd fa36 	bl	8003696 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	b29b      	uxth	r3, r3
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8f3 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800624a:	e0df      	b.n	800640c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006258:	b29b      	uxth	r3, r3
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80d1 	beq.w	8006410 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800626e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80cc 	beq.w	8006410 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800629a:	647b      	str	r3, [r7, #68]	; 0x44
 800629c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e4      	bne.n	8006278 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	623b      	str	r3, [r7, #32]
   return(result);
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062d6:	633a      	str	r2, [r7, #48]	; 0x30
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e1      	bne.n	80062ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	60fb      	str	r3, [r7, #12]
   return(result);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0310 	bic.w	r3, r3, #16
 8006312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	617b      	str	r3, [r7, #20]
   return(result);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e4      	bne.n	80062fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f875 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006346:	e063      	b.n	8006410 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <HAL_UART_IRQHandler+0x59e>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 ff52 	bl	8007214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006370:	e051      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d014      	beq.n	80063a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800638a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
    }
    return;
 80063a6:	e035      	b.n	8006414 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <HAL_UART_IRQHandler+0x5f4>
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9df 	bl	8006784 <UART_EndTransmit_IT>
    return;
 80063c6:	e026      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_UART_IRQHandler+0x614>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ff2b 	bl	800723c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063e6:	e016      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <HAL_UART_IRQHandler+0x642>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da0c      	bge.n	8006416 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 ff13 	bl	8007228 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006402:	e008      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
      return;
 8006404:	bf00      	nop
 8006406:	e006      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
    return;
 8006408:	bf00      	nop
 800640a:	e004      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
      return;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
      return;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_UART_IRQHandler+0x642>
    return;
 8006414:	bf00      	nop
  }
}
 8006416:	37e8      	adds	r7, #232	; 0xe8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b480      	push	{r7}
 800644a:	b0a3      	sub	sp, #140	; 0x8c
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647a:	d10e      	bne.n	800649a <UART_Start_Receive_IT+0x52>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <UART_Start_Receive_IT+0x48>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f240 12ff 	movw	r2, #511	; 0x1ff
 800648a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800648e:	e02d      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	22ff      	movs	r2, #255	; 0xff
 8006494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006498:	e028      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10d      	bne.n	80064be <UART_Start_Receive_IT+0x76>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <UART_Start_Receive_IT+0x6c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	22ff      	movs	r2, #255	; 0xff
 80064ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064b2:	e01b      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	227f      	movs	r2, #127	; 0x7f
 80064b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064bc:	e016      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c6:	d10d      	bne.n	80064e4 <UART_Start_Receive_IT+0x9c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <UART_Start_Receive_IT+0x92>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	227f      	movs	r2, #127	; 0x7f
 80064d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d8:	e008      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	223f      	movs	r2, #63	; 0x3f
 80064de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e2:	e003      	b.n	80064ec <UART_Start_Receive_IT+0xa4>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2222      	movs	r2, #34	; 0x22
 80064f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800650c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006520:	673a      	str	r2, [r7, #112]	; 0x70
 8006522:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006526:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800652e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e3      	bne.n	80064fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653c:	d14f      	bne.n	80065de <UART_Start_Receive_IT+0x196>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	429a      	cmp	r2, r3
 8006548:	d349      	bcc.n	80065de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	d107      	bne.n	8006564 <UART_Start_Receive_IT+0x11c>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a47      	ldr	r2, [pc, #284]	; (800667c <UART_Start_Receive_IT+0x234>)
 8006560:	675a      	str	r2, [r3, #116]	; 0x74
 8006562:	e002      	b.n	800656a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a46      	ldr	r2, [pc, #280]	; (8006680 <UART_Start_Receive_IT+0x238>)
 8006568:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01a      	beq.n	80065a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006596:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800659a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e4      	bne.n	8006572 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_Start_Receive_IT+0x160>
 80065dc:	e046      	b.n	800666c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d107      	bne.n	80065f8 <UART_Start_Receive_IT+0x1b0>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a24      	ldr	r2, [pc, #144]	; (8006684 <UART_Start_Receive_IT+0x23c>)
 80065f4:	675a      	str	r2, [r3, #116]	; 0x74
 80065f6:	e002      	b.n	80065fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a23      	ldr	r2, [pc, #140]	; (8006688 <UART_Start_Receive_IT+0x240>)
 80065fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d019      	beq.n	800663a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800661a:	677b      	str	r3, [r7, #116]	; 0x74
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800662a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_Start_Receive_IT+0x1be>
 8006638:	e018      	b.n	800666c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f043 0320 	orr.w	r3, r3, #32
 800664e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	61bb      	str	r3, [r7, #24]
   return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	378c      	adds	r7, #140	; 0x8c
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	08006ead 	.word	0x08006ead
 8006680:	08006b4d 	.word	0x08006b4d
 8006684:	08006995 	.word	0x08006995
 8006688:	080067dd 	.word	0x080067dd

0800668c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b095      	sub	sp, #84	; 0x54
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
 80066b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e3      	bne.n	80066c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d118      	bne.n	8006738 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60bb      	str	r3, [r7, #8]
   return(result);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	613b      	str	r3, [r7, #16]
   return(result);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800674c:	bf00      	nop
 800674e:	3754      	adds	r7, #84	; 0x54
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fe50 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60bb      	str	r3, [r7, #8]
   return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e6      	bne.n	800678c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fb f805 	bl	80017dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d2:	bf00      	nop
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b09c      	sub	sp, #112	; 0x70
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f4:	2b22      	cmp	r3, #34	; 0x22
 80067f6:	f040 80be 	bne.w	8006976 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006808:	b2d9      	uxtb	r1, r3
 800680a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	400a      	ands	r2, r1
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 80a1 	bne.w	8006986 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006858:	66bb      	str	r3, [r7, #104]	; 0x68
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006862:	65bb      	str	r3, [r7, #88]	; 0x58
 8006864:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e6      	bne.n	8006844 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	667b      	str	r3, [r7, #100]	; 0x64
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006896:	647a      	str	r2, [r7, #68]	; 0x44
 8006898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a33      	ldr	r2, [pc, #204]	; (8006990 <UART_RxISR_8BIT+0x1b4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01f      	beq.n	8006908 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	623b      	str	r3, [r7, #32]
   return(result);
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068ea:	663b      	str	r3, [r7, #96]	; 0x60
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f4:	633b      	str	r3, [r7, #48]	; 0x30
 80068f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e6      	bne.n	80068d6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d12e      	bne.n	800696e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60fb      	str	r3, [r7, #12]
   return(result);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	617b      	str	r3, [r7, #20]
   return(result);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b10      	cmp	r3, #16
 8006954:	d103      	bne.n	800695e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2210      	movs	r2, #16
 800695c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fd62 	bl	8006430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800696c:	e00b      	b.n	8006986 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fa ff16 	bl	80017a0 <HAL_UART_RxCpltCallback>
}
 8006974:	e007      	b.n	8006986 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0208 	orr.w	r2, r2, #8
 8006984:	619a      	str	r2, [r3, #24]
}
 8006986:	bf00      	nop
 8006988:	3770      	adds	r7, #112	; 0x70
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40008000 	.word	0x40008000

08006994 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b09c      	sub	sp, #112	; 0x70
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ac:	2b22      	cmp	r3, #34	; 0x22
 80069ae:	f040 80be 	bne.w	8006b2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069ca:	4013      	ands	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 80a1 	bne.w	8006b3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a10:	667b      	str	r3, [r7, #100]	; 0x64
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e6      	bne.n	80069fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	663b      	str	r3, [r7, #96]	; 0x60
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a4e:	643a      	str	r2, [r7, #64]	; 0x40
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a33      	ldr	r2, [pc, #204]	; (8006b48 <UART_RxISR_16BIT+0x1b4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d01f      	beq.n	8006ac0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d12e      	bne.n	8006b26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6979      	ldr	r1, [r7, #20]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	613b      	str	r3, [r7, #16]
   return(result);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d103      	bne.n	8006b16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2210      	movs	r2, #16
 8006b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fc86 	bl	8006430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b24:	e00b      	b.n	8006b3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa fe3a 	bl	80017a0 <HAL_UART_RxCpltCallback>
}
 8006b2c:	e007      	b.n	8006b3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0208 	orr.w	r2, r2, #8
 8006b3c:	619a      	str	r2, [r3, #24]
}
 8006b3e:	bf00      	nop
 8006b40:	3770      	adds	r7, #112	; 0x70
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40008000 	.word	0x40008000

08006b4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0ac      	sub	sp, #176	; 0xb0
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b82:	2b22      	cmp	r3, #34	; 0x22
 8006b84:	f040 8182 	bne.w	8006e8c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b8e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b92:	e125      	b.n	8006de0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006ba2:	b2d9      	uxtb	r1, r3
 8006ba4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	400a      	ands	r2, r1
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d053      	beq.n	8006c8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d011      	beq.n	8006c16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2201      	movs	r2, #1
 8006c04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f043 0201 	orr.w	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d011      	beq.n	8006c46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2202      	movs	r2, #2
 8006c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	f043 0204 	orr.w	r2, r3, #4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d011      	beq.n	8006c76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2204      	movs	r2, #4
 8006c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6c:	f043 0202 	orr.w	r2, r3, #2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fbcb 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f040 80a2 	bne.w	8006de0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006cc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cfa:	66ba      	str	r2, [r7, #104]	; 0x68
 8006cfc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e1      	bne.n	8006cd2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a5f      	ldr	r2, [pc, #380]	; (8006ea4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d021      	beq.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01a      	beq.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d5c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d5e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e4      	bne.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d130      	bne.n	8006dda <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da0:	643b      	str	r3, [r7, #64]	; 0x40
 8006da2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e4      	bne.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d103      	bne.n	8006dca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fb2c 	bl	8006430 <HAL_UARTEx_RxEventCallback>
 8006dd8:	e002      	b.n	8006de0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fce0 	bl	80017a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006de0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d006      	beq.n	8006df6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f47f aecf 	bne.w	8006b94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d049      	beq.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0x350>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e0e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d242      	bcs.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e3      	bne.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f043 0320 	orr.w	r3, r3, #32
 8006e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6979      	ldr	r1, [r7, #20]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	613b      	str	r3, [r7, #16]
   return(result);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e4      	bne.n	8006e54 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e8a:	e007      	b.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	619a      	str	r2, [r3, #24]
}
 8006e9c:	bf00      	nop
 8006e9e:	37b0      	adds	r7, #176	; 0xb0
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40008000 	.word	0x40008000
 8006ea8:	080067dd 	.word	0x080067dd

08006eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b0ae      	sub	sp, #184	; 0xb8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee2:	2b22      	cmp	r3, #34	; 0x22
 8006ee4:	f040 8186 	bne.w	80071f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006eee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ef2:	e129      	b.n	8007148 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006f0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1c:	1c9a      	adds	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d053      	beq.n	8006ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d011      	beq.n	8006f7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2201      	movs	r2, #1
 8006f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f043 0201 	orr.w	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d011      	beq.n	8006faa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2202      	movs	r2, #2
 8006f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	f043 0204 	orr.w	r2, r3, #4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d011      	beq.n	8006fda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd0:	f043 0202 	orr.w	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fa19 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 80a4 	bne.w	8007148 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800700e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007026:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800702a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e2      	bne.n	8007000 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800704a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e1      	bne.n	800703a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a5f      	ldr	r2, [pc, #380]	; (800720c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d021      	beq.n	80070d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01a      	beq.n	80070d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e4      	bne.n	80070a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d130      	bne.n	8007142 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	f023 0310 	bic.w	r3, r3, #16
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
 800710a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800710e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e4      	bne.n	80070e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b10      	cmp	r3, #16
 8007128:	d103      	bne.n	8007132 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff f978 	bl	8006430 <HAL_UARTEx_RxEventCallback>
 8007140:	e002      	b.n	8007148 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa fb2c 	bl	80017a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007148:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800714c:	2b00      	cmp	r3, #0
 800714e:	d006      	beq.n	800715e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f aecb 	bne.w	8006ef4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007164:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007168:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800716c:	2b00      	cmp	r3, #0
 800716e:	d049      	beq.n	8007204 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007176:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800717a:	429a      	cmp	r2, r3
 800717c:	d242      	bcs.n	8007204 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	623b      	str	r3, [r7, #32]
   return(result);
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071a2:	633a      	str	r2, [r7, #48]	; 0x30
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e3      	bne.n	800717e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80071ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f043 0320 	orr.w	r3, r3, #32
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69b9      	ldr	r1, [r7, #24]
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	617b      	str	r3, [r7, #20]
   return(result);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e4      	bne.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071f2:	e007      	b.n	8007204 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0208 	orr.w	r2, r2, #8
 8007202:	619a      	str	r2, [r3, #24]
}
 8007204:	bf00      	nop
 8007206:	37b8      	adds	r7, #184	; 0xb8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40008000 	.word	0x40008000
 8007210:	08006995 	.word	0x08006995

08007214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	2218      	movs	r2, #24
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fefd 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007268:	233f      	movs	r3, #63	; 0x3f
 800726a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800726c:	2381      	movs	r3, #129	; 0x81
 800726e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007270:	1dfb      	adds	r3, r7, #7
 8007272:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007274:	2301      	movs	r3, #1
 8007276:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007278:	f107 0308 	add.w	r3, r7, #8
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f001 fbc6 	bl	8008a10 <hci_send_req>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	da01      	bge.n	800728e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	e000      	b.n	8007290 <aci_gap_set_non_discoverable+0x40>
  return status;
 800728e:	79fb      	ldrb	r3, [r7, #7]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007298:	b5b0      	push	{r4, r5, r7, lr}
 800729a:	b0ce      	sub	sp, #312	; 0x138
 800729c:	af00      	add	r7, sp, #0
 800729e:	4605      	mov	r5, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072aa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80072ae:	462a      	mov	r2, r5
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80072ba:	4622      	mov	r2, r4
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072c2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80072c6:	4602      	mov	r2, r0
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072ce:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80072d2:	460a      	mov	r2, r1
 80072d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80072de:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80072e2:	3308      	adds	r3, #8
 80072e4:	f107 0210 	add.w	r2, r7, #16
 80072e8:	4413      	add	r3, r2
 80072ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80072ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80072f2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80072f6:	4413      	add	r3, r2
 80072f8:	3309      	adds	r3, #9
 80072fa:	f107 0210 	add.w	r2, r7, #16
 80072fe:	4413      	add	r3, r2
 8007300:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007304:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007308:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007316:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800731a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800731e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732a:	3301      	adds	r3, #1
 800732c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007330:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007334:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007338:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007346:	3302      	adds	r3, #2
 8007348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800734c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007350:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007354:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8007358:	8812      	ldrh	r2, [r2, #0]
 800735a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800735e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007362:	3302      	adds	r3, #2
 8007364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007368:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800736c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007370:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737c:	3301      	adds	r3, #1
 800737e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007386:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800738a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800738c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800739a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800739e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80073a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a4:	3301      	adds	r3, #1
 80073a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80073aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ae:	3308      	adds	r3, #8
 80073b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80073b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 fe42 	bl	8009042 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80073be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80073c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073c6:	4413      	add	r3, r2
 80073c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80073cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80073d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073da:	3301      	adds	r3, #1
 80073dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80073e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073e4:	3301      	adds	r3, #1
 80073e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fe27 	bl	8009042 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80073f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80073f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073fc:	4413      	add	r3, r2
 80073fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007406:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800740a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800740c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007410:	3302      	adds	r3, #2
 8007412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800741e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007424:	3302      	adds	r3, #2
 8007426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800742a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800742e:	2218      	movs	r2, #24
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 fe15 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007438:	233f      	movs	r3, #63	; 0x3f
 800743a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800743e:	2383      	movs	r3, #131	; 0x83
 8007440:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007444:	f107 0310 	add.w	r3, r7, #16
 8007448:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800744c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007454:	f107 030f 	add.w	r3, r7, #15
 8007458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800745c:	2301      	movs	r3, #1
 800745e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fad1 	bl	8008a10 <hci_send_req>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	da01      	bge.n	8007478 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007474:	23ff      	movs	r3, #255	; 0xff
 8007476:	e004      	b.n	8007482 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800747c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007480:	781b      	ldrb	r3, [r3, #0]
}
 8007482:	4618      	mov	r0, r3
 8007484:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007488:	46bd      	mov	sp, r7
 800748a:	bdb0      	pop	{r4, r5, r7, pc}

0800748c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b0cc      	sub	sp, #304	; 0x130
 8007490:	af00      	add	r7, sp, #0
 8007492:	4602      	mov	r2, r0
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800749c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800749e:	f107 0310 	add.w	r3, r7, #16
 80074a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074cc:	3301      	adds	r3, #1
 80074ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074d6:	2218      	movs	r2, #24
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fdc1 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074e0:	233f      	movs	r3, #63	; 0x3f
 80074e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80074e6:	2385      	movs	r3, #133	; 0x85
 80074e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074ec:	f107 0310 	add.w	r3, r7, #16
 80074f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074fc:	f107 030f 	add.w	r3, r7, #15
 8007500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007504:	2301      	movs	r3, #1
 8007506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800750a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fa7d 	bl	8008a10 <hci_send_req>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	da01      	bge.n	8007520 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800751c:	23ff      	movs	r3, #255	; 0xff
 800751e:	e004      	b.n	800752a <aci_gap_set_io_capability+0x9e>
  return status;
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007528:	781b      	ldrb	r3, [r3, #0]
}
 800752a:	4618      	mov	r0, r3
 800752c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007534:	b5b0      	push	{r4, r5, r7, lr}
 8007536:	b0cc      	sub	sp, #304	; 0x130
 8007538:	af00      	add	r7, sp, #0
 800753a:	4605      	mov	r5, r0
 800753c:	460c      	mov	r4, r1
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800754a:	462a      	mov	r2, r5
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007556:	4622      	mov	r2, r4
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007562:	4602      	mov	r2, r0
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756e:	460a      	mov	r2, r1
 8007570:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007572:	f107 0310 	add.w	r3, r7, #16
 8007576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007594:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800759c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80075b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ba:	3301      	adds	r3, #1
 80075bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80075c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075c8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80075d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d4:	3301      	adds	r3, #1
 80075d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80075da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80075ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ee:	3301      	adds	r3, #1
 80075f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80075fc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80075fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007602:	3301      	adds	r3, #1
 8007604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007610:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007616:	3301      	adds	r3, #1
 8007618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800761c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007620:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007624:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800762a:	3301      	adds	r3, #1
 800762c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007638:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800763c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007640:	3304      	adds	r3, #4
 8007642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800764e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800765a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800765e:	2218      	movs	r2, #24
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fcfd 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007668:	233f      	movs	r3, #63	; 0x3f
 800766a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800766e:	2386      	movs	r3, #134	; 0x86
 8007670:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007674:	f107 0310 	add.w	r3, r7, #16
 8007678:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800767c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007680:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007684:	f107 030f 	add.w	r3, r7, #15
 8007688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f001 f9b9 	bl	8008a10 <hci_send_req>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da01      	bge.n	80076a8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80076a4:	23ff      	movs	r3, #255	; 0xff
 80076a6:	e004      	b.n	80076b2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80076a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076b0:	781b      	ldrb	r3, [r3, #0]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bdb0      	pop	{r4, r5, r7, pc}

080076bc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b0cc      	sub	sp, #304	; 0x130
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4602      	mov	r2, r0
 80076c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076d6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076fe:	8812      	ldrh	r2, [r2, #0]
 8007700:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007706:	3302      	adds	r3, #2
 8007708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007714:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800771e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007722:	3304      	adds	r3, #4
 8007724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007728:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772c:	2218      	movs	r2, #24
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f001 fc96 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007736:	233f      	movs	r3, #63	; 0x3f
 8007738:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800773c:	2388      	movs	r3, #136	; 0x88
 800773e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007742:	f107 0310 	add.w	r3, r7, #16
 8007746:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800774a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800774e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007752:	f107 030f 	add.w	r3, r7, #15
 8007756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800775a:	2301      	movs	r3, #1
 800775c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f001 f952 	bl	8008a10 <hci_send_req>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	da01      	bge.n	8007776 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007772:	23ff      	movs	r3, #255	; 0xff
 8007774:	e004      	b.n	8007780 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800777e:	781b      	ldrb	r3, [r3, #0]
}
 8007780:	4618      	mov	r0, r3
 8007782:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800778a:	b590      	push	{r4, r7, lr}
 800778c:	b0cd      	sub	sp, #308	; 0x134
 800778e:	af00      	add	r7, sp, #0
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800779a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80077a8:	4622      	mov	r2, r4
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80077b4:	4602      	mov	r2, r0
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80077c0:	460a      	mov	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80077c4:	f107 0310 	add.w	r3, r7, #16
 80077c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80077cc:	f107 0308 	add.w	r3, r7, #8
 80077d0:	2207      	movs	r2, #7
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 fc44 	bl	8009062 <Osal_MemSet>
  int index_input = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80077e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077f4:	3301      	adds	r3, #1
 80077f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007802:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800780a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800780e:	3301      	adds	r3, #1
 8007810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800781c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007828:	3301      	adds	r3, #1
 800782a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800782e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007832:	2218      	movs	r2, #24
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fc13 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 800783c:	233f      	movs	r3, #63	; 0x3f
 800783e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007842:	238a      	movs	r3, #138	; 0x8a
 8007844:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007854:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007860:	2307      	movs	r3, #7
 8007862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f8cf 	bl	8008a10 <hci_send_req>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	da01      	bge.n	800787c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007878:	23ff      	movs	r3, #255	; 0xff
 800787a:	e02e      	b.n	80078da <aci_gap_init+0x150>
  if ( resp.Status )
 800787c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007880:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <aci_gap_init+0x10c>
    return resp.Status;
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	e021      	b.n	80078da <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800789e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80078b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80078c2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80078c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80078cc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80078d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd90      	pop	{r4, r7, pc}

080078e4 <aci_gap_slave_security_req>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_slave_security_req( uint16_t Connection_Handle )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b0cc      	sub	sp, #304	; 0x130
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4602      	mov	r2, r0
 80078ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007914:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007918:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800791c:	8812      	ldrh	r2, [r2, #0]
 800791e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007924:	3302      	adds	r3, #2
 8007926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800792a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800792e:	2218      	movs	r2, #24
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fb95 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007938:	233f      	movs	r3, #63	; 0x3f
 800793a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 800793e:	238d      	movs	r3, #141	; 0x8d
 8007940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8007944:	230f      	movs	r3, #15
 8007946:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800794a:	f107 0310 	add.w	r3, r7, #16
 800794e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800795a:	f107 030f 	add.w	r3, r7, #15
 800795e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f001 f84e 	bl	8008a10 <hci_send_req>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	da01      	bge.n	800797e <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 800797a:	23ff      	movs	r3, #255	; 0xff
 800797c:	e004      	b.n	8007988 <aci_gap_slave_security_req+0xa4>
  return status;
 800797e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007982:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007986:	781b      	ldrb	r3, [r3, #0]
}
 8007988:	4618      	mov	r0, r3
 800798a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <aci_gap_update_adv_data>:

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b0cc      	sub	sp, #304	; 0x130
 8007996:	af00      	add	r7, sp, #0
 8007998:	4602      	mov	r2, r0
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a2:	6019      	str	r1, [r3, #0]
 80079a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80079ae:	f107 0310 	add.w	r3, r7, #16
 80079b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079be:	2200      	movs	r2, #0
 80079c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80079c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079dc:	3301      	adds	r3, #1
 80079de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	1c58      	adds	r0, r3, #1
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079f0:	781a      	ldrb	r2, [r3, #0]
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fa:	6819      	ldr	r1, [r3, #0]
 80079fc:	f001 fb21 	bl	8009042 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a0e:	4413      	add	r3, r2
 8007a10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a18:	2218      	movs	r2, #24
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 fb20 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a22:	233f      	movs	r3, #63	; 0x3f
 8007a24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007a28:	238e      	movs	r3, #142	; 0x8e
 8007a2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a2e:	f107 0310 	add.w	r3, r7, #16
 8007a32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a3e:	f107 030f 	add.w	r3, r7, #15
 8007a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a50:	2100      	movs	r1, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 ffdc 	bl	8008a10 <hci_send_req>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da01      	bge.n	8007a62 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007a5e:	23ff      	movs	r3, #255	; 0xff
 8007a60:	e004      	b.n	8007a6c <aci_gap_update_adv_data+0xda>
  return status;
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a6a:	781b      	ldrb	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b088      	sub	sp, #32
 8007a7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	2218      	movs	r2, #24
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 faea 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a8e:	233f      	movs	r3, #63	; 0x3f
 8007a90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007a92:	2392      	movs	r3, #146	; 0x92
 8007a94:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a96:	1dfb      	adds	r3, r7, #7
 8007a98:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 ffb3 	bl	8008a10 <hci_send_req>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da01      	bge.n	8007ab4 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ab0:	23ff      	movs	r3, #255	; 0xff
 8007ab2:	e000      	b.n	8007ab6 <aci_gap_configure_whitelist+0x40>
  return status;
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b088      	sub	sp, #32
 8007ac2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ac8:	f107 0308 	add.w	r3, r7, #8
 8007acc:	2218      	movs	r2, #24
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fac6 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ad6:	233f      	movs	r3, #63	; 0x3f
 8007ad8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8007ada:	2394      	movs	r3, #148	; 0x94
 8007adc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ade:	1dfb      	adds	r3, r7, #7
 8007ae0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 ff8f 	bl	8008a10 <hci_send_req>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da01      	bge.n	8007afc <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007af8:	23ff      	movs	r3, #255	; 0xff
 8007afa:	e000      	b.n	8007afe <aci_gap_clear_security_db+0x40>
  return status;
 8007afc:	79fb      	ldrb	r3, [r7, #7]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <aci_gap_allow_rebond>:

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b0cc      	sub	sp, #304	; 0x130
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b3a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b3e:	8812      	ldrh	r2, [r2, #0]
 8007b40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b46:	3302      	adds	r3, #2
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b50:	2218      	movs	r2, #24
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fa84 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b5a:	233f      	movs	r3, #63	; 0x3f
 8007b5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8007b60:	2395      	movs	r3, #149	; 0x95
 8007b62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b66:	f107 0310 	add.w	r3, r7, #16
 8007b6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b76:	f107 030f 	add.w	r3, r7, #15
 8007b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff40 	bl	8008a10 <hci_send_req>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da01      	bge.n	8007b9a <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8007b96:	23ff      	movs	r3, #255	; 0xff
 8007b98:	e004      	b.n	8007ba4 <aci_gap_allow_rebond+0x9e>
  return status;
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ba2:	781b      	ldrb	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b0cc      	sub	sp, #304	; 0x130
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007bc8:	460a      	mov	r2, r1
 8007bca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007bcc:	f107 0310 	add.w	r3, r7, #16
 8007bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c08:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007c0c:	7812      	ldrb	r2, [r2, #0]
 8007c0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c14:	3301      	adds	r3, #1
 8007c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c1e:	2218      	movs	r2, #24
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 fa1d 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c28:	233f      	movs	r3, #63	; 0x3f
 8007c2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007c2e:	23a5      	movs	r3, #165	; 0xa5
 8007c30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c44:	f107 030f 	add.w	r3, r7, #15
 8007c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c56:	2100      	movs	r1, #0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fed9 	bl	8008a10 <hci_send_req>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da01      	bge.n	8007c68 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007c64:	23ff      	movs	r3, #255	; 0xff
 8007c66:	e004      	b.n	8007c72 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c70:	781b      	ldrb	r3, [r3, #0]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c86:	f107 0308 	add.w	r3, r7, #8
 8007c8a:	2218      	movs	r2, #24
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f9e7 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c94:	233f      	movs	r3, #63	; 0x3f
 8007c96:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007c98:	f240 1301 	movw	r3, #257	; 0x101
 8007c9c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007c9e:	1dfb      	adds	r3, r7, #7
 8007ca0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 feaf 	bl	8008a10 <hci_send_req>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da01      	bge.n	8007cbc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007cb8:	23ff      	movs	r3, #255	; 0xff
 8007cba:	e000      	b.n	8007cbe <aci_gatt_init+0x42>
  return status;
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007cc6:	b590      	push	{r4, r7, lr}
 8007cc8:	b0cf      	sub	sp, #316	; 0x13c
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	4604      	mov	r4, r0
 8007cce:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007cd2:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007cd6:	6001      	str	r1, [r0, #0]
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ce0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007cec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007cf8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007cfc:	460a      	mov	r2, r1
 8007cfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007d00:	f107 0310 	add.w	r3, r7, #16
 8007d04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007d08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d0c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d00a      	beq.n	8007d2c <aci_gatt_add_service+0x66>
 8007d16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d1a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d101      	bne.n	8007d28 <aci_gatt_add_service+0x62>
 8007d24:	2311      	movs	r3, #17
 8007d26:	e002      	b.n	8007d2e <aci_gatt_add_service+0x68>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <aci_gatt_add_service+0x68>
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	f107 0210 	add.w	r2, r7, #16
 8007d32:	4413      	add	r3, r2
 8007d34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 f98e 	bl	8009062 <Osal_MemSet>
  int index_input = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007d4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d54:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007d66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d6a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <aci_gatt_add_service+0xb4>
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d004      	beq.n	8007d82 <aci_gatt_add_service+0xbc>
 8007d78:	e007      	b.n	8007d8a <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007d80:	e005      	b.n	8007d8e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007d82:	2310      	movs	r3, #16
 8007d84:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007d88:	e001      	b.n	8007d8e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007d8a:	2397      	movs	r3, #151	; 0x97
 8007d8c:	e06c      	b.n	8007e68 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d92:	1c58      	adds	r0, r3, #1
 8007d94:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007d98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d9c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007da0:	6819      	ldr	r1, [r3, #0]
 8007da2:	f001 f94e 	bl	8009042 <Osal_MemCpy>
    index_input += size;
 8007da6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007daa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dae:	4413      	add	r3, r2
 8007db0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007dbc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc8:	3301      	adds	r3, #1
 8007dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007dd6:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007de2:	3301      	adds	r3, #1
 8007de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007de8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dec:	2218      	movs	r2, #24
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f936 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007df6:	233f      	movs	r3, #63	; 0x3f
 8007df8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007dfc:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007e00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e04:	f107 0310 	add.w	r3, r7, #16
 8007e08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007e14:	f107 030c 	add.w	r3, r7, #12
 8007e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fdf1 	bl	8008a10 <hci_send_req>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	da01      	bge.n	8007e38 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007e34:	23ff      	movs	r3, #255	; 0xff
 8007e36:	e017      	b.n	8007e68 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	e00a      	b.n	8007e68 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007e52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007e64:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}

08007e72 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007e72:	b590      	push	{r4, r7, lr}
 8007e74:	b0d1      	sub	sp, #324	; 0x144
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007e80:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007e84:	600a      	str	r2, [r1, #0]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e8c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007e90:	4622      	mov	r2, r4
 8007e92:	801a      	strh	r2, [r3, #0]
 8007e94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e98:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ea4:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007ea8:	460a      	mov	r2, r1
 8007eaa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007eac:	f107 0318 	add.w	r3, r7, #24
 8007eb0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007eb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007eb8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d00a      	beq.n	8007ed8 <aci_gatt_add_char+0x66>
 8007ec2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ec6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d101      	bne.n	8007ed4 <aci_gatt_add_char+0x62>
 8007ed0:	2313      	movs	r3, #19
 8007ed2:	e002      	b.n	8007eda <aci_gatt_add_char+0x68>
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e000      	b.n	8007eda <aci_gatt_add_char+0x68>
 8007ed8:	2305      	movs	r3, #5
 8007eda:	f107 0218 	add.w	r2, r7, #24
 8007ede:	4413      	add	r3, r2
 8007ee0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	2203      	movs	r2, #3
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f8b8 	bl	8009062 <Osal_MemSet>
  int index_input = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007ef8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007efc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007f00:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f16:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007f1a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f26:	3301      	adds	r3, #1
 8007f28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007f2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007f30:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d002      	beq.n	8007f40 <aci_gatt_add_char+0xce>
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d004      	beq.n	8007f48 <aci_gatt_add_char+0xd6>
 8007f3e:	e007      	b.n	8007f50 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007f40:	2302      	movs	r3, #2
 8007f42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007f46:	e005      	b.n	8007f54 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007f4e:	e001      	b.n	8007f54 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007f50:	2397      	movs	r3, #151	; 0x97
 8007f52:	e091      	b.n	8008078 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007f54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f58:	1cd8      	adds	r0, r3, #3
 8007f5a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007f5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007f62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f66:	6819      	ldr	r1, [r3, #0]
 8007f68:	f001 f86b 	bl	8009042 <Osal_MemCpy>
    index_input += size;
 8007f6c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007f70:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007f74:	4413      	add	r3, r2
 8007f76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007f7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f7e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007f82:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007f86:	8812      	ldrh	r2, [r2, #0]
 8007f88:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007f8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f8e:	3302      	adds	r3, #2
 8007f90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007f94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f98:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f9c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007f9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007fa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fac:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007fb0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007fb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007fbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fc0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007fc4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007fc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007fd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fd4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007fd8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fe8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007fec:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007fee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ff8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f82e 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008006:	233f      	movs	r3, #63	; 0x3f
 8008008:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800800c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008010:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008014:	f107 0318 	add.w	r3, r7, #24
 8008018:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800801c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008020:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800802c:	2303      	movs	r3, #3
 800802e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008032:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fce9 	bl	8008a10 <hci_send_req>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	da01      	bge.n	8008048 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008044:	23ff      	movs	r3, #255	; 0xff
 8008046:	e017      	b.n	8008078 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008048:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800804c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008056:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800805a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	e00a      	b.n	8008078 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008062:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800806a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008074:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800807e:	46bd      	mov	sp, r7
 8008080:	bd90      	pop	{r4, r7, pc}

08008082 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008082:	b5b0      	push	{r4, r5, r7, lr}
 8008084:	b0cc      	sub	sp, #304	; 0x130
 8008086:	af00      	add	r7, sp, #0
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008094:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008098:	462a      	mov	r2, r5
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080a4:	4622      	mov	r2, r4
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ac:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80080b0:	4602      	mov	r2, r0
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80080bc:	460a      	mov	r2, r1
 80080be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80080c0:	f107 0310 	add.w	r3, r7, #16
 80080c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80080c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80080da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80080ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ee:	3302      	adds	r3, #2
 80080f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80080f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008100:	8812      	ldrh	r2, [r2, #0]
 8008102:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008108:	3302      	adds	r3, #2
 800810a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008116:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800811e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008122:	3301      	adds	r3, #1
 8008124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008130:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008134:	7812      	ldrb	r2, [r2, #0]
 8008136:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800813c:	3301      	adds	r3, #1
 800813e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	1d98      	adds	r0, r3, #6
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008158:	f000 ff73 	bl	8009042 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800815c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008160:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800816a:	4413      	add	r3, r2
 800816c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008170:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008174:	2218      	movs	r2, #24
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f000 ff72 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 800817e:	233f      	movs	r3, #63	; 0x3f
 8008180:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008184:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008188:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800818c:	f107 0310 	add.w	r3, r7, #16
 8008190:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008194:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008198:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800819c:	f107 030f 	add.w	r3, r7, #15
 80081a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ae:	2100      	movs	r1, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fc2d 	bl	8008a10 <hci_send_req>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da01      	bge.n	80081c0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80081bc:	23ff      	movs	r3, #255	; 0xff
 80081be:	e004      	b.n	80081ca <aci_gatt_update_char_value+0x148>
  return status;
 80081c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80081c8:	781b      	ldrb	r3, [r3, #0]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bdb0      	pop	{r4, r5, r7, pc}

080081d4 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 80081d4:	b5b0      	push	{r4, r5, r7, lr}
 80081d6:	b0cc      	sub	sp, #304	; 0x130
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4605      	mov	r5, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	4610      	mov	r0, r2
 80081e0:	4619      	mov	r1, r3
 80081e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80081ea:	462a      	mov	r2, r5
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081f6:	4622      	mov	r2, r4
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008202:	4602      	mov	r2, r0
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800820e:	460a      	mov	r2, r1
 8008210:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008212:	f107 0310 	add.w	r3, r7, #16
 8008216:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800822c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008230:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008234:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800823c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008240:	3302      	adds	r3, #2
 8008242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8008246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800824e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008252:	8812      	ldrh	r2, [r2, #0]
 8008254:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800825a:	3302      	adds	r3, #2
 800825c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8008260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008264:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008268:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008282:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800828a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800828e:	3301      	adds	r3, #1
 8008290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800829c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800829e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082a2:	3301      	adds	r3, #1
 80082a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80082a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ac:	3307      	adds	r3, #7
 80082ae:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80082b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fec3 	bl	8009042 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80082bc:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80082c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082c4:	4413      	add	r3, r2
 80082c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082ce:	2218      	movs	r2, #24
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fec5 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082d8:	233f      	movs	r3, #63	; 0x3f
 80082da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 80082de:	f44f 7393 	mov.w	r3, #294	; 0x126
 80082e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082f6:	f107 030f 	add.w	r3, r7, #15
 80082fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082fe:	2301      	movs	r3, #1
 8008300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fb80 	bl	8008a10 <hci_send_req>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	da01      	bge.n	800831a <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 8008316:	23ff      	movs	r3, #255	; 0xff
 8008318:	e004      	b.n	8008324 <aci_gatt_write_resp+0x150>
  return status;
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008322:	781b      	ldrb	r3, [r3, #0]
}
 8008324:	4618      	mov	r0, r3
 8008326:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800832a:	46bd      	mov	sp, r7
 800832c:	bdb0      	pop	{r4, r5, r7, pc}

0800832e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b0cc      	sub	sp, #304	; 0x130
 8008332:	af00      	add	r7, sp, #0
 8008334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008346:	4602      	mov	r2, r0
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008352:	460a      	mov	r2, r1
 8008354:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008356:	f107 0310 	add.w	r3, r7, #16
 800835a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008374:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008378:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800837c:	7812      	ldrb	r2, [r2, #0]
 800837e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008384:	3301      	adds	r3, #1
 8008386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008392:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800839a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839e:	3301      	adds	r3, #1
 80083a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80083a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a8:	1c98      	adds	r0, r3, #2
 80083aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	f000 fe40 	bl	8009042 <Osal_MemCpy>
  index_input += Length;
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083d0:	4413      	add	r3, r2
 80083d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083da:	2218      	movs	r2, #24
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fe3f 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083e4:	233f      	movs	r3, #63	; 0x3f
 80083e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80083ea:	230c      	movs	r3, #12
 80083ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008400:	f107 030f 	add.w	r3, r7, #15
 8008404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008408:	2301      	movs	r3, #1
 800840a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800840e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fafb 	bl	8008a10 <hci_send_req>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	da01      	bge.n	8008424 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008420:	23ff      	movs	r3, #255	; 0xff
 8008422:	e004      	b.n	800842e <aci_hal_write_config_data+0x100>
  return status;
 8008424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008428:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800842c:	781b      	ldrb	r3, [r3, #0]
}
 800842e:	4618      	mov	r0, r3
 8008430:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b0cc      	sub	sp, #304	; 0x130
 800843c:	af00      	add	r7, sp, #0
 800843e:	4602      	mov	r2, r0
 8008440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008444:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008452:	460a      	mov	r2, r1
 8008454:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008456:	f107 0310 	add.w	r3, r7, #16
 800845a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800845e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008462:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008466:	2200      	movs	r2, #0
 8008468:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008474:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008478:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800847c:	7812      	ldrb	r2, [r2, #0]
 800847e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008484:	3301      	adds	r3, #1
 8008486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800848a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008492:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008496:	7812      	ldrb	r2, [r2, #0]
 8008498:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800849a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800849e:	3301      	adds	r3, #1
 80084a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084a8:	2218      	movs	r2, #24
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fdd8 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084b2:	233f      	movs	r3, #63	; 0x3f
 80084b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80084b8:	230f      	movs	r3, #15
 80084ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084be:	f107 0310 	add.w	r3, r7, #16
 80084c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084ce:	f107 030f 	add.w	r3, r7, #15
 80084d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fa94 	bl	8008a10 <hci_send_req>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	da01      	bge.n	80084f2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80084ee:	23ff      	movs	r3, #255	; 0xff
 80084f0:	e004      	b.n	80084fc <aci_hal_set_tx_power_level+0xc4>
  return status;
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084fa:	781b      	ldrb	r3, [r3, #0]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008510:	f107 0308 	add.w	r3, r7, #8
 8008514:	2218      	movs	r2, #24
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fda2 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x03;
 800851e:	2303      	movs	r3, #3
 8008520:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008522:	2303      	movs	r3, #3
 8008524:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008526:	1dfb      	adds	r3, r7, #7
 8008528:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800852e:	f107 0308 	add.w	r3, r7, #8
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fa6b 	bl	8008a10 <hci_send_req>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	da01      	bge.n	8008544 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008540:	23ff      	movs	r3, #255	; 0xff
 8008542:	e000      	b.n	8008546 <hci_reset+0x40>
  return status;
 8008544:	79fb      	ldrb	r3, [r7, #7]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b0ce      	sub	sp, #312	; 0x138
 8008552:	af00      	add	r7, sp, #0
 8008554:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855c:	6019      	str	r1, [r3, #0]
 800855e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008562:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800856c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008570:	4602      	mov	r2, r0
 8008572:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008574:	f107 0318 	add.w	r3, r7, #24
 8008578:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800857c:	f107 0310 	add.w	r3, r7, #16
 8008580:	2205      	movs	r2, #5
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fd6c 	bl	8009062 <Osal_MemSet>
  int index_input = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008594:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008598:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800859c:	8812      	ldrh	r2, [r2, #0]
 800859e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085a4:	3302      	adds	r3, #2
 80085a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085ae:	2218      	movs	r2, #24
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fd55 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x08;
 80085b8:	2308      	movs	r3, #8
 80085ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80085be:	2330      	movs	r3, #48	; 0x30
 80085c0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80085c4:	f107 0318 	add.w	r3, r7, #24
 80085c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80085cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80085d4:	f107 0310 	add.w	r3, r7, #16
 80085d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80085dc:	2305      	movs	r3, #5
 80085de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fa11 	bl	8008a10 <hci_send_req>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da01      	bge.n	80085f8 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80085f4:	23ff      	movs	r3, #255	; 0xff
 80085f6:	e023      	b.n	8008640 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80085f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <hci_le_read_phy+0xc4>
    return resp.Status;
 8008606:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800860a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	e016      	b.n	8008640 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8008612:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008616:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800861a:	78da      	ldrb	r2, [r3, #3]
 800861c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8008628:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800862c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008630:	791a      	ldrb	r2, [r3, #4]
 8008632:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008636:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800864a:	b590      	push	{r4, r7, lr}
 800864c:	b0cd      	sub	sp, #308	; 0x134
 800864e:	af00      	add	r7, sp, #0
 8008650:	4604      	mov	r4, r0
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800865e:	4622      	mov	r2, r4
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800866a:	4602      	mov	r2, r0
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008672:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008676:	460a      	mov	r2, r1
 8008678:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800867a:	f107 0310 	add.w	r3, r7, #16
 800867e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008686:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008698:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800869c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a8:	3301      	adds	r3, #1
 80086aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80086ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80086ba:	7812      	ldrb	r2, [r2, #0]
 80086bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80086be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c2:	3301      	adds	r3, #1
 80086c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80086c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086d0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80086d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086e6:	2218      	movs	r2, #24
 80086e8:	2100      	movs	r1, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fcb9 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x08;
 80086f0:	2308      	movs	r3, #8
 80086f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80086f6:	2331      	movs	r3, #49	; 0x31
 80086f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086fc:	f107 0310 	add.w	r3, r7, #16
 8008700:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008708:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800870c:	f107 030f 	add.w	r3, r7, #15
 8008710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008714:	2301      	movs	r3, #1
 8008716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800871a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f975 	bl	8008a10 <hci_send_req>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	da01      	bge.n	8008730 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800872c:	23ff      	movs	r3, #255	; 0xff
 800872e:	e004      	b.n	800873a <hci_le_set_default_phy+0xf0>
  return status;
 8008730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008734:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008738:	781b      	ldrb	r3, [r3, #0]
}
 800873a:	4618      	mov	r0, r3
 800873c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}

08008744 <hci_le_set_phy>:
tBleStatus hci_le_set_phy( uint16_t Connection_Handle,
                           uint8_t ALL_PHYS,
                           uint8_t TX_PHYS,
                           uint8_t RX_PHYS,
                           uint16_t PHY_options )
{
 8008744:	b5b0      	push	{r4, r5, r7, lr}
 8008746:	b0cc      	sub	sp, #304	; 0x130
 8008748:	af00      	add	r7, sp, #0
 800874a:	4605      	mov	r5, r0
 800874c:	460c      	mov	r4, r1
 800874e:	4610      	mov	r0, r2
 8008750:	4619      	mov	r1, r3
 8008752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008756:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800875a:	462a      	mov	r2, r5
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008766:	4622      	mov	r2, r4
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008772:	4602      	mov	r2, r0
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800877e:	460a      	mov	r2, r1
 8008780:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_phy_cp0 *cp0 = (hci_le_set_phy_cp0*)(cmd_buffer);
 8008782:	f107 0310 	add.w	r3, r7, #16
 8008786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800878a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800879c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087a4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087a8:	8812      	ldrh	r2, [r2, #0]
 80087aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087b0:	3302      	adds	r3, #2
 80087b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80087b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087be:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80087c2:	7812      	ldrb	r2, [r2, #0]
 80087c4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ca:	3301      	adds	r3, #1
 80087cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80087e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e4:	3301      	adds	r3, #1
 80087e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80087ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087f2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80087fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087fe:	3301      	adds	r3, #1
 8008800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PHY_options = PHY_options;
 8008804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008808:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800880c:	f8a3 2005 	strh.w	r2, [r3, #5]
  index_input += 2;
 8008810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008814:	3302      	adds	r3, #2
 8008816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800881a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800881e:	2218      	movs	r2, #24
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fc1d 	bl	8009062 <Osal_MemSet>
  rq.ogf = 0x08;
 8008828:	2308      	movs	r3, #8
 800882a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x032;
 800882e:	2332      	movs	r3, #50	; 0x32
 8008830:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008834:	230f      	movs	r3, #15
 8008836:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800883a:	f107 0310 	add.w	r3, r7, #16
 800883e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008846:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800884a:	f107 030f 	add.w	r3, r7, #15
 800884e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f8d6 	bl	8008a10 <hci_send_req>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	da01      	bge.n	800886e <hci_le_set_phy+0x12a>
    return BLE_STATUS_TIMEOUT;
 800886a:	23ff      	movs	r3, #255	; 0xff
 800886c:	e004      	b.n	8008878 <hci_le_set_phy+0x134>
  return status;
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008876:	781b      	ldrb	r3, [r3, #0]
}
 8008878:	4618      	mov	r0, r3
 800887a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800887e:	46bd      	mov	sp, r7
 8008880:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008884 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800888a:	2204      	movs	r2, #4
 800888c:	2100      	movs	r1, #0
 800888e:	4816      	ldr	r0, [pc, #88]	; (80088e8 <DIS_Init+0x64>)
 8008890:	f001 fd4a 	bl	800a328 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008894:	f641 030a 	movw	r3, #6154	; 0x180a
 8008898:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800889a:	1d39      	adds	r1, r7, #4
 800889c:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <DIS_Init+0x64>)
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	2303      	movs	r3, #3
 80088a2:	2201      	movs	r2, #1
 80088a4:	2001      	movs	r0, #1
 80088a6:	f7ff fa0e 	bl	8007cc6 <aci_gatt_add_service>
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 80088ae:	f642 2329 	movw	r3, #10793	; 0x2a29
 80088b2:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <DIS_Init+0x64>)
 80088b6:	8818      	ldrh	r0, [r3, #0]
 80088b8:	1d3a      	adds	r2, r7, #4
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <DIS_Init+0x68>)
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	2301      	movs	r3, #1
 80088c0:	9304      	str	r3, [sp, #16]
 80088c2:	230a      	movs	r3, #10
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	2300      	movs	r3, #0
 80088c8:	9302      	str	r3, [sp, #8]
 80088ca:	2300      	movs	r3, #0
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	2302      	movs	r3, #2
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	2320      	movs	r3, #32
 80088d4:	2101      	movs	r1, #1
 80088d6:	f7ff facc 	bl	8007e72 <aci_gatt_add_char>
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 80088de:	bf00      	nop
}
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000038 	.word	0x20000038
 80088ec:	2000003a 	.word	0x2000003a

080088f0 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	f642 2229 	movw	r2, #10793	; 0x2a29
 8008902:	4293      	cmp	r3, r2
 8008904:	d10f      	bne.n	8008926 <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <DIS_UpdateChar+0x48>)
 8008908:	8818      	ldrh	r0, [r3, #0]
 800890a:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <DIS_UpdateChar+0x48>)
 800890c:	8859      	ldrh	r1, [r3, #2]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	2200      	movs	r2, #0
 800891c:	f7ff fbb1 	bl	8008082 <aci_gatt_update_char_value>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
      break;
 8008924:	e002      	b.n	800892c <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = BLE_STATUS_ERROR;
 8008926:	2397      	movs	r3, #151	; 0x97
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	bf00      	nop
  }

  return return_value;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000038 	.word	0x20000038

0800893c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	4a08      	ldr	r2, [pc, #32]	; (800896c <hci_init+0x30>)
 800894c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <hci_init+0x34>)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008954:	4806      	ldr	r0, [pc, #24]	; (8008970 <hci_init+0x34>)
 8008956:	f000 f973 	bl	8008c40 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f8d4 	bl	8008b0c <TlInit>

  return;
 8008964:	bf00      	nop
}
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000594 	.word	0x20000594
 8008970:	2000056c 	.word	0x2000056c

08008974 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800897a:	4822      	ldr	r0, [pc, #136]	; (8008a04 <hci_user_evt_proc+0x90>)
 800897c:	f000 fde0 	bl	8009540 <LST_is_empty>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d12b      	bne.n	80089de <hci_user_evt_proc+0x6a>
 8008986:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <hci_user_evt_proc+0x94>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d027      	beq.n	80089de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800898e:	f107 030c 	add.w	r3, r7, #12
 8008992:	4619      	mov	r1, r3
 8008994:	481b      	ldr	r0, [pc, #108]	; (8008a04 <hci_user_evt_proc+0x90>)
 8008996:	f000 fe62 	bl	800965e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <hci_user_evt_proc+0x98>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00c      	beq.n	80089bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80089a6:	2301      	movs	r3, #1
 80089a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <hci_user_evt_proc+0x98>)
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	1d3a      	adds	r2, r7, #4
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80089b4:	793a      	ldrb	r2, [r7, #4]
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <hci_user_evt_proc+0x94>)
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80089bc:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <hci_user_evt_proc+0x94>)
 80089be:	2201      	movs	r2, #1
 80089c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <hci_user_evt_proc+0x94>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f8ff 	bl	8009bd0 <TL_MM_EvtDone>
 80089d2:	e004      	b.n	80089de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4619      	mov	r1, r3
 80089d8:	480a      	ldr	r0, [pc, #40]	; (8008a04 <hci_user_evt_proc+0x90>)
 80089da:	f000 fdd3 	bl	8009584 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80089de:	4809      	ldr	r0, [pc, #36]	; (8008a04 <hci_user_evt_proc+0x90>)
 80089e0:	f000 fdae 	bl	8009540 <LST_is_empty>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d107      	bne.n	80089fa <hci_user_evt_proc+0x86>
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <hci_user_evt_proc+0x94>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80089f2:	4804      	ldr	r0, [pc, #16]	; (8008a04 <hci_user_evt_proc+0x90>)
 80089f4:	f7f9 ff2f 	bl	8002856 <hci_notify_asynch_evt>
  }


  return;
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
}
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000040 	.word	0x20000040
 8008a08:	2000004c 	.word	0x2000004c
 8008a0c:	2000056c 	.word	0x2000056c

08008a10 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f000 f8cb 	bl	8008bb8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008a22:	2300      	movs	r3, #0
 8008a24:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	b21b      	sxth	r3, r3
 8008a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a30:	b21a      	sxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	029b      	lsls	r3, r3, #10
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b21b      	sxth	r3, r3
 8008a3e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	b2d9      	uxtb	r1, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	8bbb      	ldrh	r3, [r7, #28]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f88d 	bl	8008b6c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008a52:	e04e      	b.n	8008af2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008a54:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008a58:	f7f9 ff14 	bl	8002884 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008a5c:	e043      	b.n	8008ae6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	4619      	mov	r1, r3
 8008a64:	4828      	ldr	r0, [pc, #160]	; (8008b08 <hci_send_req+0xf8>)
 8008a66:	f000 fdfa 	bl	800965e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7a5b      	ldrb	r3, [r3, #9]
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d114      	bne.n	8008a9c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	330b      	adds	r3, #11
 8008a76:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	885b      	ldrh	r3, [r3, #2]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8bba      	ldrh	r2, [r7, #28]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d104      	bne.n	8008a8e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	7812      	ldrb	r2, [r2, #0]
 8008a8c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d027      	beq.n	8008ae6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008a96:	2301      	movs	r3, #1
 8008a98:	77fb      	strb	r3, [r7, #31]
 8008a9a:	e024      	b.n	8008ae6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	330b      	adds	r3, #11
 8008aa0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8bba      	ldrh	r2, [r7, #28]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d114      	bne.n	8008ada <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	7a9b      	ldrb	r3, [r3, #10]
 8008ab4:	3b03      	subs	r3, #3
 8008ab6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	695a      	ldr	r2, [r3, #20]
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	bfa8      	it	ge
 8008ac2:	461a      	movge	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6918      	ldr	r0, [r3, #16]
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	1cd9      	adds	r1, r3, #3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f001 fc19 	bl	800a30c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <hci_send_req+0xf8>)
 8008ae8:	f000 fd2a 	bl	8009540 <LST_is_empty>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0b5      	beq.n	8008a5e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0ad      	beq.n	8008a54 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008af8:	2001      	movs	r0, #1
 8008afa:	f000 f85d 	bl	8008bb8 <NotifyCmdStatus>

  return 0;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	2000058c 	.word	0x2000058c

08008b0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008b14:	480f      	ldr	r0, [pc, #60]	; (8008b54 <TlInit+0x48>)
 8008b16:	f000 fd03 	bl	8009520 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008b1a:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <TlInit+0x4c>)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008b20:	480e      	ldr	r0, [pc, #56]	; (8008b5c <TlInit+0x50>)
 8008b22:	f000 fcfd 	bl	8009520 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008b26:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <TlInit+0x54>)
 8008b28:	2201      	movs	r2, #1
 8008b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <TlInit+0x58>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <TlInit+0x5c>)
 8008b3a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008b3c:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <TlInit+0x58>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f107 0208 	add.w	r2, r7, #8
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
  }

  return;
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
}
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	2000058c 	.word	0x2000058c
 8008b58:	20000048 	.word	0x20000048
 8008b5c:	20000040 	.word	0x20000040
 8008b60:	2000004c 	.word	0x2000004c
 8008b64:	2000056c 	.word	0x2000056c
 8008b68:	08008bf9 	.word	0x08008bf9

08008b6c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	603a      	str	r2, [r7, #0]
 8008b76:	80fb      	strh	r3, [r7, #6]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <SendCmd+0x44>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <SendCmd+0x44>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	797a      	ldrb	r2, [r7, #5]
 8008b8c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008b8e:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <SendCmd+0x44>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	797a      	ldrb	r2, [r7, #5]
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 fbb7 	bl	800a30c <memcpy>

  hciContext.io.Send(0,0);
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <SendCmd+0x48>)
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4798      	blx	r3

  return;
 8008ba8:	bf00      	nop
}
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20000048 	.word	0x20000048
 8008bb4:	2000056c 	.word	0x2000056c

08008bb8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d108      	bne.n	8008bda <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <NotifyCmdStatus+0x3c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00d      	beq.n	8008bec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008bd0:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <NotifyCmdStatus+0x3c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008bd8:	e008      	b.n	8008bec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008bda:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <NotifyCmdStatus+0x3c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008be2:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <NotifyCmdStatus+0x3c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2001      	movs	r0, #1
 8008be8:	4798      	blx	r3
  return;
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
}
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000594 	.word	0x20000594

08008bf8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7a5b      	ldrb	r3, [r3, #9]
 8008c04:	2b0f      	cmp	r3, #15
 8008c06:	d003      	beq.n	8008c10 <TlEvtReceived+0x18>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7a5b      	ldrb	r3, [r3, #9]
 8008c0c:	2b0e      	cmp	r3, #14
 8008c0e:	d107      	bne.n	8008c20 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	4809      	ldr	r0, [pc, #36]	; (8008c38 <TlEvtReceived+0x40>)
 8008c14:	f000 fcdc 	bl	80095d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f7f9 fe28 	bl	800286e <hci_cmd_resp_release>
 8008c1e:	e006      	b.n	8008c2e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4806      	ldr	r0, [pc, #24]	; (8008c3c <TlEvtReceived+0x44>)
 8008c24:	f000 fcd4 	bl	80095d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008c28:	4804      	ldr	r0, [pc, #16]	; (8008c3c <TlEvtReceived+0x44>)
 8008c2a:	f7f9 fe14 	bl	8002856 <hci_notify_asynch_evt>
  }

  return;
 8008c2e:	bf00      	nop
}
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000058c 	.word	0x2000058c
 8008c3c:	20000040 	.word	0x20000040

08008c40 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a05      	ldr	r2, [pc, #20]	; (8008c60 <hci_register_io_bus+0x20>)
 8008c4c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a04      	ldr	r2, [pc, #16]	; (8008c64 <hci_register_io_bus+0x24>)
 8008c52:	611a      	str	r2, [r3, #16]

  return;
 8008c54:	bf00      	nop
}
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	08009949 	.word	0x08009949
 8008c64:	080099b1 	.word	0x080099b1

08008c68 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2bff      	cmp	r3, #255	; 0xff
 8008c82:	d174      	bne.n	8008d6e <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	3302      	adds	r3, #2
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f640 4201 	movw	r2, #3073	; 0xc01
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d03f      	beq.n	8008d18 <HeartRate_Event_Handler+0xb0>
 8008c98:	f640 4213 	movw	r2, #3091	; 0xc13
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d160      	bne.n	8008d62 <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	4b33      	ldr	r3, [pc, #204]	; (8008d7c <HeartRate_Event_Handler+0x114>)
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d156      	bne.n	8008d66 <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	795b      	ldrb	r3, [r3, #5]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d117      	bne.n	8008cf6 <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b298      	uxth	r0, r3
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	885b      	ldrh	r3, [r3, #2]
 8008cd0:	b299      	uxth	r1, r3
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008cda:	9201      	str	r2, [sp, #4]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f7ff fa77 	bl	80081d4 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f9 fe1e 	bl	8002930 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 8008cf4:	e037      	b.n	8008d66 <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b298      	uxth	r0, r3
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	885b      	ldrh	r3, [r3, #2]
 8008d00:	b299      	uxth	r1, r3
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008d0a:	9201      	str	r2, [sp, #4]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2380      	movs	r3, #128	; 0x80
 8008d10:	2201      	movs	r2, #1
 8008d12:	f7ff fa5f 	bl	80081d4 <aci_gatt_write_resp>
        break;
 8008d16:	e026      	b.n	8008d66 <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <HeartRate_Event_Handler+0x114>)
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d11c      	bne.n	8008d6a <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	7a1b      	ldrb	r3, [r3, #8]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 8008d42:	2301      	movs	r3, #1
 8008d44:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008d46:	f107 030c 	add.w	r3, r7, #12
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f9 fdf0 	bl	8002930 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 8008d50:	e00b      	b.n	8008d6a <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 8008d52:	2302      	movs	r3, #2
 8008d54:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008d56:	f107 030c 	add.w	r3, r7, #12
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f9 fde8 	bl	8002930 <HRS_Notification>
        break;
 8008d60:	e003      	b.n	8008d6a <HeartRate_Event_Handler+0x102>

        default:
          break;
 8008d62:	bf00      	nop
 8008d64:	e004      	b.n	8008d70 <HeartRate_Event_Handler+0x108>
        break;
 8008d66:	bf00      	nop
 8008d68:	e002      	b.n	8008d70 <HeartRate_Event_Handler+0x108>
        break;
 8008d6a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008d6c:	e000      	b.n	8008d70 <HeartRate_Event_Handler+0x108>

    default:
      break;
 8008d6e:	bf00      	nop
  }

  return(return_value);
 8008d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 8008d74:	4618      	mov	r0, r3
 8008d76:	3730      	adds	r7, #48	; 0x30
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20000050 	.word	0x20000050

08008d80 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <Update_Char_BodySensorLocation+0x30>)
 8008d8e:	8818      	ldrh	r0, [r3, #0]
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <Update_Char_BodySensorLocation+0x30>)
 8008d92:	8899      	ldrh	r1, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7ff f971 	bl	8008082 <aci_gatt_update_char_value>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000050 	.word	0x20000050

08008db4 <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	753b      	strb	r3, [r7, #20]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7a5b      	ldrb	r3, [r3, #9]
 8008dc4:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	7a5b      	ldrb	r3, [r3, #9]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d018      	beq.n	8008e08 <Update_Char_Measurement+0x54>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	881a      	ldrh	r2, [r3, #0]
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	3318      	adds	r3, #24
 8008de0:	443b      	add	r3, r7
 8008de2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	3301      	adds	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	3318      	adds	r3, #24
 8008dfa:	443b      	add	r3, r7
 8008dfc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	3301      	adds	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
 8008e06:	e00a      	b.n	8008e1e <Update_Char_Measurement+0x6a>
  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	881a      	ldrh	r2, [r3, #0]
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	3318      	adds	r3, #24
 8008e12:	443b      	add	r3, r7
 8008e14:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	7a5b      	ldrb	r3, [r3, #9]
 8008e22:	f003 0308 	and.w	r3, r3, #8
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d017      	beq.n	8008e5a <Update_Char_Measurement+0xa6>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	885a      	ldrh	r2, [r3, #2]
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	3318      	adds	r3, #24
 8008e34:	443b      	add	r3, r7
 8008e36:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	0a1b      	lsrs	r3, r3, #8
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	443b      	add	r3, r7
 8008e50:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	3301      	adds	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7a5b      	ldrb	r3, [r3, #9]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d048      	beq.n	8008ef8 <Update_Char_Measurement+0x144>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	7a5b      	ldrb	r3, [r3, #9]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00d      	beq.n	8008e8e <Update_Char_Measurement+0xda>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7a5b      	ldrb	r3, [r3, #9]
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <Update_Char_Measurement+0xd2>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7a1b      	ldrb	r3, [r3, #8]
 8008e82:	757b      	strb	r3, [r7, #21]
 8008e84:	e010      	b.n	8008ea8 <Update_Char_Measurement+0xf4>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7a1b      	ldrb	r3, [r3, #8]
 8008e8a:	757b      	strb	r3, [r7, #21]
 8008e8c:	e00c      	b.n	8008ea8 <Update_Char_Measurement+0xf4>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7a5b      	ldrb	r3, [r3, #9]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <Update_Char_Measurement+0xee>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7a1b      	ldrb	r3, [r3, #8]
 8008e9e:	757b      	strb	r3, [r7, #21]
 8008ea0:	e002      	b.n	8008ea8 <Update_Char_Measurement+0xf4>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7a1b      	ldrb	r3, [r3, #8]
 8008ea6:	757b      	strb	r3, [r7, #21]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75bb      	strb	r3, [r7, #22]
 8008eac:	e020      	b.n	8008ef0 <Update_Char_Measurement+0x13c>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 8008eae:	7dbb      	ldrb	r3, [r7, #22]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	889a      	ldrh	r2, [r3, #4]
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	443b      	add	r3, r7
 8008ec0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 8008eca:	7dbb      	ldrb	r3, [r7, #22]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	4413      	add	r3, r2
 8008ed2:	889b      	ldrh	r3, [r3, #4]
 8008ed4:	0a1b      	lsrs	r3, r3, #8
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	3318      	adds	r3, #24
 8008ede:	443b      	add	r3, r7
 8008ee0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 8008eea:	7dbb      	ldrb	r3, [r7, #22]
 8008eec:	3301      	adds	r3, #1
 8008eee:	75bb      	strb	r3, [r7, #22]
 8008ef0:	7dba      	ldrb	r2, [r7, #22]
 8008ef2:	7d7b      	ldrb	r3, [r7, #21]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3da      	bcc.n	8008eae <Update_Char_Measurement+0xfa>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <Update_Char_Measurement+0x16c>)
 8008efa:	8818      	ldrh	r0, [r3, #0]
 8008efc:	4b08      	ldr	r3, [pc, #32]	; (8008f20 <Update_Char_Measurement+0x16c>)
 8008efe:	8859      	ldrh	r1, [r3, #2]
 8008f00:	7dfa      	ldrb	r2, [r7, #23]
 8008f02:	f107 030c 	add.w	r3, r7, #12
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f7ff f8b9 	bl	8008082 <aci_gatt_update_char_value>
 8008f10:	4603      	mov	r3, r0
 8008f12:	753b      	strb	r3, [r7, #20]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 8008f14:	7d3b      	ldrb	r3, [r7, #20]
}/* end Update_Char_Measurement() */
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000050 	.word	0x20000050

08008f24 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 8008f2e:	482e      	ldr	r0, [pc, #184]	; (8008fe8 <HRS_Init+0xc4>)
 8008f30:	f000 fc5c 	bl	80097ec <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 8008f34:	f641 030d 	movw	r3, #6157	; 0x180d
 8008f38:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008f3a:	1d39      	adds	r1, r7, #4
 8008f3c:	4b2b      	ldr	r3, [pc, #172]	; (8008fec <HRS_Init+0xc8>)
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	2308      	movs	r3, #8
 8008f42:	2201      	movs	r2, #1
 8008f44:	2001      	movs	r0, #1
 8008f46:	f7fe febe 	bl	8007cc6 <aci_gatt_add_service>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 8008f4e:	f642 2337 	movw	r3, #10807	; 0x2a37
 8008f52:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008f54:	4b25      	ldr	r3, [pc, #148]	; (8008fec <HRS_Init+0xc8>)
 8008f56:	8818      	ldrh	r0, [r3, #0]
 8008f58:	1d3a      	adds	r2, r7, #4
 8008f5a:	4b25      	ldr	r3, [pc, #148]	; (8008ff0 <HRS_Init+0xcc>)
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	230a      	movs	r3, #10
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	2310      	movs	r3, #16
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	2307      	movs	r3, #7
 8008f74:	2101      	movs	r1, #1
 8008f76:	f7fe ff7c 	bl	8007e72 <aci_gatt_add_char>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8008f7e:	f642 2338 	movw	r3, #10808	; 0x2a38
 8008f82:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008f84:	4b19      	ldr	r3, [pc, #100]	; (8008fec <HRS_Init+0xc8>)
 8008f86:	8818      	ldrh	r0, [r3, #0]
 8008f88:	1d3a      	adds	r2, r7, #4
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <HRS_Init+0xd0>)
 8008f8c:	9305      	str	r3, [sp, #20]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	230a      	movs	r3, #10
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	f7fe ff64 	bl	8007e72 <aci_gatt_add_char>
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8008fae:	f642 2339 	movw	r3, #10809	; 0x2a39
 8008fb2:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <HRS_Init+0xc8>)
 8008fb6:	8818      	ldrh	r0, [r3, #0]
 8008fb8:	1d3a      	adds	r2, r7, #4
 8008fba:	4b0f      	ldr	r3, [pc, #60]	; (8008ff8 <HRS_Init+0xd4>)
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	2308      	movs	r3, #8
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f7fe ff4c 	bl	8007e72 <aci_gatt_add_char>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 8008fde:	bf00      	nop
}
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	08008c69 	.word	0x08008c69
 8008fec:	20000050 	.word	0x20000050
 8008ff0:	20000052 	.word	0x20000052
 8008ff4:	20000054 	.word	0x20000054
 8008ff8:	20000056 	.word	0x20000056

08008ffc <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800900c:	88fb      	ldrh	r3, [r7, #6]
 800900e:	f642 2237 	movw	r2, #10807	; 0x2a37
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HRS_UpdateChar+0x2e>
 8009016:	f642 2238 	movw	r2, #10808	; 0x2a38
 800901a:	4293      	cmp	r3, r2
 800901c:	d10b      	bne.n	8009036 <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 800901e:	6838      	ldr	r0, [r7, #0]
 8009020:	f7ff feae 	bl	8008d80 <Update_Char_BodySensorLocation>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]
      break;
 8009028:	e006      	b.n	8009038 <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 800902a:	6838      	ldr	r0, [r7, #0]
 800902c:	f7ff fec2 	bl	8008db4 <Update_Char_Measurement>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
      break;
 8009034:	e000      	b.n	8009038 <HRS_UpdateChar+0x3c>

    default:
      break;
 8009036:	bf00      	nop
  }

  return return_value;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f001 f95a 	bl	800a30c <memcpy>
 8009058:	4603      	mov	r3, r0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f001 f958 	bl	800a328 <memset>
 8009078:	4603      	mov	r3, r0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800908e:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <OTP_Read+0x48>)
 8009090:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009092:	e002      	b.n	800909a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3b08      	subs	r3, #8
 8009098:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3307      	adds	r3, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	79fa      	ldrb	r2, [r7, #7]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d003      	beq.n	80090ae <OTP_Read+0x2a>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <OTP_Read+0x4c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d1f2      	bne.n	8009094 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3307      	adds	r3, #7
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	79fa      	ldrb	r2, [r7, #7]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d001      	beq.n	80090be <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	1fff73f8 	.word	0x1fff73f8
 80090d0:	1fff7000 	.word	0x1fff7000

080090d4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	212e      	movs	r1, #46	; 0x2e
 80090ec:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80090f0:	f000 f94c 	bl	800938c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	330b      	adds	r3, #11
 80090f8:	78db      	ldrb	r3, [r3, #3]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b088      	sub	sp, #32
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800910a:	f107 030c 	add.w	r3, r7, #12
 800910e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	210f      	movs	r1, #15
 800911a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800911e:	f000 f935 	bl	800938c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	330b      	adds	r3, #11
 8009126:	78db      	ldrb	r3, [r3, #3]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	2110      	movs	r1, #16
 8009144:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009148:	f000 f920 	bl	800938c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	330b      	adds	r3, #11
 8009150:	78db      	ldrb	r3, [r3, #3]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3720      	adds	r7, #32
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800915c:	b480      	push	{r7}
 800915e:	b08b      	sub	sp, #44	; 0x2c
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009184:	4b4a      	ldr	r3, [pc, #296]	; (80092b0 <SHCI_GetWirelessFwInfo+0x154>)
 8009186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009188:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800918c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009196:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a44      	ldr	r2, [pc, #272]	; (80092b4 <SHCI_GetWirelessFwInfo+0x158>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d10f      	bne.n	80091c8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e01a      	b.n	80091fe <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80091d0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80091d4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	0e1b      	lsrs	r3, r3, #24
 8009202:	b2da      	uxtb	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	0c1b      	lsrs	r3, r3, #16
 800920c:	b2da      	uxtb	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	0a1b      	lsrs	r3, r3, #8
 8009216:	b2da      	uxtb	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	091b      	lsrs	r3, r3, #4
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 030f 	and.w	r3, r3, #15
 8009234:	b2da      	uxtb	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	0e1b      	lsrs	r3, r3, #24
 800923e:	b2da      	uxtb	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	b2da      	uxtb	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	b2da      	uxtb	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	0e1b      	lsrs	r3, r3, #24
 800926c:	b2da      	uxtb	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	0c1b      	lsrs	r3, r3, #16
 8009276:	b2da      	uxtb	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b2da      	uxtb	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	0e1b      	lsrs	r3, r3, #24
 800928a:	b2da      	uxtb	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	0c1b      	lsrs	r3, r3, #16
 8009294:	b2da      	uxtb	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	b2da      	uxtb	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	372c      	adds	r7, #44	; 0x2c
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	58004000 	.word	0x58004000
 80092b4:	a94656b9 	.word	0xa94656b9

080092b8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <shci_init+0x30>)
 80092c8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80092ca:	4a08      	ldr	r2, [pc, #32]	; (80092ec <shci_init+0x34>)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80092d0:	4806      	ldr	r0, [pc, #24]	; (80092ec <shci_init+0x34>)
 80092d2:	f000 f911 	bl	80094f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f894 	bl	8009408 <TlInit>

  return;
 80092e0:	bf00      	nop
}
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200005b8 	.word	0x200005b8
 80092ec:	20000598 	.word	0x20000598

080092f0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80092f6:	4822      	ldr	r0, [pc, #136]	; (8009380 <shci_user_evt_proc+0x90>)
 80092f8:	f000 f922 	bl	8009540 <LST_is_empty>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d12b      	bne.n	800935a <shci_user_evt_proc+0x6a>
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <shci_user_evt_proc+0x94>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d027      	beq.n	800935a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800930a:	f107 030c 	add.w	r3, r7, #12
 800930e:	4619      	mov	r1, r3
 8009310:	481b      	ldr	r0, [pc, #108]	; (8009380 <shci_user_evt_proc+0x90>)
 8009312:	f000 f9a4 	bl	800965e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009316:	4b1c      	ldr	r3, [pc, #112]	; (8009388 <shci_user_evt_proc+0x98>)
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009322:	2301      	movs	r3, #1
 8009324:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <shci_user_evt_proc+0x98>)
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	1d3a      	adds	r2, r7, #4
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009330:	793a      	ldrb	r2, [r7, #4]
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <shci_user_evt_proc+0x94>)
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	e002      	b.n	800933e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009338:	4b12      	ldr	r3, [pc, #72]	; (8009384 <shci_user_evt_proc+0x94>)
 800933a:	2201      	movs	r2, #1
 800933c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800933e:	4b11      	ldr	r3, [pc, #68]	; (8009384 <shci_user_evt_proc+0x94>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fc41 	bl	8009bd0 <TL_MM_EvtDone>
 800934e:	e004      	b.n	800935a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4619      	mov	r1, r3
 8009354:	480a      	ldr	r0, [pc, #40]	; (8009380 <shci_user_evt_proc+0x90>)
 8009356:	f000 f915 	bl	8009584 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800935a:	4809      	ldr	r0, [pc, #36]	; (8009380 <shci_user_evt_proc+0x90>)
 800935c:	f000 f8f0 	bl	8009540 <LST_is_empty>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d107      	bne.n	8009376 <shci_user_evt_proc+0x86>
 8009366:	4b07      	ldr	r3, [pc, #28]	; (8009384 <shci_user_evt_proc+0x94>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800936e:	4804      	ldr	r0, [pc, #16]	; (8009380 <shci_user_evt_proc+0x90>)
 8009370:	f7f7 fab6 	bl	80008e0 <shci_notify_asynch_evt>
  }


  return;
 8009374:	bf00      	nop
 8009376:	bf00      	nop
}
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	2000007c 	.word	0x2000007c
 8009384:	2000008c 	.word	0x2000008c
 8009388:	20000598 	.word	0x20000598

0800938c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60ba      	str	r2, [r7, #8]
 8009394:	607b      	str	r3, [r7, #4]
 8009396:	4603      	mov	r3, r0
 8009398:	81fb      	strh	r3, [r7, #14]
 800939a:	460b      	mov	r3, r1
 800939c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800939e:	2000      	movs	r0, #0
 80093a0:	f000 f864 	bl	800946c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <shci_send+0x74>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	89fa      	ldrh	r2, [r7, #14]
 80093aa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <shci_send+0x74>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	7b7a      	ldrb	r2, [r7, #13]
 80093b4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <shci_send+0x74>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	330c      	adds	r3, #12
 80093bc:	7b7a      	ldrb	r2, [r7, #13]
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 ffa3 	bl	800a30c <memcpy>

  shciContext.io.Send(0,0);
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <shci_send+0x78>)
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2100      	movs	r1, #0
 80093cc:	2000      	movs	r0, #0
 80093ce:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80093d0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80093d4:	f7f7 fa9b 	bl	800090e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0008 	add.w	r0, r3, #8
 80093de:	4b08      	ldr	r3, [pc, #32]	; (8009400 <shci_send+0x74>)
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <shci_send+0x74>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	789b      	ldrb	r3, [r3, #2]
 80093e8:	3303      	adds	r3, #3
 80093ea:	461a      	mov	r2, r3
 80093ec:	f000 ff8e 	bl	800a30c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80093f0:	2001      	movs	r0, #1
 80093f2:	f000 f83b 	bl	800946c <Cmd_SetStatus>

  return;
 80093f6:	bf00      	nop
}
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000088 	.word	0x20000088
 8009404:	20000598 	.word	0x20000598

08009408 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009410:	4a10      	ldr	r2, [pc, #64]	; (8009454 <TlInit+0x4c>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009416:	4810      	ldr	r0, [pc, #64]	; (8009458 <TlInit+0x50>)
 8009418:	f000 f882 	bl	8009520 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800941c:	2001      	movs	r0, #1
 800941e:	f000 f825 	bl	800946c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009422:	4b0e      	ldr	r3, [pc, #56]	; (800945c <TlInit+0x54>)
 8009424:	2201      	movs	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009428:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <TlInit+0x58>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00c      	beq.n	800944a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009434:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <TlInit+0x5c>)
 8009436:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009438:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <TlInit+0x60>)
 800943a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <TlInit+0x58>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f107 020c 	add.w	r2, r7, #12
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
  }

  return;
 8009448:	bf00      	nop
 800944a:	bf00      	nop
}
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000088 	.word	0x20000088
 8009458:	2000007c 	.word	0x2000007c
 800945c:	2000008c 	.word	0x2000008c
 8009460:	20000598 	.word	0x20000598
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094d5 	.word	0x080094d5

0800946c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800947c:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <Cmd_SetStatus+0x48>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <Cmd_SetStatus+0x48>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2000      	movs	r0, #0
 800948a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <Cmd_SetStatus+0x4c>)
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009492:	e00b      	b.n	80094ac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009494:	4b08      	ldr	r3, [pc, #32]	; (80094b8 <Cmd_SetStatus+0x4c>)
 8009496:	2201      	movs	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <Cmd_SetStatus+0x48>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80094a2:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <Cmd_SetStatus+0x48>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2001      	movs	r0, #1
 80094a8:	4798      	blx	r3
  return;
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
}
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200005b8 	.word	0x200005b8
 80094b8:	20000084 	.word	0x20000084

080094bc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80094c4:	2000      	movs	r0, #0
 80094c6:	f7f7 fa17 	bl	80008f8 <shci_cmd_resp_release>

  return;
 80094ca:	bf00      	nop
}
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4805      	ldr	r0, [pc, #20]	; (80094f4 <TlUserEvtReceived+0x20>)
 80094e0:	f000 f876 	bl	80095d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80094e4:	4803      	ldr	r0, [pc, #12]	; (80094f4 <TlUserEvtReceived+0x20>)
 80094e6:	f7f7 f9fb 	bl	80008e0 <shci_notify_asynch_evt>

  return;
 80094ea:	bf00      	nop
}
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000007c 	.word	0x2000007c

080094f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a05      	ldr	r2, [pc, #20]	; (8009518 <shci_register_io_bus+0x20>)
 8009504:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a04      	ldr	r2, [pc, #16]	; (800951c <shci_register_io_bus+0x24>)
 800950a:	611a      	str	r2, [r3, #16]

  return;
 800950c:	bf00      	nop
}
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	08009a5d 	.word	0x08009a5d
 800951c:	08009ab1 	.word	0x08009ab1

08009520 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009548:	f3ef 8310 	mrs	r3, PRIMASK
 800954c:	60fb      	str	r3, [r7, #12]
  return(result);
 800954e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009552:	b672      	cpsid	i
}
 8009554:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d102      	bne.n	8009566 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	e001      	b.n	800956a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f383 8810 	msr	PRIMASK, r3
}
 8009574:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958e:	f3ef 8310 	mrs	r3, PRIMASK
 8009592:	60fb      	str	r3, [r7, #12]
  return(result);
 8009594:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009598:	b672      	cpsid	i
}
 800959a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	605a      	str	r2, [r3, #4]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095da:	f3ef 8310 	mrs	r3, PRIMASK
 80095de:	60fb      	str	r3, [r7, #12]
  return(result);
 80095e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095e4:	b672      	cpsid	i
}
 80095e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f383 8810 	msr	PRIMASK, r3
}
 800960e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009624:	f3ef 8310 	mrs	r3, PRIMASK
 8009628:	60fb      	str	r3, [r7, #12]
  return(result);
 800962a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800962c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800962e:	b672      	cpsid	i
}
 8009630:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6812      	ldr	r2, [r2, #0]
 800963a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6852      	ldr	r2, [r2, #4]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f383 8810 	msr	PRIMASK, r3
}
 8009650:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009668:	f3ef 8310 	mrs	r3, PRIMASK
 800966c:	60fb      	str	r3, [r7, #12]
  return(result);
 800966e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009670:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009672:	b672      	cpsid	i
}
 8009674:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff ffca 	bl	800961c <LST_remove_node>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f383 8810 	msr	PRIMASK, r3
}
 8009692:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  return;
 80096a0:	bf00      	nop
}
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80096aa:	b480      	push	{r7}
 80096ac:	af00      	add	r7, sp, #0
  return;
 80096ae:	bf00      	nop
}
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  return;
 80096bc:	bf00      	nop
}
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0
  return;
 80096ca:	bf00      	nop
}
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  return;
 80096d8:	bf00      	nop
}
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 80096e2:	b480      	push	{r7}
 80096e4:	af00      	add	r7, sp, #0
  return;
 80096e6:	bf00      	nop
}
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  return;
 80096f4:	bf00      	nop
}
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80096fe:	b480      	push	{r7}
 8009700:	af00      	add	r7, sp, #0
  return;
 8009702:	bf00      	nop
}
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  return;
 8009710:	bf00      	nop
}
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800971a:	b480      	push	{r7}
 800971c:	af00      	add	r7, sp, #0
  return;
 800971e:	bf00      	nop
}
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009728:	b480      	push	{r7}
 800972a:	af00      	add	r7, sp, #0
  return;
 800972c:	bf00      	nop
}
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009736:	b480      	push	{r7}
 8009738:	af00      	add	r7, sp, #0
  return;
 800973a:	bf00      	nop
}
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  return;
 8009748:	bf00      	nop
}
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009752:	b480      	push	{r7}
 8009754:	af00      	add	r7, sp, #0
  return;
 8009756:	bf00      	nop
}
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
  return;
 8009764:	bf00      	nop
}
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800976e:	b480      	push	{r7}
 8009770:	af00      	add	r7, sp, #0
  return;
 8009772:	bf00      	nop
}
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <SVCCTL_Init+0x18>)
 8009782:	2200      	movs	r2, #0
 8009784:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <SVCCTL_Init+0x1c>)
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800978c:	f000 f806 	bl	800979c <SVCCTL_SvcInit>

  return;
 8009790:	bf00      	nop
}
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000058 	.word	0x20000058
 8009798:	20000078 	.word	0x20000078

0800979c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  BAS_Init();
 80097a0:	f7ff ff7c 	bl	800969c <BAS_Init>

  BLS_Init();
 80097a4:	f7ff ff81 	bl	80096aa <BLS_Init>

  CRS_STM_Init();
 80097a8:	f7ff ff86 	bl	80096b8 <CRS_STM_Init>

  DIS_Init();
 80097ac:	f7ff f86a 	bl	8008884 <DIS_Init>

  EDS_STM_Init();
 80097b0:	f7ff ff89 	bl	80096c6 <EDS_STM_Init>

  HIDS_Init();
 80097b4:	f7ff ff8e 	bl	80096d4 <HIDS_Init>

  HRS_Init();
 80097b8:	f7ff fbb4 	bl	8008f24 <HRS_Init>

  HTS_Init();
 80097bc:	f7ff ff91 	bl	80096e2 <HTS_Init>

  IAS_Init();
 80097c0:	f7ff ff96 	bl	80096f0 <IAS_Init>

  LLS_Init();
 80097c4:	f7ff ff9b 	bl	80096fe <LLS_Init>

  TPS_Init();
 80097c8:	f7ff ffa0 	bl	800970c <TPS_Init>

  MOTENV_STM_Init();
 80097cc:	f7ff ffa5 	bl	800971a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80097d0:	f7ff ffaa 	bl	8009728 <P2PS_STM_Init>

  ZDD_STM_Init();
 80097d4:	f7ff ffaf 	bl	8009736 <ZDD_STM_Init>

  OTAS_STM_Init();
 80097d8:	f7ff ffb4 	bl	8009744 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80097dc:	f7ff ffc0 	bl	8009760 <BVOPUS_STM_Init>

  MESH_Init();
 80097e0:	f7ff ffb7 	bl	8009752 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80097e4:	f7ff ffc3 	bl	800976e <SVCCTL_InitCustomSvc>
  
  return;
 80097e8:	bf00      	nop
}
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <SVCCTL_RegisterSvcHandler+0x30>)
 80097f6:	7f1b      	ldrb	r3, [r3, #28]
 80097f8:	4619      	mov	r1, r3
 80097fa:	4a08      	ldr	r2, [pc, #32]	; (800981c <SVCCTL_RegisterSvcHandler+0x30>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <SVCCTL_RegisterSvcHandler+0x30>)
 8009804:	7f1b      	ldrb	r3, [r3, #28]
 8009806:	3301      	adds	r3, #1
 8009808:	b2da      	uxtb	r2, r3
 800980a:	4b04      	ldr	r3, [pc, #16]	; (800981c <SVCCTL_RegisterSvcHandler+0x30>)
 800980c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800980e:	bf00      	nop
}
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000058 	.word	0x20000058

08009820 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2bff      	cmp	r3, #255	; 0xff
 8009838:	d125      	bne.n	8009886 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3302      	adds	r3, #2
 800983e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800984a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800984e:	d118      	bne.n	8009882 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009850:	2300      	movs	r3, #0
 8009852:	757b      	strb	r3, [r7, #21]
 8009854:	e00d      	b.n	8009872 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009856:	7d7b      	ldrb	r3, [r7, #21]
 8009858:	4a1a      	ldr	r2, [pc, #104]	; (80098c4 <SVCCTL_UserEvtRx+0xa4>)
 800985a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d108      	bne.n	800987e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800986c:	7d7b      	ldrb	r3, [r7, #21]
 800986e:	3301      	adds	r3, #1
 8009870:	757b      	strb	r3, [r7, #21]
 8009872:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <SVCCTL_UserEvtRx+0xa4>)
 8009874:	7f1b      	ldrb	r3, [r3, #28]
 8009876:	7d7a      	ldrb	r2, [r7, #21]
 8009878:	429a      	cmp	r2, r3
 800987a:	d3ec      	bcc.n	8009856 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800987c:	e002      	b.n	8009884 <SVCCTL_UserEvtRx+0x64>
              break;
 800987e:	bf00      	nop
          break;
 8009880:	e000      	b.n	8009884 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009882:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009884:	e000      	b.n	8009888 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009886:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d00f      	beq.n	80098ae <SVCCTL_UserEvtRx+0x8e>
 800988e:	2b02      	cmp	r3, #2
 8009890:	dc10      	bgt.n	80098b4 <SVCCTL_UserEvtRx+0x94>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <SVCCTL_UserEvtRx+0x7c>
 8009896:	2b01      	cmp	r3, #1
 8009898:	d006      	beq.n	80098a8 <SVCCTL_UserEvtRx+0x88>
 800989a:	e00b      	b.n	80098b4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7f8 fced 	bl	800227c <SVCCTL_App_Notification>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75bb      	strb	r3, [r7, #22]
      break;
 80098a6:	e008      	b.n	80098ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75bb      	strb	r3, [r7, #22]
      break;
 80098ac:	e005      	b.n	80098ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75bb      	strb	r3, [r7, #22]
      break;
 80098b2:	e002      	b.n	80098ba <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75bb      	strb	r3, [r7, #22]
      break;
 80098b8:	bf00      	nop
  }

  return (return_status);
 80098ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000058 	.word	0x20000058

080098c8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80098cc:	f7f9 fa6e 	bl	8002dac <HW_IPCC_Enable>

  return;
 80098d0:	bf00      	nop
}
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <TL_Init>:


void TL_Init( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80098d8:	4b10      	ldr	r3, [pc, #64]	; (800991c <TL_Init+0x48>)
 80098da:	4a11      	ldr	r2, [pc, #68]	; (8009920 <TL_Init+0x4c>)
 80098dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <TL_Init+0x48>)
 80098e0:	4a10      	ldr	r2, [pc, #64]	; (8009924 <TL_Init+0x50>)
 80098e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80098e4:	4b0d      	ldr	r3, [pc, #52]	; (800991c <TL_Init+0x48>)
 80098e6:	4a10      	ldr	r2, [pc, #64]	; (8009928 <TL_Init+0x54>)
 80098e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80098ea:	4b0c      	ldr	r3, [pc, #48]	; (800991c <TL_Init+0x48>)
 80098ec:	4a0f      	ldr	r2, [pc, #60]	; (800992c <TL_Init+0x58>)
 80098ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80098f0:	4b0a      	ldr	r3, [pc, #40]	; (800991c <TL_Init+0x48>)
 80098f2:	4a0f      	ldr	r2, [pc, #60]	; (8009930 <TL_Init+0x5c>)
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <TL_Init+0x48>)
 80098f8:	4a0e      	ldr	r2, [pc, #56]	; (8009934 <TL_Init+0x60>)
 80098fa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <TL_Init+0x48>)
 80098fe:	4a0e      	ldr	r2, [pc, #56]	; (8009938 <TL_Init+0x64>)
 8009900:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <TL_Init+0x48>)
 8009904:	4a0d      	ldr	r2, [pc, #52]	; (800993c <TL_Init+0x68>)
 8009906:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <TL_Init+0x48>)
 800990a:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <TL_Init+0x6c>)
 800990c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800990e:	4b03      	ldr	r3, [pc, #12]	; (800991c <TL_Init+0x48>)
 8009910:	4a0c      	ldr	r2, [pc, #48]	; (8009944 <TL_Init+0x70>)
 8009912:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009914:	f7f9 fa5e 	bl	8002dd4 <HW_IPCC_Init>

  return;
 8009918:	bf00      	nop
}
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20030000 	.word	0x20030000
 8009920:	20030134 	.word	0x20030134
 8009924:	20030154 	.word	0x20030154
 8009928:	20030164 	.word	0x20030164
 800992c:	20030174 	.word	0x20030174
 8009930:	2003017c 	.word	0x2003017c
 8009934:	20030184 	.word	0x20030184
 8009938:	2003018c 	.word	0x2003018c
 800993c:	200301a8 	.word	0x200301a8
 8009940:	200301ac 	.word	0x200301ac
 8009944:	200301b8 	.word	0x200301b8

08009948 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009954:	4811      	ldr	r0, [pc, #68]	; (800999c <TL_BLE_Init+0x54>)
 8009956:	f7ff fde3 	bl	8009520 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800995a:	4b11      	ldr	r3, [pc, #68]	; (80099a0 <TL_BLE_Init+0x58>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4a0c      	ldr	r2, [pc, #48]	; (80099a4 <TL_BLE_Init+0x5c>)
 8009974:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a08      	ldr	r2, [pc, #32]	; (800999c <TL_BLE_Init+0x54>)
 800997a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800997c:	f7f9 fa40 	bl	8002e00 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a08      	ldr	r2, [pc, #32]	; (80099a8 <TL_BLE_Init+0x60>)
 8009986:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4a07      	ldr	r2, [pc, #28]	; (80099ac <TL_BLE_Init+0x64>)
 800998e:	6013      	str	r3, [r2, #0]

  return 0;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	200301d4 	.word	0x200301d4
 80099a0:	20030000 	.word	0x20030000
 80099a4:	20030a58 	.word	0x20030a58
 80099a8:	200005c4 	.word	0x200005c4
 80099ac:	200005c8 	.word	0x200005c8

080099b0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80099bc:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <TL_BLE_SendCmd+0x34>)
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80099c6:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <TL_BLE_SendCmd+0x34>)
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4619      	mov	r1, r3
 80099ce:	2001      	movs	r0, #1
 80099d0:	f000 f96c 	bl	8009cac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80099d4:	f7f9 fa1e 	bl	8002e14 <HW_IPCC_BLE_SendCmd>

  return 0;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20030000 	.word	0x20030000

080099e8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80099ee:	e01c      	b.n	8009a2a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80099f0:	1d3b      	adds	r3, r7, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4812      	ldr	r0, [pc, #72]	; (8009a40 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80099f6:	f7ff fe32 	bl	800965e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7a5b      	ldrb	r3, [r3, #9]
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d003      	beq.n	8009a0a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7a5b      	ldrb	r3, [r3, #9]
 8009a06:	2b0e      	cmp	r3, #14
 8009a08:	d105      	bne.n	8009a16 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	2002      	movs	r0, #2
 8009a10:	f000 f94c 	bl	8009cac <OutputDbgTrace>
 8009a14:	e004      	b.n	8009a20 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	2003      	movs	r0, #3
 8009a1c:	f000 f946 	bl	8009cac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4610      	mov	r0, r2
 8009a28:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009a2c:	f7ff fd88 	bl	8009540 <LST_is_empty>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0dc      	beq.n	80099f0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009a36:	bf00      	nop
}
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200301d4 	.word	0x200301d4
 8009a44:	200005c4 	.word	0x200005c4

08009a48 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4798      	blx	r3

  return;
 8009a52:	bf00      	nop
}
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200005c8 	.word	0x200005c8

08009a5c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009a68:	480d      	ldr	r0, [pc, #52]	; (8009aa0 <TL_SYS_Init+0x44>)
 8009a6a:	f7ff fd59 	bl	8009520 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <TL_SYS_Init+0x48>)
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4a08      	ldr	r2, [pc, #32]	; (8009aa0 <TL_SYS_Init+0x44>)
 8009a80:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009a82:	f7f9 f9e9 	bl	8002e58 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a07      	ldr	r2, [pc, #28]	; (8009aa8 <TL_SYS_Init+0x4c>)
 8009a8c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4a06      	ldr	r2, [pc, #24]	; (8009aac <TL_SYS_Init+0x50>)
 8009a94:	6013      	str	r3, [r2, #0]

  return 0;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	200301dc 	.word	0x200301dc
 8009aa4:	20030000 	.word	0x20030000
 8009aa8:	200005cc 	.word	0x200005cc
 8009aac:	200005d0 	.word	0x200005d0

08009ab0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009abc:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <TL_SYS_SendCmd+0x34>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2210      	movs	r2, #16
 8009ac4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <TL_SYS_SendCmd+0x34>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	2004      	movs	r0, #4
 8009ad0:	f000 f8ec 	bl	8009cac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009ad4:	f7f9 f9ca 	bl	8002e6c <HW_IPCC_SYS_SendCmd>

  return 0;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20030000 	.word	0x20030000

08009ae8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	2005      	movs	r0, #5
 8009af6:	f000 f8d9 	bl	8009cac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009afa:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a03      	ldr	r2, [pc, #12]	; (8009b0c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009b00:	68d2      	ldr	r2, [r2, #12]
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3

  return;
 8009b08:	bf00      	nop
}
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20030000 	.word	0x20030000
 8009b10:	200005cc 	.word	0x200005cc

08009b14 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009b1a:	e00e      	b.n	8009b3a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	4619      	mov	r1, r3
 8009b20:	480b      	ldr	r0, [pc, #44]	; (8009b50 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009b22:	f7ff fd9c 	bl	800965e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	2006      	movs	r0, #6
 8009b2c:	f000 f8be 	bl	8009cac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <HW_IPCC_SYS_EvtNot+0x40>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	4610      	mov	r0, r2
 8009b38:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009b3a:	4805      	ldr	r0, [pc, #20]	; (8009b50 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009b3c:	f7ff fd00 	bl	8009540 <LST_is_empty>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0ea      	beq.n	8009b1c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009b46:	bf00      	nop
}
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	200301dc 	.word	0x200301dc
 8009b54:	200005d0 	.word	0x200005d0

08009b58 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009b60:	4817      	ldr	r0, [pc, #92]	; (8009bc0 <TL_MM_Init+0x68>)
 8009b62:	f7ff fcdd 	bl	8009520 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009b66:	4817      	ldr	r0, [pc, #92]	; (8009bc4 <TL_MM_Init+0x6c>)
 8009b68:	f7ff fcda 	bl	8009520 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009b6c:	4b16      	ldr	r3, [pc, #88]	; (8009bc8 <TL_MM_Init+0x70>)
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	4a16      	ldr	r2, [pc, #88]	; (8009bcc <TL_MM_Init+0x74>)
 8009b72:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009b74:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <TL_MM_Init+0x74>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6892      	ldr	r2, [r2, #8]
 8009b7c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <TL_MM_Init+0x74>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	68d2      	ldr	r2, [r2, #12]
 8009b86:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <TL_MM_Init+0x74>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a0c      	ldr	r2, [pc, #48]	; (8009bc0 <TL_MM_Init+0x68>)
 8009b8e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009b90:	4b0e      	ldr	r3, [pc, #56]	; (8009bcc <TL_MM_Init+0x74>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <TL_MM_Init+0x74>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <TL_MM_Init+0x74>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6912      	ldr	r2, [r2, #16]
 8009bac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009bae:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <TL_MM_Init+0x74>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6952      	ldr	r2, [r2, #20]
 8009bb6:	619a      	str	r2, [r3, #24]

  return;
 8009bb8:	bf00      	nop
}
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	200301c4 	.word	0x200301c4
 8009bc4:	200005bc 	.word	0x200005bc
 8009bc8:	20030000 	.word	0x20030000
 8009bcc:	200005d4 	.word	0x200005d4

08009bd0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	4807      	ldr	r0, [pc, #28]	; (8009bf8 <TL_MM_EvtDone+0x28>)
 8009bdc:	f7ff fcf8 	bl	80095d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	2000      	movs	r0, #0
 8009be4:	f000 f862 	bl	8009cac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009be8:	4804      	ldr	r0, [pc, #16]	; (8009bfc <TL_MM_EvtDone+0x2c>)
 8009bea:	f7f9 f965 	bl	8002eb8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009bee:	bf00      	nop
}
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	200005bc 	.word	0x200005bc
 8009bfc:	08009c01 	.word	0x08009c01

08009c00 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009c06:	e00c      	b.n	8009c22 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009c08:	1d3b      	adds	r3, r7, #4
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	480a      	ldr	r0, [pc, #40]	; (8009c38 <SendFreeBuf+0x38>)
 8009c0e:	f7ff fd26 	bl	800965e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <SendFreeBuf+0x3c>)
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff fcd7 	bl	80095d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009c22:	4805      	ldr	r0, [pc, #20]	; (8009c38 <SendFreeBuf+0x38>)
 8009c24:	f7ff fc8c 	bl	8009540 <LST_is_empty>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0ec      	beq.n	8009c08 <SendFreeBuf+0x8>
  }

  return;
 8009c2e:	bf00      	nop
}
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	200005bc 	.word	0x200005bc
 8009c3c:	20030000 	.word	0x20030000

08009c40 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009c44:	4805      	ldr	r0, [pc, #20]	; (8009c5c <TL_TRACES_Init+0x1c>)
 8009c46:	f7ff fc6b 	bl	8009520 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <TL_TRACES_Init+0x20>)
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	4a03      	ldr	r2, [pc, #12]	; (8009c5c <TL_TRACES_Init+0x1c>)
 8009c50:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009c52:	f7f9 f967 	bl	8002f24 <HW_IPCC_TRACES_Init>

  return;
 8009c56:	bf00      	nop
}
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200301cc 	.word	0x200301cc
 8009c60:	20030000 	.word	0x20030000

08009c64 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009c6a:	e008      	b.n	8009c7e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009c6c:	1d3b      	adds	r3, r7, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4808      	ldr	r0, [pc, #32]	; (8009c94 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009c72:	f7ff fcf4 	bl	800965e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f80d 	bl	8009c98 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009c7e:	4805      	ldr	r0, [pc, #20]	; (8009c94 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009c80:	f7ff fc5e 	bl	8009540 <LST_is_empty>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f0      	beq.n	8009c6c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009c8a:	bf00      	nop
}
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200301cc 	.word	0x200301cc

08009c98 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b06      	cmp	r3, #6
 8009cbc:	d845      	bhi.n	8009d4a <OutputDbgTrace+0x9e>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <OutputDbgTrace+0x18>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009ce1 	.word	0x08009ce1
 8009cc8:	08009d05 	.word	0x08009d05
 8009ccc:	08009d0b 	.word	0x08009d0b
 8009cd0:	08009d1f 	.word	0x08009d1f
 8009cd4:	08009d2b 	.word	0x08009d2b
 8009cd8:	08009d31 	.word	0x08009d31
 8009cdc:	08009d3f 	.word	0x08009d3f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	7a5b      	ldrb	r3, [r3, #9]
 8009ce8:	2bff      	cmp	r3, #255	; 0xff
 8009cea:	d005      	beq.n	8009cf8 <OutputDbgTrace+0x4c>
 8009cec:	2bff      	cmp	r3, #255	; 0xff
 8009cee:	dc05      	bgt.n	8009cfc <OutputDbgTrace+0x50>
 8009cf0:	2b0e      	cmp	r3, #14
 8009cf2:	d005      	beq.n	8009d00 <OutputDbgTrace+0x54>
 8009cf4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009cf6:	e001      	b.n	8009cfc <OutputDbgTrace+0x50>
          break;
 8009cf8:	bf00      	nop
 8009cfa:	e027      	b.n	8009d4c <OutputDbgTrace+0xa0>
          break;
 8009cfc:	bf00      	nop
 8009cfe:	e025      	b.n	8009d4c <OutputDbgTrace+0xa0>
          break;
 8009d00:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009d02:	e023      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009d08:	e020      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	7a5b      	ldrb	r3, [r3, #9]
 8009d12:	2b0e      	cmp	r3, #14
 8009d14:	d001      	beq.n	8009d1a <OutputDbgTrace+0x6e>
 8009d16:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009d18:	e000      	b.n	8009d1c <OutputDbgTrace+0x70>
          break;
 8009d1a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009d1c:	e016      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	7a5b      	ldrb	r3, [r3, #9]
 8009d26:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009d28:	e010      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009d2e:	e00d      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	7a5b      	ldrb	r3, [r3, #9]
 8009d38:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009d3a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009d3c:	e006      	b.n	8009d4c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	7a5b      	ldrb	r3, [r3, #9]
 8009d46:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009d48:	e000      	b.n	8009d4c <OutputDbgTrace+0xa0>

    default:
      break;
 8009d4a:	bf00      	nop
  }

  return;
 8009d4c:	bf00      	nop
}
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <UTIL_LPM_Init+0x1c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009d62:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <UTIL_LPM_Init+0x20>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009d68:	bf00      	nop
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	200005d8 	.word	0x200005d8
 8009d78:	200005dc 	.word	0x200005dc

08009d7c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d88:	f3ef 8310 	mrs	r3, PRIMASK
 8009d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8009d8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d92:	b672      	cpsid	i
}
 8009d94:	bf00      	nop
  
  switch(state)
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d008      	beq.n	8009dae <UTIL_LPM_SetOffMode+0x32>
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10e      	bne.n	8009dbe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	4a0b      	ldr	r2, [pc, #44]	; (8009dd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009daa:	6013      	str	r3, [r2, #0]
      break;
 8009dac:	e008      	b.n	8009dc0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	43da      	mvns	r2, r3
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4013      	ands	r3, r2
 8009db8:	4a07      	ldr	r2, [pc, #28]	; (8009dd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009dba:	6013      	str	r3, [r2, #0]
      break;
 8009dbc:	e000      	b.n	8009dc0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009dbe:	bf00      	nop
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f383 8810 	msr	PRIMASK, r3
}
 8009dca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	200005dc 	.word	0x200005dc

08009ddc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de2:	f3ef 8310 	mrs	r3, PRIMASK
 8009de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009de8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009dea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dec:	b672      	cpsid	i
}
 8009dee:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009df0:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <UTIL_LPM_EnterLowPower+0x60>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d006      	beq.n	8009e06 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009df8:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	4798      	blx	r3
 8009e04:	e010      	b.n	8009e28 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009e06:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <UTIL_LPM_EnterLowPower+0x68>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d006      	beq.n	8009e1c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4798      	blx	r3
 8009e1a:	e005      	b.n	8009e28 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009e1c:	4b08      	ldr	r3, [pc, #32]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <UTIL_LPM_EnterLowPower+0x64>)
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	4798      	blx	r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f383 8810 	msr	PRIMASK, r3
}
 8009e32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	200005d8 	.word	0x200005d8
 8009e40:	0800a51c 	.word	0x0800a51c
 8009e44:	200005dc 	.word	0x200005dc

08009e48 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b090      	sub	sp, #64	; 0x40
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009e50:	4b73      	ldr	r3, [pc, #460]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009e56:	4b72      	ldr	r3, [pc, #456]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	4a70      	ldr	r2, [pc, #448]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009e60:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009e62:	4b70      	ldr	r3, [pc, #448]	; (800a024 <UTIL_SEQ_Run+0x1dc>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009e68:	4b6f      	ldr	r3, [pc, #444]	; (800a028 <UTIL_SEQ_Run+0x1e0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009e6e:	4b6f      	ldr	r3, [pc, #444]	; (800a02c <UTIL_SEQ_Run+0x1e4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009e74:	4b6e      	ldr	r3, [pc, #440]	; (800a030 <UTIL_SEQ_Run+0x1e8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009e7a:	e08d      	b.n	8009f98 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009e80:	e002      	b.n	8009e88 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e84:	3301      	adds	r3, #1
 8009e86:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009e88:	4a6a      	ldr	r2, [pc, #424]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	401a      	ands	r2, r3
 8009e94:	4b62      	ldr	r3, [pc, #392]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0f1      	beq.n	8009e82 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009e9e:	4a65      	ldr	r2, [pc, #404]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	401a      	ands	r2, r3
 8009eaa:	4b5d      	ldr	r3, [pc, #372]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009eb2:	4a60      	ldr	r2, [pc, #384]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	4413      	add	r3, r2
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d106      	bne.n	8009ed2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009ec4:	4a5b      	ldr	r2, [pc, #364]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009ed2:	4a58      	ldr	r2, [pc, #352]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	4413      	add	r3, r2
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	4013      	ands	r3, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 f9b3 	bl	800a24c <SEQ_BitPosition>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b53      	ldr	r3, [pc, #332]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009eec:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009eee:	4a51      	ldr	r2, [pc, #324]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	4b4f      	ldr	r3, [pc, #316]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f303 	lsl.w	r3, r1, r3
 8009f02:	43db      	mvns	r3, r3
 8009f04:	401a      	ands	r2, r3
 8009f06:	494b      	ldr	r1, [pc, #300]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	440b      	add	r3, r1
 8009f0e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f10:	f3ef 8310 	mrs	r3, PRIMASK
 8009f14:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f16:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009f18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f1a:	b672      	cpsid	i
}
 8009f1c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009f1e:	4b46      	ldr	r3, [pc, #280]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2201      	movs	r2, #1
 8009f24:	fa02 f303 	lsl.w	r3, r2, r3
 8009f28:	43da      	mvns	r2, r3
 8009f2a:	4b3e      	ldr	r3, [pc, #248]	; (800a024 <UTIL_SEQ_Run+0x1dc>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4013      	ands	r3, r2
 8009f30:	4a3c      	ldr	r2, [pc, #240]	; (800a024 <UTIL_SEQ_Run+0x1dc>)
 8009f32:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009f34:	2302      	movs	r3, #2
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f38:	e013      	b.n	8009f62 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4a3d      	ldr	r2, [pc, #244]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009f40:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009f44:	4b3c      	ldr	r3, [pc, #240]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4e:	43da      	mvns	r2, r3
 8009f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f52:	3b01      	subs	r3, #1
 8009f54:	400a      	ands	r2, r1
 8009f56:	4937      	ldr	r1, [pc, #220]	; (800a034 <UTIL_SEQ_Run+0x1ec>)
 8009f58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e8      	bne.n	8009f3a <UTIL_SEQ_Run+0xf2>
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f383 8810 	msr	PRIMASK, r3
}
 8009f72:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009f74:	4b30      	ldr	r3, [pc, #192]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a30      	ldr	r2, [pc, #192]	; (800a03c <UTIL_SEQ_Run+0x1f4>)
 8009f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f7e:	4798      	blx	r3

    local_taskset = TaskSet;
 8009f80:	4b28      	ldr	r3, [pc, #160]	; (800a024 <UTIL_SEQ_Run+0x1dc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009f86:	4b28      	ldr	r3, [pc, #160]	; (800a028 <UTIL_SEQ_Run+0x1e0>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009f8c:	4b27      	ldr	r3, [pc, #156]	; (800a02c <UTIL_SEQ_Run+0x1e4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009f92:	4b27      	ldr	r3, [pc, #156]	; (800a030 <UTIL_SEQ_Run+0x1e8>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	4b20      	ldr	r3, [pc, #128]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <UTIL_SEQ_Run+0x16c>
 8009fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	4013      	ands	r3, r2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f43f af64 	beq.w	8009e7c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009fb4:	4b20      	ldr	r3, [pc, #128]	; (800a038 <UTIL_SEQ_Run+0x1f0>)
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009fbc:	f000 f938 	bl	800a230 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8009fc6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fca:	b672      	cpsid	i
}
 8009fcc:	bf00      	nop
  local_taskset = TaskSet;
 8009fce:	4b15      	ldr	r3, [pc, #84]	; (800a024 <UTIL_SEQ_Run+0x1dc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009fd4:	4b14      	ldr	r3, [pc, #80]	; (800a028 <UTIL_SEQ_Run+0x1e0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009fda:	4b14      	ldr	r3, [pc, #80]	; (800a02c <UTIL_SEQ_Run+0x1e4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	401a      	ands	r2, r3
 8009fe6:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4013      	ands	r3, r2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d107      	bne.n	800a000 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <UTIL_SEQ_Run+0x1e8>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009ffc:	f7f6 fc5d 	bl	80008ba <UTIL_SEQ_Idle>
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f383 8810 	msr	PRIMASK, r3
}
 800a00a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a00c:	f000 f917 	bl	800a23e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a010:	4a03      	ldr	r2, [pc, #12]	; (800a020 <UTIL_SEQ_Run+0x1d8>)
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	6013      	str	r3, [r2, #0]

  return;
 800a016:	bf00      	nop
}
 800a018:	3740      	adds	r7, #64	; 0x40
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000034 	.word	0x20000034
 800a024:	200005e0 	.word	0x200005e0
 800a028:	200005e4 	.word	0x200005e4
 800a02c:	20000030 	.word	0x20000030
 800a030:	200005e8 	.word	0x200005e8
 800a034:	20000670 	.word	0x20000670
 800a038:	200005ec 	.word	0x200005ec
 800a03c:	200005f0 	.word	0x200005f0

0800a040 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a04c:	f3ef 8310 	mrs	r3, PRIMASK
 800a050:	617b      	str	r3, [r7, #20]
  return(result);
 800a052:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a056:	b672      	cpsid	i
}
 800a058:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f8f6 	bl	800a24c <SEQ_BitPosition>
 800a060:	4603      	mov	r3, r0
 800a062:	4619      	mov	r1, r3
 800a064:	4a06      	ldr	r2, [pc, #24]	; (800a080 <UTIL_SEQ_RegTask+0x40>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f383 8810 	msr	PRIMASK, r3
}
 800a076:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a078:	bf00      	nop
}
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200005f0 	.word	0x200005f0

0800a084 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a08e:	f3ef 8310 	mrs	r3, PRIMASK
 800a092:	60fb      	str	r3, [r7, #12]
  return(result);
 800a094:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a098:	b672      	cpsid	i
}
 800a09a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <UTIL_SEQ_SetTask+0x50>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	4a0b      	ldr	r2, [pc, #44]	; (800a0d4 <UTIL_SEQ_SetTask+0x50>)
 800a0a6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a0a8:	4a0b      	ldr	r2, [pc, #44]	; (800a0d8 <UTIL_SEQ_SetTask+0x54>)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	4908      	ldr	r1, [pc, #32]	; (800a0d8 <UTIL_SEQ_SetTask+0x54>)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f383 8810 	msr	PRIMASK, r3
}
 800a0c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a0c8:	bf00      	nop
}
 800a0ca:	371c      	adds	r7, #28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	200005e0 	.word	0x200005e0
 800a0d8:	20000670 	.word	0x20000670

0800a0dc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0ee:	b672      	cpsid	i
}
 800a0f0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	43da      	mvns	r2, r3
 800a0f6:	4b08      	ldr	r3, [pc, #32]	; (800a118 <UTIL_SEQ_PauseTask+0x3c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	4a06      	ldr	r2, [pc, #24]	; (800a118 <UTIL_SEQ_PauseTask+0x3c>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f383 8810 	msr	PRIMASK, r3
}
 800a10a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a10c:	bf00      	nop
}
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	20000030 	.word	0x20000030

0800a11c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a124:	f3ef 8310 	mrs	r3, PRIMASK
 800a128:	60fb      	str	r3, [r7, #12]
  return(result);
 800a12a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a12c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a12e:	b672      	cpsid	i
}
 800a130:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <UTIL_SEQ_ResumeTask+0x3c>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4313      	orrs	r3, r2
 800a13a:	4a07      	ldr	r2, [pc, #28]	; (800a158 <UTIL_SEQ_ResumeTask+0x3c>)
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a14a:	bf00      	nop
}
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000030 	.word	0x20000030

0800a15c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a164:	f3ef 8310 	mrs	r3, PRIMASK
 800a168:	60fb      	str	r3, [r7, #12]
  return(result);
 800a16a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a16c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a16e:	b672      	cpsid	i
}
 800a170:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <UTIL_SEQ_SetEvt+0x3c>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4313      	orrs	r3, r2
 800a17a:	4a07      	ldr	r2, [pc, #28]	; (800a198 <UTIL_SEQ_SetEvt+0x3c>)
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f383 8810 	msr	PRIMASK, r3
}
 800a188:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a18a:	bf00      	nop
}
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	200005e4 	.word	0x200005e4

0800a19c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a1a4:	4b1f      	ldr	r3, [pc, #124]	; (800a224 <UTIL_SEQ_WaitEvt+0x88>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a1aa:	4b1e      	ldr	r3, [pc, #120]	; (800a224 <UTIL_SEQ_WaitEvt+0x88>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d102      	bne.n	800a1ba <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61fb      	str	r3, [r7, #28]
 800a1b8:	e005      	b.n	800a1c6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	; (800a224 <UTIL_SEQ_WaitEvt+0x88>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a1c6:	4b18      	ldr	r3, [pc, #96]	; (800a228 <UTIL_SEQ_WaitEvt+0x8c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a1cc:	4a16      	ldr	r2, [pc, #88]	; (800a228 <UTIL_SEQ_WaitEvt+0x8c>)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a1d2:	e003      	b.n	800a1dc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	69f8      	ldr	r0, [r7, #28]
 800a1d8:	f7f6 fb75 	bl	80008c6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a1dc:	4b13      	ldr	r3, [pc, #76]	; (800a22c <UTIL_SEQ_WaitEvt+0x90>)
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0f5      	beq.n	800a1d4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a1e8:	4a0e      	ldr	r2, [pc, #56]	; (800a224 <UTIL_SEQ_WaitEvt+0x88>)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1f4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f8:	b672      	cpsid	i
}
 800a1fa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	43da      	mvns	r2, r3
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <UTIL_SEQ_WaitEvt+0x90>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4013      	ands	r3, r2
 800a206:	4a09      	ldr	r2, [pc, #36]	; (800a22c <UTIL_SEQ_WaitEvt+0x90>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f383 8810 	msr	PRIMASK, r3
}
 800a214:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a216:	4a04      	ldr	r2, [pc, #16]	; (800a228 <UTIL_SEQ_WaitEvt+0x8c>)
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	6013      	str	r3, [r2, #0]
  return;
 800a21c:	bf00      	nop
}
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	200005ec 	.word	0x200005ec
 800a228:	200005e8 	.word	0x200005e8
 800a22c:	200005e4 	.word	0x200005e4

0800a230 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a234:	bf00      	nop
}
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a23e:	b480      	push	{r7}
 800a240:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a242:	bf00      	nop
}
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	041b      	lsls	r3, r3, #16
 800a262:	2b00      	cmp	r3, #0
 800a264:	d104      	bne.n	800a270 <SEQ_BitPosition+0x24>
 800a266:	2310      	movs	r3, #16
 800a268:	73fb      	strb	r3, [r7, #15]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	041b      	lsls	r3, r3, #16
 800a26e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <SEQ_BitPosition+0x3a>
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	3308      	adds	r3, #8
 800a27e:	73fb      	strb	r3, [r7, #15]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <SEQ_BitPosition+0x50>
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	3304      	adds	r3, #4
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	0f1b      	lsrs	r3, r3, #28
 800a2a0:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <SEQ_BitPosition+0x74>)
 800a2a2:	5cd2      	ldrb	r2, [r2, r3]
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	f1c3 031f 	rsb	r3, r3, #31
 800a2b0:	b2db      	uxtb	r3, r3
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	0800a5f0 	.word	0x0800a5f0

0800a2c4 <__libc_init_array>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	4d0d      	ldr	r5, [pc, #52]	; (800a2fc <__libc_init_array+0x38>)
 800a2c8:	4c0d      	ldr	r4, [pc, #52]	; (800a300 <__libc_init_array+0x3c>)
 800a2ca:	1b64      	subs	r4, r4, r5
 800a2cc:	10a4      	asrs	r4, r4, #2
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	d109      	bne.n	800a2e8 <__libc_init_array+0x24>
 800a2d4:	4d0b      	ldr	r5, [pc, #44]	; (800a304 <__libc_init_array+0x40>)
 800a2d6:	4c0c      	ldr	r4, [pc, #48]	; (800a308 <__libc_init_array+0x44>)
 800a2d8:	f000 f82e 	bl	800a338 <_init>
 800a2dc:	1b64      	subs	r4, r4, r5
 800a2de:	10a4      	asrs	r4, r4, #2
 800a2e0:	2600      	movs	r6, #0
 800a2e2:	42a6      	cmp	r6, r4
 800a2e4:	d105      	bne.n	800a2f2 <__libc_init_array+0x2e>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ec:	4798      	blx	r3
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7ee      	b.n	800a2d0 <__libc_init_array+0xc>
 800a2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f6:	4798      	blx	r3
 800a2f8:	3601      	adds	r6, #1
 800a2fa:	e7f2      	b.n	800a2e2 <__libc_init_array+0x1e>
 800a2fc:	0800a600 	.word	0x0800a600
 800a300:	0800a600 	.word	0x0800a600
 800a304:	0800a600 	.word	0x0800a600
 800a308:	0800a604 	.word	0x0800a604

0800a30c <memcpy>:
 800a30c:	440a      	add	r2, r1
 800a30e:	4291      	cmp	r1, r2
 800a310:	f100 33ff 	add.w	r3, r0, #4294967295
 800a314:	d100      	bne.n	800a318 <memcpy+0xc>
 800a316:	4770      	bx	lr
 800a318:	b510      	push	{r4, lr}
 800a31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a322:	4291      	cmp	r1, r2
 800a324:	d1f9      	bne.n	800a31a <memcpy+0xe>
 800a326:	bd10      	pop	{r4, pc}

0800a328 <memset>:
 800a328:	4402      	add	r2, r0
 800a32a:	4603      	mov	r3, r0
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d100      	bne.n	800a332 <memset+0xa>
 800a330:	4770      	bx	lr
 800a332:	f803 1b01 	strb.w	r1, [r3], #1
 800a336:	e7f9      	b.n	800a32c <memset+0x4>

0800a338 <_init>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr

0800a344 <_fini>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr
